
Signal_Generator_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa18  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800ab28  0800ab28  0000bb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad90  0800ad90  0000c180  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad90  0800ad90  0000c180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad90  0800ad90  0000c180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad90  0800ad90  0000bd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad94  0800ad94  0000bd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0800ad98  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  20000180  0800af18  0000c180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014bc  0800af18  0000c4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001330f  00000000  00000000  0000c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ed  00000000  00000000  0001f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00022ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d78  00000000  00000000  00023d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af93  00000000  00000000  00024ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167e4  00000000  00000000  0003fa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092566  00000000  00000000  00056257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e87bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c4c  00000000  00000000  000e8800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ed44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab10 	.word	0x0800ab10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800ab10 	.word	0x0800ab10

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <MX_DMA_Init>:
ADC_HandleTypeDef hadc1; // ADC handle
DMA_HandleTypeDef hdma_adc1;
uint16_t adcValue[10]; // DMA ile okunan 1024 ADC değeri


static void MX_DMA_Init(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <MX_DMA_Init+0x88>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <MX_DMA_Init+0x88>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <MX_DMA_Init+0x88>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  hdma_adc1.Instance = DMA1_Channel1;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	@ (8000b1c <MX_DMA_Init+0x90>)
 8000aae:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000abe:	2280      	movs	r2, #128	@ 0x80
 8000ac0:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000ac4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac8:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aca:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000acc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ad0:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000ae0:	f001 fae6 	bl	80020b0 <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_DMA_Init+0x62>
    {
      Error_Handler();
 8000aea:	f000 fc55 	bl	8001398 <Error_Handler>
    }
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_DMA_Init+0x94>)
 8000af0:	4a09      	ldr	r2, [pc, #36]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000af2:	621a      	str	r2, [r3, #32]
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <MX_DMA_Init+0x8c>)
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <MX_DMA_Init+0x94>)
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24

   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200b      	movs	r0, #11
 8000b00:	f001 fa9f 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b04:	200b      	movs	r0, #11
 8000b06:	f001 fab8 	bl	800207a <HAL_NVIC_EnableIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	200001cc 	.word	0x200001cc
 8000b1c:	40020008 	.word	0x40020008
 8000b20:	2000019c 	.word	0x2000019c

08000b24 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b36:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <MX_ADC1_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE; // Sürekli dönüşüm
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b4e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b62:	f000 fdcb 	bl	80016fc <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x4c>
    {
      Error_Handler();
 8000b6c:	f000 fc14 	bl	8001398 <Error_Handler>
    }

  sConfig.Channel = ADC_CHANNEL_9;
 8000b70:	2309      	movs	r3, #9
 8000b72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1; //Bu satırı ekle
 8000b74:	2301      	movs	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <MX_ADC1_Init+0x74>)
 8000b7e:	f000 ff8f 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0x68>
    {
      Error_Handler();
 8000b88:	f000 fc06 	bl	8001398 <Error_Handler>
    }
     MX_DMA_Init();
 8000b8c:	f7ff ff7e 	bl	8000a8c <MX_DMA_Init>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000019c 	.word	0x2000019c
 8000b9c:	40012400 	.word	0x40012400

08000ba0 <startADC>:

void startADC(void){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    MX_ADC1_Init(); // ADC'yi başlat
 8000ba4:	f7ff ffbe 	bl	8000b24 <MX_ADC1_Init>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcValue, 10);
 8000ba8:	220a      	movs	r2, #10
 8000baa:	4903      	ldr	r1, [pc, #12]	@ (8000bb8 <startADC+0x18>)
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <startADC+0x1c>)
 8000bae:	f000 fe7d 	bl	80018ac <HAL_ADC_Start_DMA>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000210 	.word	0x20000210
 8000bbc:	2000019c 	.word	0x2000019c

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc6:	f000 fd37 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bca:	f000 f83b 	bl	8000c44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <main+0x74>)
 8000bd0:	695b      	ldr	r3, [r3, #20]
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <main+0x74>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6153      	str	r3, [r2, #20]
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <main+0x74>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <main+0x74>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <main+0x74>)
 8000bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <main+0x74>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 f8e9 	bl	8000dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f000 f8c9 	bl	8000d98 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c06:	f000 f87b 	bl	8000d00 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c0a:	f008 fac1 	bl	8009190 <MX_USB_DEVICE_Init>
  startADC();
 8000c0e:	f7ff ffc7 	bl	8000ba0 <startADC>
  /* USER CODE BEGIN 2 */
    // Timer frekansı ve dalga tipi başlangıçta ayarlanıyor
    setTimerFrequency(waveFrequency); // Frekansı ayarla
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <main+0x78>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fa95 	bl	8001148 <setTimerFrequency>
    updateWaveType(waveType);         // Dalga tipini ayarla
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <main+0x7c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fa69 	bl	80010fc <updateWaveType>
    HAL_TIM_Base_Start_IT(&htim2);    // Timer'ı başlatDDD
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <main+0x80>)
 8000c2c:	f004 f80e 	bl	8004c4c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <main+0x70>
 8000c34:	40021000 	.word	0x40021000
 8000c38:	20000296 	.word	0x20000296
 8000c3c:	20000297 	.word	0x20000297
 8000c40:	200002b0 	.word	0x200002b0

08000c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b094      	sub	sp, #80	@ 0x50
 8000c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c4e:	2228      	movs	r2, #40	@ 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 ff4c 	bl	8009af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c86:	2302      	movs	r3, #2
 8000c88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c90:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 faf2 	bl	8004284 <HAL_RCC_OscConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ca6:	f000 fb77 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000caa:	230f      	movs	r3, #15
 8000cac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fd5e 	bl	8004788 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cd2:	f000 fb61 	bl	8001398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000cd6:	2312      	movs	r3, #18
 8000cd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cde:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 feaa 	bl	8004a40 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000cf2:	f000 fb51 	bl	8001398 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3750      	adds	r7, #80	@ 0x50
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d26:	2247      	movs	r2, #71	@ 0x47
 8000d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d32:	2263      	movs	r2, #99	@ 0x63
 8000d34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d42:	4814      	ldr	r0, [pc, #80]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d44:	f003 ff32 	bl	8004bac <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f000 fb23 	bl	8001398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d60:	f004 f8b6 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 fb15 	bl	8001398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d7c:	f004 fa98 	bl	80052b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000d86:	f000 fb07 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200002b0 	.word	0x200002b0

08000d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_DMA_Init+0x38>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <MX_DMA_Init+0x38>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6153      	str	r3, [r2, #20]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_DMA_Init+0x38>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	200b      	movs	r0, #11
 8000dbc:	f001 f941 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dc0:	200b      	movs	r0, #11
 8000dc2:	f001 f95a 	bl	800207a <HAL_NVIC_EnableIRQ>

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a25      	ldr	r2, [pc, #148]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0320 	and.w	r3, r3, #32
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a1f      	ldr	r2, [pc, #124]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <MX_GPIO_Init+0xb0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e30:	2200      	movs	r2, #0
 8000e32:	21ff      	movs	r1, #255	@ 0xff
 8000e34:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <MX_GPIO_Init+0xb4>)
 8000e36:	f001 fcad 	bl	8002794 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4813      	ldr	r0, [pc, #76]	@ (8000e8c <MX_GPIO_Init+0xb8>)
 8000e40:	f001 fca8 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e44:	23ff      	movs	r3, #255	@ 0xff
 8000e46:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <MX_GPIO_Init+0xb4>)
 8000e5c:	f001 fb16 	bl	800248c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_GPIO_Init+0xb8>)
 8000e78:	f001 fb08 	bl	800248c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ea0:	d15c      	bne.n	8000f5c <HAL_TIM_PeriodElapsedCallback+0xcc>
        if (waveType == 3) {
 8000ea2:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d10f      	bne.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x3c>
            if (currentIndex < (pwmDutyCycle * WAVE_TABLE_SIZE / 100)) {
 8000eac:	4b2e      	ldr	r3, [pc, #184]	@ (8000f68 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d903      	bls.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0x34>
                GPIOA->ODR = MAX_DAC_VALUE;
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ebe:	22ff      	movs	r2, #255	@ 0xff
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	e00a      	b.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x4a>
            } else {
                GPIOA->ODR = 0;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	e006      	b.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x4a>
            }
        } else {
            GPIOA->ODR = waveTable[currentIndex];
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ed4:	5c9a      	ldrb	r2, [r3, r2]
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ed8:	60da      	str	r2, [r3, #12]
        }

        currentIndex = (currentIndex + 1) % WAVE_TABLE_SIZE;
 8000eda:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a25      	ldr	r2, [pc, #148]	@ (8000f78 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee6:	1151      	asrs	r1, r2, #5
 8000ee8:	17da      	asrs	r2, r3, #31
 8000eea:	1a8a      	subs	r2, r1, r2
 8000eec:	2164      	movs	r1, #100	@ 0x64
 8000eee:	fb01 f202 	mul.w	r2, r1, r2
 8000ef2:	1a9a      	subs	r2, r3, r2
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000ef8:	801a      	strh	r2, [r3, #0]
        tim2Counter++;
 8000efa:	4b20      	ldr	r3, [pc, #128]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f06:	701a      	strb	r2, [r3, #0]
        uint8_t tim2Frequency;
        if(waveFrequency == 0){
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <HAL_TIM_PeriodElapsedCallback+0x88>
        	tim2Frequency = 20;
 8000f12:	2314      	movs	r3, #20
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e001      	b.n	8000f1c <HAL_TIM_PeriodElapsedCallback+0x8c>
        }
        else {
        	tim2Frequency = 40;
 8000f18:	2328      	movs	r3, #40	@ 0x28
 8000f1a:	73fb      	strb	r3, [r7, #15]
        }
        uint16_t counterLimit = tim2Frequency / 10;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	81bb      	strh	r3, [r7, #12]
        if (tim2Counter >= counterLimit) {
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	89bb      	ldrh	r3, [r7, #12]
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d811      	bhi.n	8000f5c <HAL_TIM_PeriodElapsedCallback+0xcc>
                    tim2Counter = 0;
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
                    // ADC tamponunu kopyala
                    memcpy(adcBuffer, adcValue, sizeof(adcValue));
 8000f3e:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f42:	4614      	mov	r4, r2
 8000f44:	461d      	mov	r5, r3
 8000f46:	6828      	ldr	r0, [r5, #0]
 8000f48:	6869      	ldr	r1, [r5, #4]
 8000f4a:	68aa      	ldr	r2, [r5, #8]
 8000f4c:	68eb      	ldr	r3, [r5, #12]
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	6928      	ldr	r0, [r5, #16]
 8000f52:	6020      	str	r0, [r4, #0]

                    // USB üzerinden veri gönderimi
                    CDC_Transmit_FS((uint8_t*)adcBuffer, sizeof(adcBuffer));
 8000f54:	2114      	movs	r1, #20
 8000f56:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f58:	f008 f9ec 	bl	8009334 <CDC_Transmit_FS>
                }
}
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bdb0      	pop	{r4, r5, r7, pc}
 8000f64:	20000297 	.word	0x20000297
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000288 	.word	0x20000288
 8000f70:	40010800 	.word	0x40010800
 8000f74:	20000224 	.word	0x20000224
 8000f78:	51eb851f 	.word	0x51eb851f
 8000f7c:	200002ac 	.word	0x200002ac
 8000f80:	20000296 	.word	0x20000296
 8000f84:	cccccccd 	.word	0xcccccccd
 8000f88:	20000298 	.word	0x20000298
 8000f8c:	20000210 	.word	0x20000210

08000f90 <generateSineTable>:
void generateSineTable(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
    for (int i = 0; i < WAVE_TABLE_SIZE; i++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	e034      	b.n	8001006 <generateSineTable+0x76>
        waveTable[i] = (uint8_t)((MAX_DAC_VALUE / 2.0) * (1.0 + sin(2 * M_PI * i / WAVE_TABLE_SIZE)));
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fa29 	bl	80003f4 <__aeabi_i2d>
 8000fa2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001018 <generateSineTable+0x88>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fa8e 	bl	80004c8 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <generateSineTable+0x98>)
 8000fba:	f7ff fbaf 	bl	800071c <__aeabi_ddiv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f008 fdcd 	bl	8009b64 <sin>
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <generateSineTable+0x9c>)
 8000fd0:	f7ff f8c4 	bl	800015c <__adddf3>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a310      	add	r3, pc, #64	@ (adr r3, 8001020 <generateSineTable+0x90>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fa71 	bl	80004c8 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd2d 	bl	8000a4c <__aeabi_d2uiz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b2d9      	uxtb	r1, r3
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <generateSineTable+0xa0>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < WAVE_TABLE_SIZE; i++) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b63      	cmp	r3, #99	@ 0x63
 800100a:	ddc7      	ble.n	8000f9c <generateSineTable+0xc>
    }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	54442d18 	.word	0x54442d18
 800101c:	401921fb 	.word	0x401921fb
 8001020:	00000000 	.word	0x00000000
 8001024:	405fe000 	.word	0x405fe000
 8001028:	40590000 	.word	0x40590000
 800102c:	3ff00000 	.word	0x3ff00000
 8001030:	20000224 	.word	0x20000224

08001034 <generateSawtoothTable>:

void generateSawtoothTable(void) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < WAVE_TABLE_SIZE; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e012      	b.n	8001066 <generateSawtoothTable+0x32>
        waveTable[i] = (uint8_t)((MAX_DAC_VALUE * i) / WAVE_TABLE_SIZE);
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	1a9b      	subs	r3, r3, r2
 8001048:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <generateSawtoothTable+0x44>)
 800104a:	fb82 1203 	smull	r1, r2, r2, r3
 800104e:	1152      	asrs	r2, r2, #5
 8001050:	17db      	asrs	r3, r3, #31
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	b2d9      	uxtb	r1, r3
 8001056:	4a09      	ldr	r2, [pc, #36]	@ (800107c <generateSawtoothTable+0x48>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	460a      	mov	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < WAVE_TABLE_SIZE; i++) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3301      	adds	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b63      	cmp	r3, #99	@ 0x63
 800106a:	dde9      	ble.n	8001040 <generateSawtoothTable+0xc>
    }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	51eb851f 	.word	0x51eb851f
 800107c:	20000224 	.word	0x20000224

08001080 <generateTriangleTable>:

void generateTriangleTable(void) {
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
    int midpoint = WAVE_TABLE_SIZE / 2;
 8001086:	2332      	movs	r3, #50	@ 0x32
 8001088:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < midpoint; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e00f      	b.n	80010b0 <generateTriangleTable+0x30>
        waveTable[i] = (uint8_t)((MAX_DAC_VALUE * i) / midpoint);
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4613      	mov	r3, r2
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	1a9a      	subs	r2, r3, r2
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	fb92 f3f3 	sdiv	r3, r2, r3
 800109e:	b2d9      	uxtb	r1, r3
 80010a0:	4a15      	ldr	r2, [pc, #84]	@ (80010f8 <generateTriangleTable+0x78>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	460a      	mov	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < midpoint; i++) {
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbeb      	blt.n	8001090 <generateTriangleTable+0x10>
    }
    for (int i = midpoint; i < WAVE_TABLE_SIZE; i++) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e013      	b.n	80010e6 <generateTriangleTable+0x66>
        waveTable[i] = (uint8_t)(MAX_DAC_VALUE - ((MAX_DAC_VALUE * (i - midpoint)) / midpoint));
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	4613      	mov	r3, r2
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	1a9a      	subs	r2, r3, r2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	b2d9      	uxtb	r1, r3
 80010d6:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <generateTriangleTable+0x78>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4413      	add	r3, r2
 80010dc:	460a      	mov	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
    for (int i = midpoint; i < WAVE_TABLE_SIZE; i++) {
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b63      	cmp	r3, #99	@ 0x63
 80010ea:	dde8      	ble.n	80010be <generateTriangleTable+0x3e>
    }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	20000224 	.word	0x20000224

080010fc <updateWaveType>:

void updateWaveType(uint8_t type) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d814      	bhi.n	8001136 <updateWaveType+0x3a>
 800110c:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <updateWaveType+0x18>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	0800112b 	.word	0x0800112b
 800111c:	08001131 	.word	0x08001131
 8001120:	0800113d 	.word	0x0800113d
        case 0: // Sinüs
            generateSineTable();
 8001124:	f7ff ff34 	bl	8000f90 <generateSineTable>
            break;
 8001128:	e009      	b.n	800113e <updateWaveType+0x42>
        case 1: // Testere
            generateSawtoothTable();
 800112a:	f7ff ff83 	bl	8001034 <generateSawtoothTable>
            break;
 800112e:	e006      	b.n	800113e <updateWaveType+0x42>
        case 2: // Üçgen
            generateTriangleTable();
 8001130:	f7ff ffa6 	bl	8001080 <generateTriangleTable>
            break;
 8001134:	e003      	b.n	800113e <updateWaveType+0x42>
        case 3: // PWM için tablo gerekmiyor
            break;
        default:
            generateSineTable();
 8001136:	f7ff ff2b 	bl	8000f90 <generateSineTable>
    }
}
 800113a:	e000      	b.n	800113e <updateWaveType+0x42>
            break;
 800113c:	bf00      	nop
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop

08001148 <setTimerFrequency>:

void setTimerFrequency(uint8_t frequency) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    if (frequency == 0) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d106      	bne.n	8001166 <setTimerFrequency+0x1e>
        htim2.Init.Prescaler = 71;
 8001158:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <setTimerFrequency+0x48>)
 800115a:	2247      	movs	r2, #71	@ 0x47
 800115c:	605a      	str	r2, [r3, #4]
        htim2.Init.Period = 99;
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <setTimerFrequency+0x48>)
 8001160:	2263      	movs	r2, #99	@ 0x63
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	e008      	b.n	8001178 <setTimerFrequency+0x30>
    } else if (frequency == 1) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d105      	bne.n	8001178 <setTimerFrequency+0x30>
        htim2.Init.Prescaler = 71;
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <setTimerFrequency+0x48>)
 800116e:	2247      	movs	r2, #71	@ 0x47
 8001170:	605a      	str	r2, [r3, #4]
        htim2.Init.Period = 49;
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <setTimerFrequency+0x48>)
 8001174:	2231      	movs	r2, #49	@ 0x31
 8001176:	60da      	str	r2, [r3, #12]
    }
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <setTimerFrequency+0x48>)
 800117a:	f003 fd17 	bl	8004bac <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <setTimerFrequency+0x40>
        Error_Handler();
 8001184:	f000 f908 	bl	8001398 <Error_Handler>
    }
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200002b0 	.word	0x200002b0

08001194 <processReceivedData>:

void processReceivedData(void) { // Tanım Eklendi
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    switch (RxBuffer[0]) {
 8001198:	4b7b      	ldr	r3, [pc, #492]	@ (8001388 <processReceivedData+0x1f4>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	3b31      	subs	r3, #49	@ 0x31
 800119e:	2b44      	cmp	r3, #68	@ 0x44
 80011a0:	f200 80ee 	bhi.w	8001380 <processReceivedData+0x1ec>
 80011a4:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <processReceivedData+0x18>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	08001311 	.word	0x08001311
 80011b0:	08001325 	.word	0x08001325
 80011b4:	08001381 	.word	0x08001381
 80011b8:	08001381 	.word	0x08001381
 80011bc:	08001381 	.word	0x08001381
 80011c0:	08001381 	.word	0x08001381
 80011c4:	08001381 	.word	0x08001381
 80011c8:	08001381 	.word	0x08001381
 80011cc:	08001381 	.word	0x08001381
 80011d0:	08001381 	.word	0x08001381
 80011d4:	08001381 	.word	0x08001381
 80011d8:	08001381 	.word	0x08001381
 80011dc:	08001381 	.word	0x08001381
 80011e0:	08001381 	.word	0x08001381
 80011e4:	08001381 	.word	0x08001381
 80011e8:	08001381 	.word	0x08001381
 80011ec:	08001381 	.word	0x08001381
 80011f0:	08001381 	.word	0x08001381
 80011f4:	08001381 	.word	0x08001381
 80011f8:	08001381 	.word	0x08001381
 80011fc:	08001381 	.word	0x08001381
 8001200:	08001381 	.word	0x08001381
 8001204:	08001381 	.word	0x08001381
 8001208:	08001381 	.word	0x08001381
 800120c:	08001381 	.word	0x08001381
 8001210:	08001381 	.word	0x08001381
 8001214:	08001381 	.word	0x08001381
 8001218:	08001381 	.word	0x08001381
 800121c:	08001381 	.word	0x08001381
 8001220:	08001381 	.word	0x08001381
 8001224:	08001381 	.word	0x08001381
 8001228:	08001381 	.word	0x08001381
 800122c:	08001381 	.word	0x08001381
 8001230:	08001381 	.word	0x08001381
 8001234:	08001381 	.word	0x08001381
 8001238:	08001381 	.word	0x08001381
 800123c:	08001381 	.word	0x08001381
 8001240:	08001381 	.word	0x08001381
 8001244:	08001381 	.word	0x08001381
 8001248:	08001381 	.word	0x08001381
 800124c:	08001381 	.word	0x08001381
 8001250:	08001381 	.word	0x08001381
 8001254:	08001381 	.word	0x08001381
 8001258:	08001381 	.word	0x08001381
 800125c:	08001381 	.word	0x08001381
 8001260:	08001381 	.word	0x08001381
 8001264:	08001381 	.word	0x08001381
 8001268:	08001381 	.word	0x08001381
 800126c:	08001339 	.word	0x08001339
 8001270:	08001341 	.word	0x08001341
 8001274:	08001349 	.word	0x08001349
 8001278:	08001351 	.word	0x08001351
 800127c:	08001359 	.word	0x08001359
 8001280:	08001361 	.word	0x08001361
 8001284:	08001369 	.word	0x08001369
 8001288:	08001371 	.word	0x08001371
 800128c:	08001379 	.word	0x08001379
 8001290:	08001381 	.word	0x08001381
 8001294:	08001381 	.word	0x08001381
 8001298:	08001381 	.word	0x08001381
 800129c:	08001381 	.word	0x08001381
 80012a0:	08001381 	.word	0x08001381
 80012a4:	08001381 	.word	0x08001381
 80012a8:	080012fd 	.word	0x080012fd
 80012ac:	08001381 	.word	0x08001381
 80012b0:	08001381 	.word	0x08001381
 80012b4:	080012c1 	.word	0x080012c1
 80012b8:	080012d5 	.word	0x080012d5
 80012bc:	080012e9 	.word	0x080012e9
        case 's':
            waveType = 0;
 80012c0:	4b32      	ldr	r3, [pc, #200]	@ (800138c <processReceivedData+0x1f8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
            updateWaveType(waveType);
 80012c6:	4b31      	ldr	r3, [pc, #196]	@ (800138c <processReceivedData+0x1f8>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff15 	bl	80010fc <updateWaveType>
            break;
 80012d2:	e056      	b.n	8001382 <processReceivedData+0x1ee>
        case 't':
            waveType = 1;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <processReceivedData+0x1f8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
            updateWaveType(waveType);
 80012da:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <processReceivedData+0x1f8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff0b 	bl	80010fc <updateWaveType>
            break;
 80012e6:	e04c      	b.n	8001382 <processReceivedData+0x1ee>
        case 'u':
            waveType = 2;
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <processReceivedData+0x1f8>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	701a      	strb	r2, [r3, #0]
            updateWaveType(waveType);
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <processReceivedData+0x1f8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff01 	bl	80010fc <updateWaveType>
            break;
 80012fa:	e042      	b.n	8001382 <processReceivedData+0x1ee>
        case 'p':
            waveType = 3;
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <processReceivedData+0x1f8>)
 80012fe:	2203      	movs	r2, #3
 8001300:	701a      	strb	r2, [r3, #0]
            updateWaveType(waveType);
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <processReceivedData+0x1f8>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fef7 	bl	80010fc <updateWaveType>
            break;
 800130e:	e038      	b.n	8001382 <processReceivedData+0x1ee>
        case '1':
            waveFrequency = 0;
 8001310:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <processReceivedData+0x1fc>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
            setTimerFrequency(waveFrequency);
 8001316:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <processReceivedData+0x1fc>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff13 	bl	8001148 <setTimerFrequency>
            break;
 8001322:	e02e      	b.n	8001382 <processReceivedData+0x1ee>
        case '2':
            waveFrequency = 1;
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <processReceivedData+0x1fc>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
            setTimerFrequency(waveFrequency);
 800132a:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <processReceivedData+0x1fc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff09 	bl	8001148 <setTimerFrequency>
            break;
 8001336:	e024      	b.n	8001382 <processReceivedData+0x1ee>
        case 'a':
            pwmDutyCycle = 10;
 8001338:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <processReceivedData+0x200>)
 800133a:	220a      	movs	r2, #10
 800133c:	701a      	strb	r2, [r3, #0]
            break;
 800133e:	e020      	b.n	8001382 <processReceivedData+0x1ee>
        case 'b':
            pwmDutyCycle = 20;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <processReceivedData+0x200>)
 8001342:	2214      	movs	r2, #20
 8001344:	701a      	strb	r2, [r3, #0]
            break;
 8001346:	e01c      	b.n	8001382 <processReceivedData+0x1ee>
        case 'c':
            pwmDutyCycle = 30;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <processReceivedData+0x200>)
 800134a:	221e      	movs	r2, #30
 800134c:	701a      	strb	r2, [r3, #0]
            break;
 800134e:	e018      	b.n	8001382 <processReceivedData+0x1ee>
        case 'd':
            pwmDutyCycle = 40;
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <processReceivedData+0x200>)
 8001352:	2228      	movs	r2, #40	@ 0x28
 8001354:	701a      	strb	r2, [r3, #0]
            break;
 8001356:	e014      	b.n	8001382 <processReceivedData+0x1ee>
        case 'e':
            pwmDutyCycle = 50;
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <processReceivedData+0x200>)
 800135a:	2232      	movs	r2, #50	@ 0x32
 800135c:	701a      	strb	r2, [r3, #0]
            break;
 800135e:	e010      	b.n	8001382 <processReceivedData+0x1ee>
        case 'f':
            pwmDutyCycle = 60;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <processReceivedData+0x200>)
 8001362:	223c      	movs	r2, #60	@ 0x3c
 8001364:	701a      	strb	r2, [r3, #0]
            break;
 8001366:	e00c      	b.n	8001382 <processReceivedData+0x1ee>
        case 'g':
            pwmDutyCycle = 70;
 8001368:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <processReceivedData+0x200>)
 800136a:	2246      	movs	r2, #70	@ 0x46
 800136c:	701a      	strb	r2, [r3, #0]
            break;
 800136e:	e008      	b.n	8001382 <processReceivedData+0x1ee>
        case 'h':
            pwmDutyCycle = 80;
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <processReceivedData+0x200>)
 8001372:	2250      	movs	r2, #80	@ 0x50
 8001374:	701a      	strb	r2, [r3, #0]
            break;
 8001376:	e004      	b.n	8001382 <processReceivedData+0x1ee>
        case 'i':
            pwmDutyCycle = 90;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <processReceivedData+0x200>)
 800137a:	225a      	movs	r2, #90	@ 0x5a
 800137c:	701a      	strb	r2, [r3, #0]
            break;
 800137e:	e000      	b.n	8001382 <processReceivedData+0x1ee>
        default:
            break;
 8001380:	bf00      	nop
    }
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000028c 	.word	0x2000028c
 800138c:	20000297 	.word	0x20000297
 8001390:	20000296 	.word	0x20000296
 8001394:	20000000 	.word	0x20000000

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* Kullanıcı kendi hata yönetimini ekleyebilir */
    __disable_irq();
    while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <Error_Handler+0x8>

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_MspInit+0x5c>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <HAL_MspInit+0x5c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_MspInit+0x5c>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_MspInit+0x5c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001400 <HAL_MspInit+0x5c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_MspInit+0x5c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_MspInit+0x60>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <HAL_MspInit+0x60>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000

08001408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <HAL_ADC_MspInit+0xbc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d149      	bne.n	80014bc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	@ (80014c8 <HAL_ADC_MspInit+0xc0>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <HAL_ADC_MspInit+0xc0>)
 800142e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_ADC_MspInit+0xc0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <HAL_ADC_MspInit+0xc0>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a20      	ldr	r2, [pc, #128]	@ (80014c8 <HAL_ADC_MspInit+0xc0>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <HAL_ADC_MspInit+0xc0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001458:	2302      	movs	r3, #2
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145c:	2303      	movs	r3, #3
 800145e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4619      	mov	r1, r3
 8001466:	4819      	ldr	r0, [pc, #100]	@ (80014cc <HAL_ADC_MspInit+0xc4>)
 8001468:	f001 f810 	bl	800248c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 800146e:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <HAL_ADC_MspInit+0xcc>)
 8001470:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001480:	2280      	movs	r2, #128	@ 0x80
 8001482:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001486:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800148a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800148c:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 800148e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001492:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001494:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 8001496:	2220      	movs	r2, #32
 8001498:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014a0:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 80014a2:	f000 fe05 	bl	80020b0 <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80014ac:	f7ff ff74 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 80014b4:	621a      	str	r2, [r3, #32]
 80014b6:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <HAL_ADC_MspInit+0xc8>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40012400 	.word	0x40012400
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	200001cc 	.word	0x200001cc
 80014d4:	40020008 	.word	0x40020008

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e8:	d114      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	201c      	movs	r0, #28
 8001508:	f000 fd9b 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800150c:	201c      	movs	r0, #28
 800150e:	f000 fdb4 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001512:	e010      	b.n	8001536 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_TIM_Base_MspInit+0x6c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40000800 	.word	0x40000800

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 f892 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <DMA1_Channel1_IRQHandler+0x10>)
 80015aa:	f000 fe3b 	bl	8002224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001cc 	.word	0x200001cc

080015b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015be:	f001 fa1d 	bl	80029fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000fc4 	.word	0x20000fc4

080015cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <TIM2_IRQHandler+0x10>)
 80015d2:	f003 fb8d 	bl	8004cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002b0 	.word	0x200002b0

080015e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ec:	f7ff fff8 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480b      	ldr	r0, [pc, #44]	@ (8001620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015f2:	490c      	ldr	r1, [pc, #48]	@ (8001624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001608:	4c09      	ldr	r4, [pc, #36]	@ (8001630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001616:	f008 fa73 	bl	8009b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800161a:	f7ff fad1 	bl	8000bc0 <main>
  bx lr
 800161e:	4770      	bx	lr
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001628:	0800ad98 	.word	0x0800ad98
  ldr r2, =_sbss
 800162c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001630:	200014bc 	.word	0x200014bc

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 fcef 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fea6 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd07 	bl	8002096 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 fccf 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	@ (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000004 	.word	0x20000004
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <HAL_IncTick+0x1c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <HAL_IncTick+0x20>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a03      	ldr	r2, [pc, #12]	@ (80016e4 <HAL_IncTick+0x20>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	200002f8 	.word	0x200002f8

080016e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b02      	ldr	r3, [pc, #8]	@ (80016f8 <HAL_GetTick+0x10>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	200002f8 	.word	0x200002f8

080016fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0be      	b.n	800189c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fe64 	bl	8001408 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 faff 	bl	8001d44 <ADC_ConversionStop_Disable>
 8001746:	4603      	mov	r3, r0
 8001748:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 8099 	bne.w	800188a <HAL_ADC_Init+0x18e>
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 8095 	bne.w	800188a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001768:	f023 0302 	bic.w	r3, r3, #2
 800176c:	f043 0202 	orr.w	r2, r3, #2
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800177c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7b1b      	ldrb	r3, [r3, #12]
 8001782:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001784:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4313      	orrs	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001794:	d003      	beq.n	800179e <HAL_ADC_Init+0xa2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <HAL_ADC_Init+0xa8>
 800179e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a2:	e000      	b.n	80017a6 <HAL_ADC_Init+0xaa>
 80017a4:	2300      	movs	r3, #0
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7d1b      	ldrb	r3, [r3, #20]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d119      	bne.n	80017e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7b1b      	ldrb	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	035a      	lsls	r2, r3, #13
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e00b      	b.n	80017e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	f043 0220 	orr.w	r2, r3, #32
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	4b28      	ldr	r3, [pc, #160]	@ (80018a4 <HAL_ADC_Init+0x1a8>)
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001818:	d003      	beq.n	8001822 <HAL_ADC_Init+0x126>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d104      	bne.n	800182c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	3b01      	subs	r3, #1
 8001828:	051b      	lsls	r3, r3, #20
 800182a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001832:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	430a      	orrs	r2, r1
 800183e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_ADC_Init+0x1ac>)
 8001848:	4013      	ands	r3, r2
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	429a      	cmp	r2, r3
 800184e:	d10b      	bne.n	8001868 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001866:	e018      	b.n	800189a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	f023 0312 	bic.w	r3, r3, #18
 8001870:	f043 0210 	orr.w	r2, r3, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001888:	e007      	b.n	800189a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188e:	f043 0210 	orr.w	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800189a:	7dfb      	ldrb	r3, [r7, #23]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	ffe1f7fd 	.word	0xffe1f7fd
 80018a8:	ff1f0efe 	.word	0xff1f0efe

080018ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a64      	ldr	r2, [pc, #400]	@ (8001a54 <HAL_ADC_Start_DMA+0x1a8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d004      	beq.n	80018d0 <HAL_ADC_Start_DMA+0x24>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a63      	ldr	r2, [pc, #396]	@ (8001a58 <HAL_ADC_Start_DMA+0x1ac>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d106      	bne.n	80018de <HAL_ADC_Start_DMA+0x32>
 80018d0:	4b60      	ldr	r3, [pc, #384]	@ (8001a54 <HAL_ADC_Start_DMA+0x1a8>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f040 80b3 	bne.w	8001a44 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_Start_DMA+0x40>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e0ae      	b.n	8001a4a <HAL_ADC_Start_DMA+0x19e>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f9cb 	bl	8001c90 <ADC_Enable>
 80018fa:	4603      	mov	r3, r0
 80018fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f040 809a 	bne.w	8001a3a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a4e      	ldr	r2, [pc, #312]	@ (8001a58 <HAL_ADC_Start_DMA+0x1ac>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d105      	bne.n	8001930 <HAL_ADC_Start_DMA+0x84>
 8001924:	4b4b      	ldr	r3, [pc, #300]	@ (8001a54 <HAL_ADC_Start_DMA+0x1a8>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d115      	bne.n	800195c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001946:	2b00      	cmp	r3, #0
 8001948:	d026      	beq.n	8001998 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001952:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800195a:	e01d      	b.n	8001998 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a39      	ldr	r2, [pc, #228]	@ (8001a54 <HAL_ADC_Start_DMA+0x1a8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d004      	beq.n	800197c <HAL_ADC_Start_DMA+0xd0>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a38      	ldr	r2, [pc, #224]	@ (8001a58 <HAL_ADC_Start_DMA+0x1ac>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d10d      	bne.n	8001998 <HAL_ADC_Start_DMA+0xec>
 800197c:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <HAL_ADC_Start_DMA+0x1a8>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001990:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	f023 0206 	bic.w	r2, r3, #6
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019b0:	e002      	b.n	80019b8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a25      	ldr	r2, [pc, #148]	@ (8001a5c <HAL_ADC_Start_DMA+0x1b0>)
 80019c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a24      	ldr	r2, [pc, #144]	@ (8001a60 <HAL_ADC_Start_DMA+0x1b4>)
 80019ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <HAL_ADC_Start_DMA+0x1b8>)
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0202 	mvn.w	r2, #2
 80019e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019f0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6a18      	ldr	r0, [r3, #32]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	334c      	adds	r3, #76	@ 0x4c
 80019fc:	4619      	mov	r1, r3
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f000 fbaf 	bl	8002164 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a10:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a14:	d108      	bne.n	8001a28 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a24:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a26:	e00f      	b.n	8001a48 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a36:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a38:	e006      	b.n	8001a48 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001a42:	e001      	b.n	8001a48 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40012400 	.word	0x40012400
 8001a58:	40012800 	.word	0x40012800
 8001a5c:	08001dc7 	.word	0x08001dc7
 8001a60:	08001e43 	.word	0x08001e43
 8001a64:	08001e5f 	.word	0x08001e5f

08001a68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x20>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0dc      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x1da>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d81c      	bhi.n	8001b0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b05      	subs	r3, #5
 8001ae2:	221f      	movs	r2, #31
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	4019      	ands	r1, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b05      	subs	r3, #5
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b08:	e03c      	b.n	8001b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d81c      	bhi.n	8001b4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3b23      	subs	r3, #35	@ 0x23
 8001b24:	221f      	movs	r2, #31
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4019      	ands	r1, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b23      	subs	r3, #35	@ 0x23
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b4a:	e01b      	b.n	8001b84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3b41      	subs	r3, #65	@ 0x41
 8001b5e:	221f      	movs	r2, #31
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4019      	ands	r1, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b41      	subs	r3, #65	@ 0x41
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b09      	cmp	r3, #9
 8001b8a:	d91c      	bls.n	8001bc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68d9      	ldr	r1, [r3, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b1e      	subs	r3, #30
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4019      	ands	r1, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6898      	ldr	r0, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	e019      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4019      	ands	r1, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6898      	ldr	r0, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d003      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c06:	2b11      	cmp	r3, #17
 8001c08:	d132      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d125      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d126      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d11a      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <HAL_ADC_ConfigChannel+0x1ec>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	0c9a      	lsrs	r2, r3, #18
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x1b2>
 8001c5e:	e007      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40012400 	.word	0x40012400
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	431bde83 	.word	0x431bde83

08001c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d040      	beq.n	8001d30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <ADC_Enable+0xac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <ADC_Enable+0xb0>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	0c9b      	lsrs	r3, r3, #18
 8001cca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ccc:	e002      	b.n	8001cd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f9      	bne.n	8001cce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cda:	f7ff fd05 	bl	80016e8 <HAL_GetTick>
 8001cde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ce0:	e01f      	b.n	8001d22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ce2:	f7ff fd01 	bl	80016e8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d918      	bls.n	8001d22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d011      	beq.n	8001d22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e007      	b.n	8001d32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d1d8      	bne.n	8001ce2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12e      	bne.n	8001dbc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d6e:	f7ff fcbb 	bl	80016e8 <HAL_GetTick>
 8001d72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d74:	e01b      	b.n	8001dae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d76:	f7ff fcb7 	bl	80016e8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d914      	bls.n	8001dae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10d      	bne.n	8001dae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	f043 0210 	orr.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da2:	f043 0201 	orr.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d0dc      	beq.n	8001d76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d127      	bne.n	8001e30 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001df6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dfa:	d115      	bne.n	8001e28 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d111      	bne.n	8001e28 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fe1d 	bl	8001a68 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e2e:	e004      	b.n	8001e3a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff fe12 	bl	8001a7a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7ff fe01 	bl	8001a8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4906      	ldr	r1, [pc, #24]	@ (8001f2c <__NVIC_EnableIRQ+0x34>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	@ (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	@ 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff90 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff2d 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff42 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff90 	bl	8001f84 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5f 	bl	8001f30 <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff35 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e043      	b.n	800214e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_DMA_Init+0xa8>)
 80020ce:	4413      	add	r3, r2
 80020d0:	4a22      	ldr	r2, [pc, #136]	@ (800215c <HAL_DMA_Init+0xac>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	009a      	lsls	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <HAL_DMA_Init+0xb0>)
 80020e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80020fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	bffdfff8 	.word	0xbffdfff8
 800215c:	cccccccd 	.word	0xcccccccd
 8002160:	40020000 	.word	0x40020000

08002164 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_DMA_Start_IT+0x20>
 8002180:	2302      	movs	r3, #2
 8002182:	e04b      	b.n	800221c <HAL_DMA_Start_IT+0xb8>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d13a      	bne.n	800220e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f937 	bl	8002430 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 020e 	orr.w	r2, r2, #14
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e00f      	b.n	80021fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 020a 	orr.w	r2, r2, #10
 80021fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e005      	b.n	800221a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002216:	2302      	movs	r3, #2
 8002218:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	2204      	movs	r2, #4
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d04f      	beq.n	80022ec <HAL_DMA_IRQHandler+0xc8>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04a      	beq.n	80022ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a66      	ldr	r2, [pc, #408]	@ (8002414 <HAL_DMA_IRQHandler+0x1f0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d029      	beq.n	80022d2 <HAL_DMA_IRQHandler+0xae>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a65      	ldr	r2, [pc, #404]	@ (8002418 <HAL_DMA_IRQHandler+0x1f4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d022      	beq.n	80022ce <HAL_DMA_IRQHandler+0xaa>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a63      	ldr	r2, [pc, #396]	@ (800241c <HAL_DMA_IRQHandler+0x1f8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01a      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xa4>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a62      	ldr	r2, [pc, #392]	@ (8002420 <HAL_DMA_IRQHandler+0x1fc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d012      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x9e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a60      	ldr	r2, [pc, #384]	@ (8002424 <HAL_DMA_IRQHandler+0x200>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00a      	beq.n	80022bc <HAL_DMA_IRQHandler+0x98>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002428 <HAL_DMA_IRQHandler+0x204>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d102      	bne.n	80022b6 <HAL_DMA_IRQHandler+0x92>
 80022b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022b4:	e00e      	b.n	80022d4 <HAL_DMA_IRQHandler+0xb0>
 80022b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80022ba:	e00b      	b.n	80022d4 <HAL_DMA_IRQHandler+0xb0>
 80022bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022c0:	e008      	b.n	80022d4 <HAL_DMA_IRQHandler+0xb0>
 80022c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022c6:	e005      	b.n	80022d4 <HAL_DMA_IRQHandler+0xb0>
 80022c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022cc:	e002      	b.n	80022d4 <HAL_DMA_IRQHandler+0xb0>
 80022ce:	2340      	movs	r3, #64	@ 0x40
 80022d0:	e000      	b.n	80022d4 <HAL_DMA_IRQHandler+0xb0>
 80022d2:	2304      	movs	r3, #4
 80022d4:	4a55      	ldr	r2, [pc, #340]	@ (800242c <HAL_DMA_IRQHandler+0x208>)
 80022d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8094 	beq.w	800240a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022ea:	e08e      	b.n	800240a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	2202      	movs	r2, #2
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d056      	beq.n	80023aa <HAL_DMA_IRQHandler+0x186>
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d051      	beq.n	80023aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 020a 	bic.w	r2, r2, #10
 8002322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a38      	ldr	r2, [pc, #224]	@ (8002414 <HAL_DMA_IRQHandler+0x1f0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d029      	beq.n	800238a <HAL_DMA_IRQHandler+0x166>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a37      	ldr	r2, [pc, #220]	@ (8002418 <HAL_DMA_IRQHandler+0x1f4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d022      	beq.n	8002386 <HAL_DMA_IRQHandler+0x162>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a35      	ldr	r2, [pc, #212]	@ (800241c <HAL_DMA_IRQHandler+0x1f8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01a      	beq.n	8002380 <HAL_DMA_IRQHandler+0x15c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a34      	ldr	r2, [pc, #208]	@ (8002420 <HAL_DMA_IRQHandler+0x1fc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d012      	beq.n	800237a <HAL_DMA_IRQHandler+0x156>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a32      	ldr	r2, [pc, #200]	@ (8002424 <HAL_DMA_IRQHandler+0x200>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00a      	beq.n	8002374 <HAL_DMA_IRQHandler+0x150>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a31      	ldr	r2, [pc, #196]	@ (8002428 <HAL_DMA_IRQHandler+0x204>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d102      	bne.n	800236e <HAL_DMA_IRQHandler+0x14a>
 8002368:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800236c:	e00e      	b.n	800238c <HAL_DMA_IRQHandler+0x168>
 800236e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002372:	e00b      	b.n	800238c <HAL_DMA_IRQHandler+0x168>
 8002374:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002378:	e008      	b.n	800238c <HAL_DMA_IRQHandler+0x168>
 800237a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800237e:	e005      	b.n	800238c <HAL_DMA_IRQHandler+0x168>
 8002380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002384:	e002      	b.n	800238c <HAL_DMA_IRQHandler+0x168>
 8002386:	2320      	movs	r3, #32
 8002388:	e000      	b.n	800238c <HAL_DMA_IRQHandler+0x168>
 800238a:	2302      	movs	r3, #2
 800238c:	4a27      	ldr	r2, [pc, #156]	@ (800242c <HAL_DMA_IRQHandler+0x208>)
 800238e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d034      	beq.n	800240a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023a8:	e02f      	b.n	800240a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2208      	movs	r2, #8
 80023b0:	409a      	lsls	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d028      	beq.n	800240c <HAL_DMA_IRQHandler+0x1e8>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 020e 	bic.w	r2, r2, #14
 80023d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f202 	lsl.w	r2, r1, r2
 80023e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
    }
  }
  return;
 800240a:	bf00      	nop
 800240c:	bf00      	nop
}
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40020008 	.word	0x40020008
 8002418:	4002001c 	.word	0x4002001c
 800241c:	40020030 	.word	0x40020030
 8002420:	40020044 	.word	0x40020044
 8002424:	40020058 	.word	0x40020058
 8002428:	4002006c 	.word	0x4002006c
 800242c:	40020000 	.word	0x40020000

08002430 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b10      	cmp	r3, #16
 800245c:	d108      	bne.n	8002470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800246e:	e007      	b.n	8002480 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
	...

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b08b      	sub	sp, #44	@ 0x2c
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	e169      	b.n	8002774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024a0:	2201      	movs	r2, #1
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f040 8158 	bne.w	800276e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a9a      	ldr	r2, [pc, #616]	@ (800272c <HAL_GPIO_Init+0x2a0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d05e      	beq.n	8002586 <HAL_GPIO_Init+0xfa>
 80024c8:	4a98      	ldr	r2, [pc, #608]	@ (800272c <HAL_GPIO_Init+0x2a0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d875      	bhi.n	80025ba <HAL_GPIO_Init+0x12e>
 80024ce:	4a98      	ldr	r2, [pc, #608]	@ (8002730 <HAL_GPIO_Init+0x2a4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d058      	beq.n	8002586 <HAL_GPIO_Init+0xfa>
 80024d4:	4a96      	ldr	r2, [pc, #600]	@ (8002730 <HAL_GPIO_Init+0x2a4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d86f      	bhi.n	80025ba <HAL_GPIO_Init+0x12e>
 80024da:	4a96      	ldr	r2, [pc, #600]	@ (8002734 <HAL_GPIO_Init+0x2a8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d052      	beq.n	8002586 <HAL_GPIO_Init+0xfa>
 80024e0:	4a94      	ldr	r2, [pc, #592]	@ (8002734 <HAL_GPIO_Init+0x2a8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d869      	bhi.n	80025ba <HAL_GPIO_Init+0x12e>
 80024e6:	4a94      	ldr	r2, [pc, #592]	@ (8002738 <HAL_GPIO_Init+0x2ac>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d04c      	beq.n	8002586 <HAL_GPIO_Init+0xfa>
 80024ec:	4a92      	ldr	r2, [pc, #584]	@ (8002738 <HAL_GPIO_Init+0x2ac>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d863      	bhi.n	80025ba <HAL_GPIO_Init+0x12e>
 80024f2:	4a92      	ldr	r2, [pc, #584]	@ (800273c <HAL_GPIO_Init+0x2b0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d046      	beq.n	8002586 <HAL_GPIO_Init+0xfa>
 80024f8:	4a90      	ldr	r2, [pc, #576]	@ (800273c <HAL_GPIO_Init+0x2b0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d85d      	bhi.n	80025ba <HAL_GPIO_Init+0x12e>
 80024fe:	2b12      	cmp	r3, #18
 8002500:	d82a      	bhi.n	8002558 <HAL_GPIO_Init+0xcc>
 8002502:	2b12      	cmp	r3, #18
 8002504:	d859      	bhi.n	80025ba <HAL_GPIO_Init+0x12e>
 8002506:	a201      	add	r2, pc, #4	@ (adr r2, 800250c <HAL_GPIO_Init+0x80>)
 8002508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250c:	08002587 	.word	0x08002587
 8002510:	08002561 	.word	0x08002561
 8002514:	08002573 	.word	0x08002573
 8002518:	080025b5 	.word	0x080025b5
 800251c:	080025bb 	.word	0x080025bb
 8002520:	080025bb 	.word	0x080025bb
 8002524:	080025bb 	.word	0x080025bb
 8002528:	080025bb 	.word	0x080025bb
 800252c:	080025bb 	.word	0x080025bb
 8002530:	080025bb 	.word	0x080025bb
 8002534:	080025bb 	.word	0x080025bb
 8002538:	080025bb 	.word	0x080025bb
 800253c:	080025bb 	.word	0x080025bb
 8002540:	080025bb 	.word	0x080025bb
 8002544:	080025bb 	.word	0x080025bb
 8002548:	080025bb 	.word	0x080025bb
 800254c:	080025bb 	.word	0x080025bb
 8002550:	08002569 	.word	0x08002569
 8002554:	0800257d 	.word	0x0800257d
 8002558:	4a79      	ldr	r2, [pc, #484]	@ (8002740 <HAL_GPIO_Init+0x2b4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800255e:	e02c      	b.n	80025ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	623b      	str	r3, [r7, #32]
          break;
 8002566:	e029      	b.n	80025bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	3304      	adds	r3, #4
 800256e:	623b      	str	r3, [r7, #32]
          break;
 8002570:	e024      	b.n	80025bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	3308      	adds	r3, #8
 8002578:	623b      	str	r3, [r7, #32]
          break;
 800257a:	e01f      	b.n	80025bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	330c      	adds	r3, #12
 8002582:	623b      	str	r3, [r7, #32]
          break;
 8002584:	e01a      	b.n	80025bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800258e:	2304      	movs	r3, #4
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e013      	b.n	80025bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800259c:	2308      	movs	r3, #8
 800259e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	611a      	str	r2, [r3, #16]
          break;
 80025a6:	e009      	b.n	80025bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a8:	2308      	movs	r3, #8
 80025aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	615a      	str	r2, [r3, #20]
          break;
 80025b2:	e003      	b.n	80025bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
          break;
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x130>
          break;
 80025ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2bff      	cmp	r3, #255	@ 0xff
 80025c0:	d801      	bhi.n	80025c6 <HAL_GPIO_Init+0x13a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	e001      	b.n	80025ca <HAL_GPIO_Init+0x13e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2bff      	cmp	r3, #255	@ 0xff
 80025d0:	d802      	bhi.n	80025d8 <HAL_GPIO_Init+0x14c>
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	e002      	b.n	80025de <HAL_GPIO_Init+0x152>
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	3b08      	subs	r3, #8
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	210f      	movs	r1, #15
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	401a      	ands	r2, r3
 80025f0:	6a39      	ldr	r1, [r7, #32]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	431a      	orrs	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80b1 	beq.w	800276e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800260c:	4b4d      	ldr	r3, [pc, #308]	@ (8002744 <HAL_GPIO_Init+0x2b8>)
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	4a4c      	ldr	r2, [pc, #304]	@ (8002744 <HAL_GPIO_Init+0x2b8>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6193      	str	r3, [r2, #24]
 8002618:	4b4a      	ldr	r3, [pc, #296]	@ (8002744 <HAL_GPIO_Init+0x2b8>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002624:	4a48      	ldr	r2, [pc, #288]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a40      	ldr	r2, [pc, #256]	@ (800274c <HAL_GPIO_Init+0x2c0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d013      	beq.n	8002678 <HAL_GPIO_Init+0x1ec>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3f      	ldr	r2, [pc, #252]	@ (8002750 <HAL_GPIO_Init+0x2c4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00d      	beq.n	8002674 <HAL_GPIO_Init+0x1e8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3e      	ldr	r2, [pc, #248]	@ (8002754 <HAL_GPIO_Init+0x2c8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <HAL_GPIO_Init+0x1e4>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3d      	ldr	r2, [pc, #244]	@ (8002758 <HAL_GPIO_Init+0x2cc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_GPIO_Init+0x1e0>
 8002668:	2303      	movs	r3, #3
 800266a:	e006      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 800266c:	2304      	movs	r3, #4
 800266e:	e004      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 8002670:	2302      	movs	r3, #2
 8002672:	e002      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_GPIO_Init+0x1ee>
 8002678:	2300      	movs	r3, #0
 800267a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267c:	f002 0203 	and.w	r2, r2, #3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4093      	lsls	r3, r2
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800268a:	492f      	ldr	r1, [pc, #188]	@ (8002748 <HAL_GPIO_Init+0x2bc>)
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	492c      	ldr	r1, [pc, #176]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026b2:	4b2a      	ldr	r3, [pc, #168]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4928      	ldr	r1, [pc, #160]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026bc:	4013      	ands	r3, r2
 80026be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026cc:	4b23      	ldr	r3, [pc, #140]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4922      	ldr	r1, [pc, #136]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60cb      	str	r3, [r1, #12]
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026da:	4b20      	ldr	r3, [pc, #128]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	491e      	ldr	r1, [pc, #120]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4918      	ldr	r1, [pc, #96]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002702:	4b16      	ldr	r3, [pc, #88]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	43db      	mvns	r3, r3
 800270a:	4914      	ldr	r1, [pc, #80]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 800270c:	4013      	ands	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d021      	beq.n	8002760 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800271c:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	490e      	ldr	r1, [pc, #56]	@ (800275c <HAL_GPIO_Init+0x2d0>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e021      	b.n	800276e <HAL_GPIO_Init+0x2e2>
 800272a:	bf00      	nop
 800272c:	10320000 	.word	0x10320000
 8002730:	10310000 	.word	0x10310000
 8002734:	10220000 	.word	0x10220000
 8002738:	10210000 	.word	0x10210000
 800273c:	10120000 	.word	0x10120000
 8002740:	10110000 	.word	0x10110000
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000
 800274c:	40010800 	.word	0x40010800
 8002750:	40010c00 	.word	0x40010c00
 8002754:	40011000 	.word	0x40011000
 8002758:	40011400 	.word	0x40011400
 800275c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_GPIO_Init+0x304>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	43db      	mvns	r3, r3
 8002768:	4909      	ldr	r1, [pc, #36]	@ (8002790 <HAL_GPIO_Init+0x304>)
 800276a:	4013      	ands	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	3301      	adds	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	f47f ae8e 	bne.w	80024a0 <HAL_GPIO_Init+0x14>
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	372c      	adds	r7, #44	@ 0x2c
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40010400 	.word	0x40010400

08002794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a4:	787b      	ldrb	r3, [r7, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027b0:	e003      	b.n	80027ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	041a      	lsls	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	611a      	str	r2, [r3, #16]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0e8      	b.n	80029a8 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f006 fed6 	bl	800959c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fde7 	bl	80053d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002812:	f002 fdbd 	bl	8005390 <USB_CoreInit>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0bf      	b.n	80029a8 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f002 fdeb 	bl	800540a <USB_SetCurrentMode>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0b0      	b.n	80029a8 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e03e      	b.n	80028ca <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	3311      	adds	r3, #17
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	3310      	adds	r3, #16
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	3313      	adds	r3, #19
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	3320      	adds	r3, #32
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	3324      	adds	r3, #36	@ 0x24
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3301      	adds	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	791b      	ldrb	r3, [r3, #4]
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3bb      	bcc.n	800284c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
 80028d8:	e044      	b.n	8002964 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3301      	adds	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	791b      	ldrb	r3, [r3, #4]
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3b5      	bcc.n	80028da <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002978:	f002 fd53 	bl	8005422 <USB_DevInit>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e00c      	b.n	80029a8 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 ffd2 	bl	800794a <USB_DevDisconnect>

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_PCD_Start+0x16>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e016      	b.n	80029f4 <HAL_PCD_Start+0x44>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fce9 	bl	80053aa <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029d8:	2101      	movs	r1, #1
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f007 f851 	bl	8009a82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 ffa6 	bl	8007936 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f004 ffa8 	bl	800795e <USB_ReadInterrupts>
 8002a0e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fb1a 	bl	8003054 <PCD_EP_ISR_Handler>

    return;
 8002a20:	e119      	b.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f006 fe24 	bl	8009692 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f905 	bl	8002c5c <HAL_PCD_SetAddress>

    return;
 8002a52:	e100      	b.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a70:	b292      	uxth	r2, r2
 8002a72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a76:	e0ee      	b.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a94:	b292      	uxth	r2, r2
 8002a96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a9a:	e0dc      	b.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d027      	beq.n	8002af6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0204 	bic.w	r2, r2, #4
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0208 	bic.w	r2, r2, #8
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f006 fe14 	bl	8009704 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002af4:	e0af      	b.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8083 	beq.w	8002c08 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	77fb      	strb	r3, [r7, #31]
 8002b06:	e010      	b.n	8002b2a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	3320      	adds	r3, #32
 8002b1e:	443b      	add	r3, r7
 8002b20:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002b24:	7ffb      	ldrb	r3, [r7, #31]
 8002b26:	3301      	adds	r3, #1
 8002b28:	77fb      	strb	r3, [r7, #31]
 8002b2a:	7ffb      	ldrb	r3, [r7, #31]
 8002b2c:	2b07      	cmp	r3, #7
 8002b2e:	d9eb      	bls.n	8002b08 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	b292      	uxth	r2, r2
 8002b44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b60:	bf00      	nop
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f6      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b86:	b292      	uxth	r2, r2
 8002b88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e00f      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	7ffa      	ldrb	r2, [r7, #31]
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	440a      	add	r2, r1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	3320      	adds	r3, #32
 8002ba4:	443b      	add	r3, r7
 8002ba6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002baa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
 8002bb4:	2b07      	cmp	r3, #7
 8002bb6:	d9ec      	bls.n	8002b92 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be2:	b292      	uxth	r2, r2
 8002be4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0204 	orr.w	r2, r2, #4
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f006 fd65 	bl	80096d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c06:	e026      	b.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00f      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c24:	b292      	uxth	r2, r2
 8002c26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f006 fd23 	bl	8009676 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c30:	e011      	b.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00c      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c54:	bf00      	nop
  }
}
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_PCD_SetAddress+0x1a>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e012      	b.n	8002c9c <HAL_PCD_SetAddress+0x40>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 fe3f 	bl	8007910 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	70fb      	strb	r3, [r7, #3]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	803b      	strh	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da0e      	bge.n	8002ce8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	f003 0207 	and.w	r2, r3, #7
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3310      	adds	r3, #16
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	705a      	strb	r2, [r3, #1]
 8002ce6:	e00e      	b.n	8002d06 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 0207 	and.w	r2, r3, #7
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d12:	883a      	ldrh	r2, [r7, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	78ba      	ldrb	r2, [r7, #2]
 8002d1c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d1e:	78bb      	ldrb	r3, [r7, #2]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d102      	bne.n	8002d2a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_PCD_EP_Open+0x94>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e00e      	b.n	8002d56 <HAL_PCD_EP_Open+0xb2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fb88 	bl	800545c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002d54:	7afb      	ldrb	r3, [r7, #11]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	da0e      	bge.n	8002d90 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 0207 	and.w	r2, r3, #7
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	3310      	adds	r3, #16
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	705a      	strb	r2, [r3, #1]
 8002d8e:	e00e      	b.n	8002dae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 0207 	and.w	r2, r3, #7
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_PCD_EP_Close+0x6a>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e00e      	b.n	8002de6 <HAL_PCD_EP_Close+0x88>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 ff00 	bl	8005bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	f003 0207 	and.w	r2, r3, #7
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6979      	ldr	r1, [r7, #20]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 f8b7 	bl	8005fb4 <USB_EPStartXfer>

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 0207 	and.w	r2, r3, #7
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	f003 0207 	and.w	r2, r3, #7
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eca:	7afb      	ldrb	r3, [r7, #11]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 f869 	bl	8005fb4 <USB_EPStartXfer>

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	7912      	ldrb	r2, [r2, #4]
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e04c      	b.n	8002fa4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da0e      	bge.n	8002f30 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 0207 	and.w	r2, r3, #7
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	3310      	adds	r3, #16
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	705a      	strb	r2, [r3, #1]
 8002f2e:	e00c      	b.n	8002f4a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_SetStall+0x7e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e01c      	b.n	8002fa4 <HAL_PCD_EP_SetStall+0xb8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f004 fbcc 	bl	8007716 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d108      	bne.n	8002f9a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f004 fcf1 	bl	800797c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	7912      	ldrb	r2, [r2, #4]
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e040      	b.n	800304c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da0e      	bge.n	8002ff0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 0207 	and.w	r2, r3, #7
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	3310      	adds	r3, #16
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	705a      	strb	r2, [r3, #1]
 8002fee:	e00e      	b.n	800300e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 0207 	and.w	r2, r3, #7
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_PCD_EP_ClrStall+0x82>
 800302a:	2302      	movs	r3, #2
 800302c:	e00e      	b.n	800304c <HAL_PCD_EP_ClrStall+0xa0>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68f9      	ldr	r1, [r7, #12]
 800303c:	4618      	mov	r0, r3
 800303e:	f004 fbba 	bl	80077b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b096      	sub	sp, #88	@ 0x58
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800305c:	e3bb      	b.n	80037d6 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003066:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800306a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003078:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 8175 	bne.w	800336c <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003082:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	d14e      	bne.n	800312c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800309a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800309e:	81fb      	strh	r3, [r7, #14]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	89fb      	ldrh	r3, [r7, #14]
 80030a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3310      	adds	r3, #16
 80030b6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	3302      	adds	r3, #2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	441a      	add	r2, r3
 80030ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030f2:	2100      	movs	r1, #0
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f006 faa4 	bl	8009642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7b5b      	ldrb	r3, [r3, #13]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8368 	beq.w	80037d6 <PCD_EP_ISR_Handler+0x782>
 8003106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 8363 	bne.w	80037d6 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7b5b      	ldrb	r3, [r3, #13]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800311a:	b2da      	uxtb	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	735a      	strb	r2, [r3, #13]
 800312a:	e354      	b.n	80037d6 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003132:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800313e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003146:	2b00      	cmp	r3, #0
 8003148:	d034      	beq.n	80031b4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	3306      	adds	r3, #6
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003174:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003182:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003186:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003188:	b29b      	uxth	r3, r3
 800318a:	f004 fc47 	bl	8007a1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29a      	uxth	r2, r3
 8003196:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800319a:	4013      	ands	r3, r2
 800319c:	823b      	strh	r3, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	8a3a      	ldrh	r2, [r7, #16]
 80031a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031a8:	b292      	uxth	r2, r2
 80031aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f006 fa1b 	bl	80095e8 <HAL_PCD_SetupStageCallback>
 80031b2:	e310      	b.n	80037d6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031b4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f280 830c 	bge.w	80037d6 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031ca:	4013      	ands	r3, r2
 80031cc:	83fb      	strh	r3, [r7, #30]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	8bfa      	ldrh	r2, [r7, #30]
 80031d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031d8:	b292      	uxth	r2, r2
 80031da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	3306      	adds	r3, #6
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d019      	beq.n	8003244 <PCD_EP_ISR_Handler+0x1f0>
 8003210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d015      	beq.n	8003244 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321e:	6959      	ldr	r1, [r3, #20]
 8003220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003222:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003226:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003228:	b29b      	uxth	r3, r3
 800322a:	f004 fbf7 	bl	8007a1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800322e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	441a      	add	r2, r3
 8003238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800323c:	2100      	movs	r1, #0
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f006 f9e4 	bl	800960c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800324e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 82bd 	bne.w	80037d6 <PCD_EP_ISR_Handler+0x782>
 800325c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003260:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003264:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003268:	f000 82b5 	beq.w	80037d6 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800327a:	b29b      	uxth	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4413      	add	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003296:	b29a      	uxth	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80032a2:	d91d      	bls.n	80032e0 <PCD_EP_ISR_Handler+0x28c>
 80032a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <PCD_EP_ISR_Handler+0x26a>
 80032b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ba:	3b01      	subs	r3, #1
 80032bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	029b      	lsls	r3, r3, #10
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d8:	b29a      	uxth	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	801a      	strh	r2, [r3, #0]
 80032de:	e026      	b.n	800332e <PCD_EP_ISR_Handler+0x2da>
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <PCD_EP_ISR_Handler+0x2aa>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	801a      	strh	r2, [r3, #0]
 80032fc:	e017      	b.n	800332e <PCD_EP_ISR_Handler+0x2da>
 80032fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
 8003306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <PCD_EP_ISR_Handler+0x2c4>
 8003312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003314:	3301      	adds	r3, #1
 8003316:	647b      	str	r3, [r7, #68]	@ 0x44
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29a      	uxth	r2, r3
 800331e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003320:	b29b      	uxth	r3, r3
 8003322:	029b      	lsls	r3, r3, #10
 8003324:	b29b      	uxth	r3, r3
 8003326:	4313      	orrs	r3, r2
 8003328:	b29a      	uxth	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800333a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333e:	827b      	strh	r3, [r7, #18]
 8003340:	8a7b      	ldrh	r3, [r7, #18]
 8003342:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003346:	827b      	strh	r3, [r7, #18]
 8003348:	8a7b      	ldrh	r3, [r7, #18]
 800334a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800334e:	827b      	strh	r3, [r7, #18]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	8a7b      	ldrh	r3, [r7, #18]
 8003356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800335a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800335e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]
 800336a:	e234      	b.n	80037d6 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003380:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003384:	2b00      	cmp	r3, #0
 8003386:	f280 80fc 	bge.w	8003582 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29a      	uxth	r2, r3
 800339c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033a0:	4013      	ands	r3, r2
 80033a2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033bc:	b292      	uxth	r2, r2
 80033be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033c0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d8:	7b1b      	ldrb	r3, [r3, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d125      	bne.n	800342a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	3306      	adds	r3, #6
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003406:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800340a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8092 	beq.w	8003538 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341a:	6959      	ldr	r1, [r3, #20]
 800341c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341e:	88da      	ldrh	r2, [r3, #6]
 8003420:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003424:	f004 fafa 	bl	8007a1c <USB_ReadPMA>
 8003428:	e086      	b.n	8003538 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342c:	78db      	ldrb	r3, [r3, #3]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d10a      	bne.n	8003448 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003432:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003436:	461a      	mov	r2, r3
 8003438:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9d9 	bl	80037f2 <HAL_PCD_EP_DB_Receive>
 8003440:	4603      	mov	r3, r0
 8003442:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003446:	e077      	b.n	8003538 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800345e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003462:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	441a      	add	r2, r3
 8003474:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800347c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003484:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003488:	b29b      	uxth	r3, r3
 800348a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d024      	beq.n	80034f0 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	3302      	adds	r3, #2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80034d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02e      	beq.n	8003538 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	6959      	ldr	r1, [r3, #20]
 80034e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e4:	891a      	ldrh	r2, [r3, #8]
 80034e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034ea:	f004 fa97 	bl	8007a1c <USB_ReadPMA>
 80034ee:	e023      	b.n	8003538 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	3306      	adds	r3, #6
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003518:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800351c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352a:	6959      	ldr	r1, [r3, #20]
 800352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352e:	895a      	ldrh	r2, [r3, #10]
 8003530:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003534:	f004 fa72 	bl	8007a1c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003540:	441a      	add	r2, r3
 8003542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003544:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800354e:	441a      	add	r2, r3
 8003550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003552:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <PCD_EP_ISR_Handler+0x514>
 800355c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	429a      	cmp	r2, r3
 8003566:	d206      	bcs.n	8003576 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f006 f84c 	bl	800960c <HAL_PCD_DataOutStageCallback>
 8003574:	e005      	b.n	8003582 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800357c:	4618      	mov	r0, r3
 800357e:	f002 fd19 	bl	8005fb4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003582:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8123 	beq.w	80037d6 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003590:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	3310      	adds	r3, #16
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	441a      	add	r2, r3
 80035d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80035d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035dc:	b29b      	uxth	r3, r3
 80035de:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e2:	78db      	ldrb	r3, [r3, #3]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	f040 80a2 	bne.w	800372e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80035ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f2:	7b1b      	ldrb	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8093 	beq.w	8003720 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d046      	beq.n	8003694 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d126      	bne.n	800365c <PCD_EP_ISR_Handler+0x608>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800361c:	b29b      	uxth	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	4413      	add	r3, r2
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
 8003626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	011a      	lsls	r2, r3, #4
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	4413      	add	r3, r2
 8003630:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003634:	623b      	str	r3, [r7, #32]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003640:	b29a      	uxth	r2, r3
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003654:	b29a      	uxth	r2, r3
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	e061      	b.n	8003720 <PCD_EP_ISR_Handler+0x6cc>
 800365c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d15d      	bne.n	8003720 <PCD_EP_ISR_Handler+0x6cc>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003672:	b29b      	uxth	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003678:	4413      	add	r3, r2
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	011a      	lsls	r2, r3, #4
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	4413      	add	r3, r2
 8003686:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	2200      	movs	r2, #0
 8003690:	801a      	strh	r2, [r3, #0]
 8003692:	e045      	b.n	8003720 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800369a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d126      	bne.n	80036f0 <PCD_EP_ISR_Handler+0x69c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b6:	4413      	add	r3, r2
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	011a      	lsls	r2, r3, #4
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	4413      	add	r3, r2
 80036c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	e017      	b.n	8003720 <PCD_EP_ISR_Handler+0x6cc>
 80036f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d113      	bne.n	8003720 <PCD_EP_ISR_Handler+0x6cc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003706:	4413      	add	r3, r2
 8003708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	011a      	lsls	r2, r3, #4
 8003710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003712:	4413      	add	r3, r2
 8003714:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800371c:	2200      	movs	r2, #0
 800371e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f005 ff8b 	bl	8009642 <HAL_PCD_DataInStageCallback>
 800372c:	e053      	b.n	80037d6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800372e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d146      	bne.n	80037c8 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003742:	b29b      	uxth	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	3302      	adds	r3, #2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003762:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800376e:	429a      	cmp	r2, r3
 8003770:	d907      	bls.n	8003782 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377e:	619a      	str	r2, [r3, #24]
 8003780:	e002      	b.n	8003788 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	2200      	movs	r2, #0
 8003786:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 ff53 	bl	8009642 <HAL_PCD_DataInStageCallback>
 800379c:	e01b      	b.n	80037d6 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800379e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037a6:	441a      	add	r2, r3
 80037a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037aa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80037ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037b4:	441a      	add	r2, r3
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037c0:	4618      	mov	r0, r3
 80037c2:	f002 fbf7 	bl	8005fb4 <USB_EPStartXfer>
 80037c6:	e006      	b.n	80037d6 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037cc:	461a      	mov	r2, r3
 80037ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f91b 	bl	8003a0c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037de:	b29b      	uxth	r3, r3
 80037e0:	b21b      	sxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f6ff ac3b 	blt.w	800305e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3758      	adds	r7, #88	@ 0x58
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4613      	mov	r3, r2
 80037fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d07e      	beq.n	8003908 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	3302      	adds	r3, #2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003832:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	8b7b      	ldrh	r3, [r7, #26]
 800383a:	429a      	cmp	r2, r3
 800383c:	d306      	bcc.n	800384c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	8b7b      	ldrh	r3, [r7, #26]
 8003844:	1ad2      	subs	r2, r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	619a      	str	r2, [r3, #24]
 800384a:	e002      	b.n	8003852 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2200      	movs	r2, #0
 8003850:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d123      	bne.n	80038a2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003874:	833b      	strh	r3, [r7, #24]
 8003876:	8b3b      	ldrh	r3, [r7, #24]
 8003878:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800387c:	833b      	strh	r3, [r7, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	441a      	add	r2, r3
 800388c:	8b3b      	ldrh	r3, [r7, #24]
 800388e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800389a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389e:	b29b      	uxth	r3, r3
 80038a0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01f      	beq.n	80038ec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c6:	82fb      	strh	r3, [r7, #22]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	441a      	add	r2, r3
 80038d6:	8afb      	ldrh	r3, [r7, #22]
 80038d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ec:	8b7b      	ldrh	r3, [r7, #26]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8087 	beq.w	8003a02 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6959      	ldr	r1, [r3, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	891a      	ldrh	r2, [r3, #8]
 8003900:	8b7b      	ldrh	r3, [r7, #26]
 8003902:	f004 f88b 	bl	8007a1c <USB_ReadPMA>
 8003906:	e07c      	b.n	8003a02 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003910:	b29b      	uxth	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	3306      	adds	r3, #6
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003930:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	8b7b      	ldrh	r3, [r7, #26]
 8003938:	429a      	cmp	r2, r3
 800393a:	d306      	bcc.n	800394a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	699a      	ldr	r2, [r3, #24]
 8003940:	8b7b      	ldrh	r3, [r7, #26]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	619a      	str	r2, [r3, #24]
 8003948:	e002      	b.n	8003950 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d123      	bne.n	80039a0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	83fb      	strh	r3, [r7, #30]
 8003974:	8bfb      	ldrh	r3, [r7, #30]
 8003976:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800397a:	83fb      	strh	r3, [r7, #30]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	8bfb      	ldrh	r3, [r7, #30]
 800398c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800399c:	b29b      	uxth	r3, r3
 800399e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039a0:	88fb      	ldrh	r3, [r7, #6]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11f      	bne.n	80039ea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	83bb      	strh	r3, [r7, #28]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	8bbb      	ldrh	r3, [r7, #28]
 80039d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039ea:	8b7b      	ldrh	r3, [r7, #26]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6959      	ldr	r1, [r3, #20]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	895a      	ldrh	r2, [r3, #10]
 80039fc:	8b7b      	ldrh	r3, [r7, #26]
 80039fe:	f004 f80d 	bl	8007a1c <USB_ReadPMA>
    }
  }

  return count;
 8003a02:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b0a4      	sub	sp, #144	@ 0x90
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 81dd 	beq.w	8003de0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a4e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d907      	bls.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a66:	1ad2      	subs	r2, r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	619a      	str	r2, [r3, #24]
 8003a6c:	e002      	b.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f040 80b9 	bne.w	8003bf0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d126      	bne.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	4413      	add	r3, r2
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	011a      	lsls	r2, r3, #4
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	e01a      	b.n	8003b0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d116      	bne.n	8003b0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af0:	4413      	add	r3, r2
 8003af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	011a      	lsls	r2, r3, #4
 8003afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afc:	4413      	add	r3, r2
 8003afe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	2200      	movs	r2, #0
 8003b08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d126      	bne.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	011a      	lsls	r2, r3, #4
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	e017      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d113      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	4413      	add	r3, r2
 8003b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	011a      	lsls	r2, r3, #4
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	4413      	add	r3, r2
 8003b8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b8e:	623b      	str	r3, [r7, #32]
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	2200      	movs	r2, #0
 8003b94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f005 fd50 	bl	8009642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 82fc 	beq.w	80041a6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc8:	82fb      	strh	r3, [r7, #22]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	8afb      	ldrh	r3, [r7, #22]
 8003bda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003be2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
 8003bee:	e2da      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d021      	beq.n	8003c3e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c14:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f040 82ae 	bne.w	80041a6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c52:	441a      	add	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c60:	441a      	add	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d30b      	bcc.n	8003c8a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c82:	1ad2      	subs	r2, r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	621a      	str	r2, [r3, #32]
 8003c88:	e017      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d108      	bne.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003c92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ca2:	e00a      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d165      	bne.n	8003d8e <HAL_PCD_EP_DB_Transmit+0x382>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd6:	4413      	add	r3, r2
 8003cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	011a      	lsls	r2, r3, #4
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf8:	801a      	strh	r2, [r3, #0]
 8003cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d00:	d91d      	bls.n	8003d3e <HAL_PCD_EP_DB_Transmit+0x332>
 8003d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d0e:	f003 031f 	and.w	r3, r3, #31
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_PCD_EP_DB_Transmit+0x310>
 8003d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	029b      	lsls	r3, r3, #10
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3a:	801a      	strh	r2, [r3, #0]
 8003d3c:	e044      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x350>
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	e035      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d72:	3301      	adds	r3, #1
 8003d74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	029b      	lsls	r3, r3, #10
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	e01c      	b.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d118      	bne.n	8003dc8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003daa:	4413      	add	r3, r2
 8003dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	011a      	lsls	r2, r3, #4
 8003db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db6:	4413      	add	r3, r2
 8003db8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6959      	ldr	r1, [r3, #20]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	891a      	ldrh	r2, [r3, #8]
 8003dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f003 fdda 	bl	8007992 <USB_WritePMA>
 8003dde:	e1e2      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	3306      	adds	r3, #6
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e08:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d307      	bcc.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e20:	1ad2      	subs	r2, r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	619a      	str	r2, [r3, #24]
 8003e26:	e002      	b.n	8003e2e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 80c0 	bne.w	8003fb8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d126      	bne.n	8003e8e <HAL_PCD_EP_DB_Transmit+0x482>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e54:	4413      	add	r3, r2
 8003e56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	011a      	lsls	r2, r3, #4
 8003e5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e60:	4413      	add	r3, r2
 8003e62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	e01a      	b.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d116      	bne.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eaa:	4413      	add	r3, r2
 8003eac:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	011a      	lsls	r2, r3, #4
 8003eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d12b      	bne.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x51e>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee6:	4413      	add	r3, r2
 8003ee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	011a      	lsls	r2, r3, #4
 8003ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	e017      	b.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d113      	bne.n	8003f5a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f40:	4413      	add	r3, r2
 8003f42:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	011a      	lsls	r2, r3, #4
 8003f4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f52:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f56:	2200      	movs	r2, #0
 8003f58:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f005 fb6e 	bl	8009642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f040 811a 	bne.w	80041a6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003faa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]
 8003fb6:	e0f6      	b.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d121      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 80ca 	bne.w	80041a6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800401a:	441a      	add	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004028:	441a      	add	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6a1a      	ldr	r2, [r3, #32]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	429a      	cmp	r2, r3
 8004038:	d30b      	bcc.n	8004052 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6a1a      	ldr	r2, [r3, #32]
 8004046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	621a      	str	r2, [r3, #32]
 8004050:	e017      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800405a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800405e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800406a:	e00a      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2200      	movs	r2, #0
 8004078:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	657b      	str	r3, [r7, #84]	@ 0x54
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d165      	bne.n	800415c <HAL_PCD_EP_DB_Transmit+0x750>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a4:	4413      	add	r3, r2
 80040a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	011a      	lsls	r2, r3, #4
 80040ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040b0:	4413      	add	r3, r2
 80040b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80040ce:	d91d      	bls.n	800410c <HAL_PCD_EP_DB_Transmit+0x700>
 80040d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <HAL_PCD_EP_DB_Transmit+0x6de>
 80040e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040e6:	3b01      	subs	r3, #1
 80040e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	029b      	lsls	r3, r3, #10
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	4313      	orrs	r3, r2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004104:	b29a      	uxth	r2, r3
 8004106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	e041      	b.n	8004190 <HAL_PCD_EP_DB_Transmit+0x784>
 800410c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <HAL_PCD_EP_DB_Transmit+0x71e>
 8004114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004122:	b29a      	uxth	r2, r3
 8004124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004126:	801a      	strh	r2, [r3, #0]
 8004128:	e032      	b.n	8004190 <HAL_PCD_EP_DB_Transmit+0x784>
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_PCD_EP_DB_Transmit+0x738>
 800413e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004140:	3301      	adds	r3, #1
 8004142:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800414c:	b29b      	uxth	r3, r3
 800414e:	029b      	lsls	r3, r3, #10
 8004150:	b29b      	uxth	r3, r3
 8004152:	4313      	orrs	r3, r2
 8004154:	b29a      	uxth	r2, r3
 8004156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e019      	b.n	8004190 <HAL_PCD_EP_DB_Transmit+0x784>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d115      	bne.n	8004190 <HAL_PCD_EP_DB_Transmit+0x784>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004172:	4413      	add	r3, r2
 8004174:	657b      	str	r3, [r7, #84]	@ 0x54
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	011a      	lsls	r2, r3, #4
 800417c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417e:	4413      	add	r3, r2
 8004180:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004184:	653b      	str	r3, [r7, #80]	@ 0x50
 8004186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800418a:	b29a      	uxth	r2, r3
 800418c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800418e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6959      	ldr	r1, [r3, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	895a      	ldrh	r2, [r3, #10]
 800419c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f003 fbf6 	bl	8007992 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c0:	82bb      	strh	r3, [r7, #20]
 80041c2:	8abb      	ldrh	r3, [r7, #20]
 80041c4:	f083 0310 	eor.w	r3, r3, #16
 80041c8:	82bb      	strh	r3, [r7, #20]
 80041ca:	8abb      	ldrh	r3, [r7, #20]
 80041cc:	f083 0320 	eor.w	r3, r3, #32
 80041d0:	82bb      	strh	r3, [r7, #20]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	8abb      	ldrh	r3, [r7, #20]
 80041e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3790      	adds	r7, #144	@ 0x90
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	4613      	mov	r3, r2
 8004210:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004212:	897b      	ldrh	r3, [r7, #10]
 8004214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421e:	897b      	ldrh	r3, [r7, #10]
 8004220:	f003 0207 	and.w	r2, r3, #7
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	3310      	adds	r3, #16
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e009      	b.n	800424a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004236:	897a      	ldrh	r2, [r7, #10]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800424a:	893b      	ldrh	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	b29a      	uxth	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	80da      	strh	r2, [r3, #6]
 800425e:	e00b      	b.n	8004278 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2201      	movs	r2, #1
 8004264:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	b29a      	uxth	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b29a      	uxth	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e272      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8087 	beq.w	80043b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a4:	4b92      	ldr	r3, [pc, #584]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d00c      	beq.n	80042ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042b0:	4b8f      	ldr	r3, [pc, #572]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d112      	bne.n	80042e2 <HAL_RCC_OscConfig+0x5e>
 80042bc:	4b8c      	ldr	r3, [pc, #560]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ca:	4b89      	ldr	r3, [pc, #548]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d06c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x12c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d168      	bne.n	80043b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e24c      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x76>
 80042ec:	4b80      	ldr	r3, [pc, #512]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a7f      	ldr	r2, [pc, #508]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e02e      	b.n	8004358 <HAL_RCC_OscConfig+0xd4>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x98>
 8004302:	4b7b      	ldr	r3, [pc, #492]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7a      	ldr	r2, [pc, #488]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b78      	ldr	r3, [pc, #480]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a77      	ldr	r2, [pc, #476]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xd4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0xbc>
 8004326:	4b72      	ldr	r3, [pc, #456]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a71      	ldr	r2, [pc, #452]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b6f      	ldr	r3, [pc, #444]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6e      	ldr	r2, [pc, #440]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xd4>
 8004340:	4b6b      	ldr	r3, [pc, #428]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6a      	ldr	r2, [pc, #424]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b68      	ldr	r3, [pc, #416]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a67      	ldr	r2, [pc, #412]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fd f9c2 	bl	80016e8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fd f9be 	bl	80016e8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	@ 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e200      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b5d      	ldr	r3, [pc, #372]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xe4>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fd f9ae 	bl	80016e8 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fd f9aa 	bl	80016e8 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	@ 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1ec      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b53      	ldr	r3, [pc, #332]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x10c>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043be:	4b4c      	ldr	r3, [pc, #304]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ca:	4b49      	ldr	r3, [pc, #292]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x18c>
 80043d6:	4b46      	ldr	r3, [pc, #280]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b43      	ldr	r3, [pc, #268]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x176>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c0      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b3d      	ldr	r3, [pc, #244]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4939      	ldr	r1, [pc, #228]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b36      	ldr	r3, [pc, #216]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fd f963 	bl	80016e8 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004426:	f7fd f95f 	bl	80016e8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a1      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b2d      	ldr	r3, [pc, #180]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b2a      	ldr	r3, [pc, #168]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4927      	ldr	r1, [pc, #156]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b26      	ldr	r3, [pc, #152]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd f942 	bl	80016e8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd f93e 	bl	80016e8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e180      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03a      	beq.n	8004508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d019      	beq.n	80044ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b17      	ldr	r3, [pc, #92]	@ (80044f8 <HAL_RCC_OscConfig+0x274>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a0:	f7fd f922 	bl	80016e8 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fd f91e 	bl	80016e8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e160      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044c6:	2001      	movs	r0, #1
 80044c8:	f000 fa9c 	bl	8004a04 <RCC_Delay>
 80044cc:	e01c      	b.n	8004508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <HAL_RCC_OscConfig+0x274>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d4:	f7fd f908 	bl	80016e8 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044da:	e00f      	b.n	80044fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fd f904 	bl	80016e8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d908      	bls.n	80044fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e146      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	42420000 	.word	0x42420000
 80044f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fc:	4b92      	ldr	r3, [pc, #584]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e9      	bne.n	80044dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80a6 	beq.w	8004662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451a:	4b8b      	ldr	r3, [pc, #556]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10d      	bne.n	8004542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	4b88      	ldr	r3, [pc, #544]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	4a87      	ldr	r2, [pc, #540]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004530:	61d3      	str	r3, [r2, #28]
 8004532:	4b85      	ldr	r3, [pc, #532]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b82      	ldr	r3, [pc, #520]	@ (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d118      	bne.n	8004580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454e:	4b7f      	ldr	r3, [pc, #508]	@ (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7e      	ldr	r2, [pc, #504]	@ (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455a:	f7fd f8c5 	bl	80016e8 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004562:	f7fd f8c1 	bl	80016e8 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	@ 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e103      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	4b75      	ldr	r3, [pc, #468]	@ (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d106      	bne.n	8004596 <HAL_RCC_OscConfig+0x312>
 8004588:	4b6f      	ldr	r3, [pc, #444]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4a6e      	ldr	r2, [pc, #440]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	e02d      	b.n	80045f2 <HAL_RCC_OscConfig+0x36e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x334>
 800459e:	4b6a      	ldr	r3, [pc, #424]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a69      	ldr	r2, [pc, #420]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6213      	str	r3, [r2, #32]
 80045aa:	4b67      	ldr	r3, [pc, #412]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4a66      	ldr	r2, [pc, #408]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	f023 0304 	bic.w	r3, r3, #4
 80045b4:	6213      	str	r3, [r2, #32]
 80045b6:	e01c      	b.n	80045f2 <HAL_RCC_OscConfig+0x36e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d10c      	bne.n	80045da <HAL_RCC_OscConfig+0x356>
 80045c0:	4b61      	ldr	r3, [pc, #388]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a60      	ldr	r2, [pc, #384]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	6213      	str	r3, [r2, #32]
 80045d8:	e00b      	b.n	80045f2 <HAL_RCC_OscConfig+0x36e>
 80045da:	4b5b      	ldr	r3, [pc, #364]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a5a      	ldr	r2, [pc, #360]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6213      	str	r3, [r2, #32]
 80045e6:	4b58      	ldr	r3, [pc, #352]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a57      	ldr	r2, [pc, #348]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d015      	beq.n	8004626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fa:	f7fd f875 	bl	80016e8 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	e00a      	b.n	8004618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fd f871 	bl	80016e8 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e0b1      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	4b4b      	ldr	r3, [pc, #300]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ee      	beq.n	8004602 <HAL_RCC_OscConfig+0x37e>
 8004624:	e014      	b.n	8004650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004626:	f7fd f85f 	bl	80016e8 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fd f85b 	bl	80016e8 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e09b      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004644:	4b40      	ldr	r3, [pc, #256]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ee      	bne.n	800462e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004656:	4b3c      	ldr	r3, [pc, #240]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4a3b      	ldr	r2, [pc, #236]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8087 	beq.w	800477a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466c:	4b36      	ldr	r3, [pc, #216]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b08      	cmp	r3, #8
 8004676:	d061      	beq.n	800473c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d146      	bne.n	800470e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004680:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <HAL_RCC_OscConfig+0x4cc>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fd f82f 	bl	80016e8 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468e:	f7fd f82b 	bl	80016e8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e06d      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a0:	4b29      	ldr	r3, [pc, #164]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b4:	d108      	bne.n	80046c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046b6:	4b24      	ldr	r3, [pc, #144]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4921      	ldr	r1, [pc, #132]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a19      	ldr	r1, [r3, #32]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d8:	430b      	orrs	r3, r1
 80046da:	491b      	ldr	r1, [pc, #108]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <HAL_RCC_OscConfig+0x4cc>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fc ffff 	bl	80016e8 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fc fffb 	bl	80016e8 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e03d      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004700:	4b11      	ldr	r3, [pc, #68]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x46a>
 800470c:	e035      	b.n	800477a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <HAL_RCC_OscConfig+0x4cc>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fc ffe8 	bl	80016e8 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471c:	f7fc ffe4 	bl	80016e8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e026      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472e:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x498>
 800473a:	e01e      	b.n	800477a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d107      	bne.n	8004754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e019      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
 8004748:	40021000 	.word	0x40021000
 800474c:	40007000 	.word	0x40007000
 8004750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <HAL_RCC_OscConfig+0x500>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d001      	beq.n	800477a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000

08004788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0d0      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b6a      	ldr	r3, [pc, #424]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d910      	bls.n	80047cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b67      	ldr	r3, [pc, #412]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4965      	ldr	r1, [pc, #404]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b63      	ldr	r3, [pc, #396]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0b8      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d020      	beq.n	800481a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e4:	4b59      	ldr	r3, [pc, #356]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a58      	ldr	r2, [pc, #352]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047fc:	4b53      	ldr	r3, [pc, #332]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a52      	ldr	r2, [pc, #328]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b50      	ldr	r3, [pc, #320]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	494d      	ldr	r1, [pc, #308]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d040      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	4b47      	ldr	r3, [pc, #284]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d115      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e07f      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	4b41      	ldr	r3, [pc, #260]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e073      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4b3d      	ldr	r3, [pc, #244]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06b      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b39      	ldr	r3, [pc, #228]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4936      	ldr	r1, [pc, #216]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004878:	f7fc ff36 	bl	80016e8 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fc ff32 	bl	80016e8 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e053      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b2d      	ldr	r3, [pc, #180]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a8:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d210      	bcs.n	80048d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	4922      	ldr	r1, [pc, #136]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e032      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4916      	ldr	r1, [pc, #88]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	490e      	ldr	r1, [pc, #56]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004916:	f000 f821 	bl	800495c <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	490a      	ldr	r1, [pc, #40]	@ (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <HAL_RCC_ClockConfig+0x1cc>)
 8004930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <HAL_RCC_ClockConfig+0x1d0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc fe94 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40022000 	.word	0x40022000
 800494c:	40021000 	.word	0x40021000
 8004950:	0800ab90 	.word	0x0800ab90
 8004954:	20000004 	.word	0x20000004
 8004958:	20000008 	.word	0x20000008

0800495c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	2300      	movs	r3, #0
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004976:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b04      	cmp	r3, #4
 8004984:	d002      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x30>
 8004986:	2b08      	cmp	r3, #8
 8004988:	d003      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x36>
 800498a:	e027      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800498c:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800498e:	613b      	str	r3, [r7, #16]
      break;
 8004990:	e027      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	0c9b      	lsrs	r3, r3, #18
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800499c:	5cd3      	ldrb	r3, [r2, r3]
 800499e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d010      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049aa:	4b11      	ldr	r3, [pc, #68]	@ (80049f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	0c5b      	lsrs	r3, r3, #17
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a0d      	ldr	r2, [pc, #52]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80049be:	fb03 f202 	mul.w	r2, r3, r2
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	e004      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049d0:	fb02 f303 	mul.w	r3, r2, r3
 80049d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	613b      	str	r3, [r7, #16]
      break;
 80049da:	e002      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80049de:	613b      	str	r3, [r7, #16]
      break;
 80049e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e2:	693b      	ldr	r3, [r7, #16]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	007a1200 	.word	0x007a1200
 80049f8:	0800aba0 	.word	0x0800aba0
 80049fc:	0800abb0 	.word	0x0800abb0
 8004a00:	003d0900 	.word	0x003d0900

08004a04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <RCC_Delay+0x34>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <RCC_Delay+0x38>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0a5b      	lsrs	r3, r3, #9
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a20:	bf00      	nop
  }
  while (Delay --);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1e5a      	subs	r2, r3, #1
 8004a26:	60fa      	str	r2, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f9      	bne.n	8004a20 <RCC_Delay+0x1c>
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr
 8004a38:	20000004 	.word	0x20000004
 8004a3c:	10624dd3 	.word	0x10624dd3

08004a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d07d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a60:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	4a4b      	ldr	r2, [pc, #300]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a76:	61d3      	str	r3, [r2, #28]
 8004a78:	4b49      	ldr	r3, [pc, #292]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	4b46      	ldr	r3, [pc, #280]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d118      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a94:	4b43      	ldr	r3, [pc, #268]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a42      	ldr	r2, [pc, #264]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa0:	f7fc fe22 	bl	80016e8 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	e008      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa8:	f7fc fe1e 	bl	80016e8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	@ 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e06d      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aba:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ac6:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ace:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d02e      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d027      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aee:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004af4:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004afa:	4a29      	ldr	r2, [pc, #164]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d014      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7fc fded 	bl	80016e8 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b12:	f7fc fde9 	bl	80016e8 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e036      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ee      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b34:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4917      	ldr	r1, [pc, #92]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d105      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4c:	4b14      	ldr	r3, [pc, #80]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	4a13      	ldr	r2, [pc, #76]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b64:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	490b      	ldr	r1, [pc, #44]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b82:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4904      	ldr	r1, [pc, #16]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	40007000 	.word	0x40007000
 8004ba8:	42420440 	.word	0x42420440

08004bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e041      	b.n	8004c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fc80 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 fa5c 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d001      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e03a      	b.n	8004cda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <HAL_TIM_Base_Start_IT+0x98>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x58>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8e:	d009      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x58>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a14      	ldr	r2, [pc, #80]	@ (8004ce8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x58>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a13      	ldr	r2, [pc, #76]	@ (8004cec <HAL_TIM_Base_Start_IT+0xa0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d111      	bne.n	8004cc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d010      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc6:	e007      	b.n	8004cd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800

08004cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d020      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0202 	mvn.w	r2, #2
 8004d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f998 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f98b 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f99a 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d020      	beq.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01b      	beq.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0204 	mvn.w	r2, #4
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f972 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f965 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f974 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d020      	beq.n	8004dec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01b      	beq.n	8004dec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0208 	mvn.w	r2, #8
 8004dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f94c 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f93f 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f94e 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d020      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01b      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0210 	mvn.w	r2, #16
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f926 	bl	8005070 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f919 	bl	800505e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f928 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0201 	mvn.w	r2, #1
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fc f81a 	bl	8000e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa7f 	bl	800537e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8f8 	bl	8005094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0220 	mvn.w	r2, #32
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa52 	bl	800536c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIM_ConfigClockSource+0x1c>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0b4      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x186>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f24:	d03e      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0xd4>
 8004f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f2a:	f200 8087 	bhi.w	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f32:	f000 8086 	beq.w	8005042 <HAL_TIM_ConfigClockSource+0x172>
 8004f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3a:	d87f      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b70      	cmp	r3, #112	@ 0x70
 8004f3e:	d01a      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0xa6>
 8004f40:	2b70      	cmp	r3, #112	@ 0x70
 8004f42:	d87b      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b60      	cmp	r3, #96	@ 0x60
 8004f46:	d050      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x11a>
 8004f48:	2b60      	cmp	r3, #96	@ 0x60
 8004f4a:	d877      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b50      	cmp	r3, #80	@ 0x50
 8004f4e:	d03c      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0xfa>
 8004f50:	2b50      	cmp	r3, #80	@ 0x50
 8004f52:	d873      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d058      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x13a>
 8004f58:	2b40      	cmp	r3, #64	@ 0x40
 8004f5a:	d86f      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b30      	cmp	r3, #48	@ 0x30
 8004f5e:	d064      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f60:	2b30      	cmp	r3, #48	@ 0x30
 8004f62:	d86b      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d060      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d867      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d05c      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f70:	2b10      	cmp	r3, #16
 8004f72:	d05a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f74:	e062      	b.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f86:	f000 f974 	bl	8005272 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	609a      	str	r2, [r3, #8]
      break;
 8004fa2:	e04f      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fb4:	f000 f95d 	bl	8005272 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc6:	609a      	str	r2, [r3, #8]
      break;
 8004fc8:	e03c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f000 f8d4 	bl	8005184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2150      	movs	r1, #80	@ 0x50
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 f92b 	bl	800523e <TIM_ITRx_SetConfig>
      break;
 8004fe8:	e02c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 f8f2 	bl	80051e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2160      	movs	r1, #96	@ 0x60
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f91b 	bl	800523e <TIM_ITRx_SetConfig>
      break;
 8005008:	e01c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	461a      	mov	r2, r3
 8005018:	f000 f8b4 	bl	8005184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2140      	movs	r1, #64	@ 0x40
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f90b 	bl	800523e <TIM_ITRx_SetConfig>
      break;
 8005028:	e00c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f000 f902 	bl	800523e <TIM_ITRx_SetConfig>
      break;
 800503a:	e003      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      break;
 8005040:	e000      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
	...

080050a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005178 <TIM_Base_SetConfig+0xd0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0x30>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0x30>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2c      	ldr	r2, [pc, #176]	@ (800517c <TIM_Base_SetConfig+0xd4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0x30>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005180 <TIM_Base_SetConfig+0xd8>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d108      	bne.n	80050ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a22      	ldr	r2, [pc, #136]	@ (8005178 <TIM_Base_SetConfig+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x62>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x62>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <TIM_Base_SetConfig+0xd4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x62>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <TIM_Base_SetConfig+0xd8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0d      	ldr	r2, [pc, #52]	@ (8005178 <TIM_Base_SetConfig+0xd0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]
  }
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800

08005184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0201 	bic.w	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 030a 	bic.w	r3, r3, #10
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f023 0210 	bic.w	r2, r3, #16
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800520a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	031b      	lsls	r3, r3, #12
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800521c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr

0800523e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800523e:	b480      	push	{r7}
 8005240:	b085      	sub	sp, #20
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	f043 0307 	orr.w	r3, r3, #7
 8005260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005272:	b480      	push	{r7}
 8005274:	b087      	sub	sp, #28
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800528c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	021a      	lsls	r2, r3, #8
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	431a      	orrs	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4313      	orrs	r3, r2
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	609a      	str	r2, [r3, #8]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e046      	b.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a16      	ldr	r2, [pc, #88]	@ (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00e      	beq.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005314:	d009      	beq.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a12      	ldr	r2, [pc, #72]	@ (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a10      	ldr	r2, [pc, #64]	@ (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d10c      	bne.n	8005344 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	4313      	orrs	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800

0800536c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	4638      	mov	r0, r7
 800539a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053de:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4013      	ands	r3, r2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	4638      	mov	r0, r7
 800542c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800545c:	b480      	push	{r7}
 800545e:	b09d      	sub	sp, #116	@ 0x74
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800547e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005482:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	78db      	ldrb	r3, [r3, #3]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d81f      	bhi.n	80054ce <USB_ActivateEndpoint+0x72>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <USB_ActivateEndpoint+0x38>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054c1 	.word	0x080054c1
 800549c:	080054d7 	.word	0x080054d7
 80054a0:	080054b3 	.word	0x080054b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054b0:	e012      	b.n	80054d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054b6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80054ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054be:	e00b      	b.n	80054d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054cc:	e004      	b.n	80054d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80054d4:	e000      	b.n	80054d8 <USB_ActivateEndpoint+0x7c>
      break;
 80054d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005510:	b29b      	uxth	r3, r3
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	4313      	orrs	r3, r2
 8005518:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	7b1b      	ldrb	r3, [r3, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 8178 	bne.w	8005838 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8084 	beq.w	800565a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800555c:	b29b      	uxth	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	4413      	add	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	011a      	lsls	r2, r3, #4
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	88db      	ldrh	r3, [r3, #6]
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	827b      	strh	r3, [r7, #18]
 8005594:	8a7b      	ldrh	r3, [r7, #18]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01b      	beq.n	80055d6 <USB_ActivateEndpoint+0x17a>
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b4:	823b      	strh	r3, [r7, #16]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	8a3b      	ldrh	r3, [r7, #16]
 80055c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	78db      	ldrb	r3, [r3, #3]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d020      	beq.n	8005620 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055f4:	81bb      	strh	r3, [r7, #12]
 80055f6:	89bb      	ldrh	r3, [r7, #12]
 80055f8:	f083 0320 	eor.w	r3, r3, #32
 80055fc:	81bb      	strh	r3, [r7, #12]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	441a      	add	r2, r3
 8005608:	89bb      	ldrh	r3, [r7, #12]
 800560a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800560e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]
 800561e:	e2d5      	b.n	8005bcc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29b      	uxth	r3, r3
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005636:	81fb      	strh	r3, [r7, #14]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800564c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005654:	b29b      	uxth	r3, r3
 8005656:	8013      	strh	r3, [r2, #0]
 8005658:	e2b8      	b.n	8005bcc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	633b      	str	r3, [r7, #48]	@ 0x30
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566a:	4413      	add	r3, r2
 800566c:	633b      	str	r3, [r7, #48]	@ 0x30
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	4413      	add	r3, r2
 8005678:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	88db      	ldrh	r3, [r3, #6]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	b29b      	uxth	r3, r3
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569e:	4413      	add	r3, r2
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	011a      	lsls	r2, r3, #4
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	4413      	add	r3, r2
 80056ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056bc:	b29a      	uxth	r2, r3
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80056c8:	d91d      	bls.n	8005706 <USB_ActivateEndpoint+0x2aa>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <USB_ActivateEndpoint+0x288>
 80056de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056e0:	3b01      	subs	r3, #1
 80056e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	4313      	orrs	r3, r2
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fe:	b29a      	uxth	r2, r3
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	e026      	b.n	8005754 <USB_ActivateEndpoint+0x2f8>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <USB_ActivateEndpoint+0x2c8>
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571c:	b29a      	uxth	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	e017      	b.n	8005754 <USB_ActivateEndpoint+0x2f8>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <USB_ActivateEndpoint+0x2e2>
 8005738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800573a:	3301      	adds	r3, #1
 800573c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29a      	uxth	r2, r3
 8005744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005746:	b29b      	uxth	r3, r3
 8005748:	029b      	lsls	r3, r3, #10
 800574a:	b29b      	uxth	r3, r3
 800574c:	4313      	orrs	r3, r2
 800574e:	b29a      	uxth	r2, r3
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005762:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <USB_ActivateEndpoint+0x348>
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005782:	843b      	strh	r3, [r7, #32]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	8c3b      	ldrh	r3, [r7, #32]
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800579c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d124      	bne.n	80057f6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c2:	83bb      	strh	r3, [r7, #28]
 80057c4:	8bbb      	ldrh	r3, [r7, #28]
 80057c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057ca:	83bb      	strh	r3, [r7, #28]
 80057cc:	8bbb      	ldrh	r3, [r7, #28]
 80057ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057d2:	83bb      	strh	r3, [r7, #28]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	8bbb      	ldrh	r3, [r7, #28]
 80057e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	8013      	strh	r3, [r2, #0]
 80057f4:	e1ea      	b.n	8005bcc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580c:	83fb      	strh	r3, [r7, #30]
 800580e:	8bfb      	ldrh	r3, [r7, #30]
 8005810:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005814:	83fb      	strh	r3, [r7, #30]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	441a      	add	r2, r3
 8005820:	8bfb      	ldrh	r3, [r7, #30]
 8005822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800582a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800582e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005832:	b29b      	uxth	r3, r3
 8005834:	8013      	strh	r3, [r2, #0]
 8005836:	e1c9      	b.n	8005bcc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d11e      	bne.n	800587e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	441a      	add	r2, r3
 8005864:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800586c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005870:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005878:	b29b      	uxth	r3, r3
 800587a:	8013      	strh	r3, [r2, #0]
 800587c:	e01d      	b.n	80058ba <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005894:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	441a      	add	r2, r3
 80058a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80058a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ca:	4413      	add	r3, r2
 80058cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	011a      	lsls	r2, r3, #4
 80058d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	891b      	ldrh	r3, [r3, #8]
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058ec:	801a      	strh	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fe:	4413      	add	r3, r2
 8005900:	657b      	str	r3, [r7, #84]	@ 0x54
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	011a      	lsls	r2, r3, #4
 8005908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590a:	4413      	add	r3, r2
 800590c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005910:	653b      	str	r3, [r7, #80]	@ 0x50
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	895b      	ldrh	r3, [r3, #10]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	b29b      	uxth	r3, r3
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005920:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 8093 	bne.w	8005a52 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800593c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <USB_ActivateEndpoint+0x524>
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	441a      	add	r2, r3
 800596a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800596c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005974:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800598e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <USB_ActivateEndpoint+0x574>
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80059ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	8013      	strh	r3, [r2, #0]
 8005a50:	e0bc      	b.n	8005bcc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005a62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01d      	beq.n	8005aaa <USB_ActivateEndpoint+0x64e>
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a84:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	441a      	add	r2, r3
 8005a92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005aba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01d      	beq.n	8005b02 <USB_ActivateEndpoint+0x6a6>
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005adc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	441a      	add	r2, r3
 8005aea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005afa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	78db      	ldrb	r3, [r3, #3]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d024      	beq.n	8005b54 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b28:	f083 0320 	eor.w	r3, r3, #32
 8005b2c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]
 8005b52:	e01d      	b.n	8005b90 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	441a      	add	r2, r3
 8005b78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005bcc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3774      	adds	r7, #116	@ 0x74
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop

08005bdc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b08d      	sub	sp, #52	@ 0x34
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	7b1b      	ldrb	r3, [r3, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 808e 	bne.w	8005d0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d044      	beq.n	8005c82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	81bb      	strh	r3, [r7, #12]
 8005c06:	89bb      	ldrh	r3, [r7, #12]
 8005c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01b      	beq.n	8005c48 <USB_DeactivateEndpoint+0x6c>
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c26:	817b      	strh	r3, [r7, #10]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	897b      	ldrh	r3, [r7, #10]
 8005c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c40:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c5e:	813b      	strh	r3, [r7, #8]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	893b      	ldrh	r3, [r7, #8]
 8005c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	8013      	strh	r3, [r2, #0]
 8005c80:	e192      	b.n	8005fa8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	827b      	strh	r3, [r7, #18]
 8005c90:	8a7b      	ldrh	r3, [r7, #18]
 8005c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01b      	beq.n	8005cd2 <USB_DeactivateEndpoint+0xf6>
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb0:	823b      	strh	r3, [r7, #16]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	441a      	add	r2, r3
 8005cbc:	8a3b      	ldrh	r3, [r7, #16]
 8005cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce8:	81fb      	strh	r3, [r7, #14]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	89fb      	ldrh	r3, [r7, #14]
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
 8005d0a:	e14d      	b.n	8005fa8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 80a5 	bne.w	8005e60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	843b      	strh	r3, [r7, #32]
 8005d24:	8c3b      	ldrh	r3, [r7, #32]
 8005d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01b      	beq.n	8005d66 <USB_DeactivateEndpoint+0x18a>
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d44:	83fb      	strh	r3, [r7, #30]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	441a      	add	r2, r3
 8005d50:	8bfb      	ldrh	r3, [r7, #30]
 8005d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	83bb      	strh	r3, [r7, #28]
 8005d74:	8bbb      	ldrh	r3, [r7, #28]
 8005d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01b      	beq.n	8005db6 <USB_DeactivateEndpoint+0x1da>
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d94:	837b      	strh	r3, [r7, #26]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	441a      	add	r2, r3
 8005da0:	8b7b      	ldrh	r3, [r7, #26]
 8005da2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005da6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dcc:	833b      	strh	r3, [r7, #24]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	8b3b      	ldrh	r3, [r7, #24]
 8005dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e04:	82fb      	strh	r3, [r7, #22]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	8afb      	ldrh	r3, [r7, #22]
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e3c:	82bb      	strh	r3, [r7, #20]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	441a      	add	r2, r3
 8005e48:	8abb      	ldrh	r3, [r7, #20]
 8005e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8013      	strh	r3, [r2, #0]
 8005e5e:	e0a3      	b.n	8005fa8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005e6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <USB_DeactivateEndpoint+0x2d4>
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005e9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005ebe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01b      	beq.n	8005f00 <USB_DeactivateEndpoint+0x324>
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ede:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005eec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f16:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f86:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3734      	adds	r7, #52	@ 0x34
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b0c2      	sub	sp, #264	@ 0x108
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc2:	6018      	str	r0, [r3, #0]
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fcc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	f040 86b7 	bne.w	8006d4e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d908      	bls.n	800600e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800600c:	e007      	b.n	800601e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800600e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	7b1b      	ldrb	r3, [r3, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d13a      	bne.n	80060a4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800602e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6959      	ldr	r1, [r3, #20]
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	88da      	ldrh	r2, [r3, #6]
 8006046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604a:	b29b      	uxth	r3, r3
 800604c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006050:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006054:	6800      	ldr	r0, [r0, #0]
 8006056:	f001 fc9c 	bl	8007992 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800605a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006074:	b29b      	uxth	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	011a      	lsls	r2, r3, #4
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	4413      	add	r3, r2
 8006090:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	801a      	strh	r2, [r3, #0]
 80060a0:	f000 be1f 	b.w	8006ce2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	78db      	ldrb	r3, [r3, #3]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	f040 8462 	bne.w	800697a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1a      	ldr	r2, [r3, #32]
 80060c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	f240 83df 	bls.w	8006892 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80060fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006124:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	1ad2      	subs	r2, r2, r3
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 81c7 	beq.w	8006504 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	633b      	str	r3, [r7, #48]	@ 0x30
 8006182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	785b      	ldrb	r3, [r3, #1]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d177      	bne.n	8006282 <USB_EPStartXfer+0x2ce>
 8006192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800619e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	4413      	add	r3, r2
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	011a      	lsls	r2, r3, #4
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80061e4:	d921      	bls.n	800622a <USB_EPStartXfer+0x276>
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80061f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d104      	bne.n	8006206 <USB_EPStartXfer+0x252>
 80061fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006200:	3b01      	subs	r3, #1
 8006202:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006210:	b29b      	uxth	r3, r3
 8006212:	029b      	lsls	r3, r3, #10
 8006214:	b29b      	uxth	r3, r3
 8006216:	4313      	orrs	r3, r2
 8006218:	b29b      	uxth	r3, r3
 800621a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006222:	b29a      	uxth	r2, r3
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	e050      	b.n	80062cc <USB_EPStartXfer+0x318>
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <USB_EPStartXfer+0x294>
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006240:	b29a      	uxth	r2, r3
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e041      	b.n	80062cc <USB_EPStartXfer+0x318>
 8006248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <USB_EPStartXfer+0x2b4>
 800625e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006262:	3301      	adds	r3, #1
 8006264:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006272:	b29b      	uxth	r3, r3
 8006274:	029b      	lsls	r3, r3, #10
 8006276:	b29b      	uxth	r3, r3
 8006278:	4313      	orrs	r3, r2
 800627a:	b29a      	uxth	r2, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	e024      	b.n	80062cc <USB_EPStartXfer+0x318>
 8006282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d11c      	bne.n	80062cc <USB_EPStartXfer+0x318>
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	4413      	add	r3, r2
 80062a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	4413      	add	r3, r2
 80062bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	895b      	ldrh	r3, [r3, #10]
 80062d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6959      	ldr	r1, [r3, #20]
 80062e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80062f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	f001 fb49 	bl	8007992 <USB_WritePMA>
            ep->xfer_buff += len;
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695a      	ldr	r2, [r3, #20]
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006310:	441a      	add	r2, r3
 8006312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d90f      	bls.n	800635a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800633a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a1a      	ldr	r2, [r3, #32]
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	621a      	str	r2, [r3, #32]
 8006358:	e00e      	b.n	8006378 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800636a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2200      	movs	r2, #0
 8006376:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d177      	bne.n	8006478 <USB_EPStartXfer+0x4c4>
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	4413      	add	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	011a      	lsls	r2, r3, #4
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80063da:	d921      	bls.n	8006420 <USB_EPStartXfer+0x46c>
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <USB_EPStartXfer+0x448>
 80063f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f6:	3b01      	subs	r3, #1
 80063f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006406:	b29b      	uxth	r3, r3
 8006408:	029b      	lsls	r3, r3, #10
 800640a:	b29b      	uxth	r3, r3
 800640c:	4313      	orrs	r3, r2
 800640e:	b29b      	uxth	r3, r3
 8006410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006418:	b29a      	uxth	r2, r3
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	e056      	b.n	80064ce <USB_EPStartXfer+0x51a>
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <USB_EPStartXfer+0x48a>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006436:	b29a      	uxth	r2, r3
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	e047      	b.n	80064ce <USB_EPStartXfer+0x51a>
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <USB_EPStartXfer+0x4aa>
 8006454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006458:	3301      	adds	r3, #1
 800645a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006468:	b29b      	uxth	r3, r3
 800646a:	029b      	lsls	r3, r3, #10
 800646c:	b29b      	uxth	r3, r3
 800646e:	4313      	orrs	r3, r2
 8006470:	b29a      	uxth	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e02a      	b.n	80064ce <USB_EPStartXfer+0x51a>
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d122      	bne.n	80064ce <USB_EPStartXfer+0x51a>
 8006488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	623b      	str	r3, [r7, #32]
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	4413      	add	r3, r2
 80064aa:	623b      	str	r3, [r7, #32]
 80064ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	011a      	lsls	r2, r3, #4
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	4413      	add	r3, r2
 80064be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	891b      	ldrh	r3, [r3, #8]
 80064da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6959      	ldr	r1, [r3, #20]
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80064f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064fc:	6800      	ldr	r0, [r0, #0]
 80064fe:	f001 fa48 	bl	8007992 <USB_WritePMA>
 8006502:	e3ee      	b.n	8006ce2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d177      	bne.n	8006604 <USB_EPStartXfer+0x650>
 8006514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006534:	4413      	add	r3, r2
 8006536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	011a      	lsls	r2, r3, #4
 8006546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006548:	4413      	add	r3, r2
 800654a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800654e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800655a:	b29a      	uxth	r2, r3
 800655c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800655e:	801a      	strh	r2, [r3, #0]
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006564:	2b3e      	cmp	r3, #62	@ 0x3e
 8006566:	d921      	bls.n	80065ac <USB_EPStartXfer+0x5f8>
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656c:	095b      	lsrs	r3, r3, #5
 800656e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <USB_EPStartXfer+0x5d4>
 800657e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006582:	3b01      	subs	r3, #1
 8006584:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	b29a      	uxth	r2, r3
 800658e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006592:	b29b      	uxth	r3, r3
 8006594:	029b      	lsls	r3, r3, #10
 8006596:	b29b      	uxth	r3, r3
 8006598:	4313      	orrs	r3, r2
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a8:	801a      	strh	r2, [r3, #0]
 80065aa:	e056      	b.n	800665a <USB_EPStartXfer+0x6a6>
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <USB_EPStartXfer+0x616>
 80065b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	e047      	b.n	800665a <USB_EPStartXfer+0x6a6>
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <USB_EPStartXfer+0x636>
 80065e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065e4:	3301      	adds	r3, #1
 80065e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	029b      	lsls	r3, r3, #10
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	e02a      	b.n	800665a <USB_EPStartXfer+0x6a6>
 8006604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d122      	bne.n	800665a <USB_EPStartXfer+0x6a6>
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800662e:	b29b      	uxth	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006634:	4413      	add	r3, r2
 8006636:	653b      	str	r3, [r7, #80]	@ 0x50
 8006638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	011a      	lsls	r2, r3, #4
 8006646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006648:	4413      	add	r3, r2
 800664a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800664e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006654:	b29a      	uxth	r2, r3
 8006656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006658:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800665a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	891b      	ldrh	r3, [r3, #8]
 8006666:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6959      	ldr	r1, [r3, #20]
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	b29b      	uxth	r3, r3
 800667c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006680:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006684:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006688:	6800      	ldr	r0, [r0, #0]
 800668a:	f001 f982 	bl	8007992 <USB_WritePMA>
            ep->xfer_buff += len;
 800668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669e:	441a      	add	r2, r3
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a1a      	ldr	r2, [r3, #32]
 80066b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d90f      	bls.n	80066e8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6a1a      	ldr	r2, [r3, #32]
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	621a      	str	r2, [r3, #32]
 80066e6:	e00e      	b.n	8006706 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80066e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80066f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	643b      	str	r3, [r7, #64]	@ 0x40
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d177      	bne.n	8006812 <USB_EPStartXfer+0x85e>
 8006722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800672e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800673c:	b29b      	uxth	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006742:	4413      	add	r3, r2
 8006744:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	011a      	lsls	r2, r3, #4
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	4413      	add	r3, r2
 8006758:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
 800675e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006768:	b29a      	uxth	r2, r3
 800676a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006772:	2b3e      	cmp	r3, #62	@ 0x3e
 8006774:	d921      	bls.n	80067ba <USB_EPStartXfer+0x806>
 8006776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <USB_EPStartXfer+0x7e2>
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006790:	3b01      	subs	r3, #1
 8006792:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	029b      	lsls	r3, r3, #10
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	4313      	orrs	r3, r2
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b6:	801a      	strh	r2, [r3, #0]
 80067b8:	e050      	b.n	800685c <USB_EPStartXfer+0x8a8>
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <USB_EPStartXfer+0x824>
 80067c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e041      	b.n	800685c <USB_EPStartXfer+0x8a8>
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <USB_EPStartXfer+0x844>
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f2:	3301      	adds	r3, #1
 80067f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006802:	b29b      	uxth	r3, r3
 8006804:	029b      	lsls	r3, r3, #10
 8006806:	b29b      	uxth	r3, r3
 8006808:	4313      	orrs	r3, r2
 800680a:	b29a      	uxth	r2, r3
 800680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	e024      	b.n	800685c <USB_EPStartXfer+0x8a8>
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d11c      	bne.n	800685c <USB_EPStartXfer+0x8a8>
 8006822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006830:	b29b      	uxth	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006836:	4413      	add	r3, r2
 8006838:	643b      	str	r3, [r7, #64]	@ 0x40
 800683a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	011a      	lsls	r2, r3, #4
 8006848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800684a:	4413      	add	r3, r2
 800684c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006856:	b29a      	uxth	r2, r3
 8006858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	895b      	ldrh	r3, [r3, #10]
 8006868:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800686c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6959      	ldr	r1, [r3, #20]
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687c:	b29b      	uxth	r3, r3
 800687e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006882:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006886:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	f001 f881 	bl	8007992 <USB_WritePMA>
 8006890:	e227      	b.n	8006ce2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80068a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80068c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80068ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006918:	b29b      	uxth	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800691e:	4413      	add	r3, r2
 8006920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	011a      	lsls	r2, r3, #4
 8006930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006932:	4413      	add	r3, r2
 8006934:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006938:	65bb      	str	r3, [r7, #88]	@ 0x58
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	b29a      	uxth	r2, r3
 8006940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006942:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	891b      	ldrh	r3, [r3, #8]
 8006950:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6959      	ldr	r1, [r3, #20]
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	b29b      	uxth	r3, r3
 8006966:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800696a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800696e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006972:	6800      	ldr	r0, [r0, #0]
 8006974:	f001 f80d 	bl	8007992 <USB_WritePMA>
 8006978:	e1b3      	b.n	8006ce2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	1ad2      	subs	r2, r2, r3
 800698c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80c6 	beq.w	8006b4c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d177      	bne.n	8006acc <USB_EPStartXfer+0xb18>
 80069dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069fc:	4413      	add	r3, r2
 80069fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	011a      	lsls	r2, r3, #4
 8006a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a26:	801a      	strh	r2, [r3, #0]
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a2e:	d921      	bls.n	8006a74 <USB_EPStartXfer+0xac0>
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <USB_EPStartXfer+0xa9c>
 8006a46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	029b      	lsls	r3, r3, #10
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	4313      	orrs	r3, r2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	e050      	b.n	8006b16 <USB_EPStartXfer+0xb62>
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <USB_EPStartXfer+0xade>
 8006a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e041      	b.n	8006b16 <USB_EPStartXfer+0xb62>
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <USB_EPStartXfer+0xafe>
 8006aa8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006aac:	3301      	adds	r3, #1
 8006aae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ab2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	029b      	lsls	r3, r3, #10
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac8:	801a      	strh	r2, [r3, #0]
 8006aca:	e024      	b.n	8006b16 <USB_EPStartXfer+0xb62>
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d11c      	bne.n	8006b16 <USB_EPStartXfer+0xb62>
 8006adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af0:	4413      	add	r3, r2
 8006af2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	011a      	lsls	r2, r3, #4
 8006b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	895b      	ldrh	r3, [r3, #10]
 8006b22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6959      	ldr	r1, [r3, #20]
 8006b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b44:	6800      	ldr	r0, [r0, #0]
 8006b46:	f000 ff24 	bl	8007992 <USB_WritePMA>
 8006b4a:	e0ca      	b.n	8006ce2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d177      	bne.n	8006c4c <USB_EPStartXfer+0xc98>
 8006b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b7c:	4413      	add	r3, r2
 8006b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b9a:	881b      	ldrh	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bae:	d921      	bls.n	8006bf4 <USB_EPStartXfer+0xc40>
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <USB_EPStartXfer+0xc1c>
 8006bc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	029b      	lsls	r3, r3, #10
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4313      	orrs	r3, r2
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	e05c      	b.n	8006cae <USB_EPStartXfer+0xcfa>
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <USB_EPStartXfer+0xc5e>
 8006bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	e04d      	b.n	8006cae <USB_EPStartXfer+0xcfa>
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <USB_EPStartXfer+0xc7e>
 8006c28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	029b      	lsls	r3, r3, #10
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4313      	orrs	r3, r2
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	e030      	b.n	8006cae <USB_EPStartXfer+0xcfa>
 8006c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d128      	bne.n	8006cae <USB_EPStartXfer+0xcfa>
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c80:	4413      	add	r3, r2
 8006c82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	011a      	lsls	r2, r3, #4
 8006c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c98:	4413      	add	r3, r2
 8006c9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	891b      	ldrh	r3, [r3, #8]
 8006cba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6959      	ldr	r1, [r3, #20]
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cd4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cd8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cdc:	6800      	ldr	r0, [r0, #0]
 8006cde:	f000 fe58 	bl	8007992 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d08:	817b      	strh	r3, [r7, #10]
 8006d0a:	897b      	ldrh	r3, [r7, #10]
 8006d0c:	f083 0310 	eor.w	r3, r3, #16
 8006d10:	817b      	strh	r3, [r7, #10]
 8006d12:	897b      	ldrh	r3, [r7, #10]
 8006d14:	f083 0320 	eor.w	r3, r3, #32
 8006d18:	817b      	strh	r3, [r7, #10]
 8006d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	441a      	add	r2, r3
 8006d34:	897b      	ldrh	r3, [r7, #10]
 8006d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8013      	strh	r3, [r2, #0]
 8006d4a:	f000 bcde 	b.w	800770a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	7b1b      	ldrb	r3, [r3, #12]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 80bb 	bne.w	8006ed6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d917      	bls.n	8006dac <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9c:	1ad2      	subs	r2, r2, r3
 8006d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	619a      	str	r2, [r3, #24]
 8006daa:	e00e      	b.n	8006dca <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006dee:	4413      	add	r3, r2
 8006df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	011a      	lsls	r2, r3, #4
 8006e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e06:	4413      	add	r3, r2
 8006e08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e28:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e2a:	d924      	bls.n	8006e76 <USB_EPStartXfer+0xec2>
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <USB_EPStartXfer+0xe98>
 8006e42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e46:	3b01      	subs	r3, #1
 8006e48:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	029b      	lsls	r3, r3, #10
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	f000 bc10 	b.w	8007696 <USB_EPStartXfer+0x16e2>
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10c      	bne.n	8006e98 <USB_EPStartXfer+0xee4>
 8006e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e94:	801a      	strh	r2, [r3, #0]
 8006e96:	e3fe      	b.n	8007696 <USB_EPStartXfer+0x16e2>
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <USB_EPStartXfer+0xf04>
 8006eae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	029b      	lsls	r3, r3, #10
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e3df      	b.n	8007696 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	78db      	ldrb	r3, [r3, #3]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	f040 8218 	bne.w	8007318 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	785b      	ldrb	r3, [r3, #1]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 809d 	bne.w	8007034 <USB_EPStartXfer+0x1080>
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f1e:	4413      	add	r3, r2
 8006f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	011a      	lsls	r2, r3, #4
 8006f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f36:	4413      	add	r3, r2
 8006f38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f52:	801a      	strh	r2, [r3, #0]
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f62:	d92b      	bls.n	8006fbc <USB_EPStartXfer+0x1008>
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	095b      	lsrs	r3, r3, #5
 8006f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <USB_EPStartXfer+0xfe0>
 8006f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fb8:	801a      	strh	r2, [r3, #0]
 8006fba:	e070      	b.n	800709e <USB_EPStartXfer+0x10ea>
 8006fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10c      	bne.n	8006fe6 <USB_EPStartXfer+0x1032>
 8006fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	e05b      	b.n	800709e <USB_EPStartXfer+0x10ea>
 8006fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <USB_EPStartXfer+0x1062>
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007010:	3301      	adds	r3, #1
 8007012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007022:	b29b      	uxth	r3, r3
 8007024:	029b      	lsls	r3, r3, #10
 8007026:	b29b      	uxth	r3, r3
 8007028:	4313      	orrs	r3, r2
 800702a:	b29a      	uxth	r2, r3
 800702c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e034      	b.n	800709e <USB_EPStartXfer+0x10ea>
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d12c      	bne.n	800709e <USB_EPStartXfer+0x10ea>
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007068:	4413      	add	r3, r2
 800706a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	011a      	lsls	r2, r3, #4
 800707c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007080:	4413      	add	r3, r2
 8007082:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007086:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800708a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 809d 	bne.w	80071f8 <USB_EPStartXfer+0x1244>
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070e2:	4413      	add	r3, r2
 80070e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	011a      	lsls	r2, r3, #4
 80070f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070fa:	4413      	add	r3, r2
 80070fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007110:	b29a      	uxth	r2, r3
 8007112:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007116:	801a      	strh	r2, [r3, #0]
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b3e      	cmp	r3, #62	@ 0x3e
 8007126:	d92b      	bls.n	8007180 <USB_EPStartXfer+0x11cc>
 8007128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	095b      	lsrs	r3, r3, #5
 8007136:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800713a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <USB_EPStartXfer+0x11a4>
 800714e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007152:	3b01      	subs	r3, #1
 8007154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29a      	uxth	r2, r3
 8007160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007164:	b29b      	uxth	r3, r3
 8007166:	029b      	lsls	r3, r3, #10
 8007168:	b29b      	uxth	r3, r3
 800716a:	4313      	orrs	r3, r2
 800716c:	b29b      	uxth	r3, r3
 800716e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007176:	b29a      	uxth	r2, r3
 8007178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e069      	b.n	8007254 <USB_EPStartXfer+0x12a0>
 8007180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10c      	bne.n	80071aa <USB_EPStartXfer+0x11f6>
 8007190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e054      	b.n	8007254 <USB_EPStartXfer+0x12a0>
 80071aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <USB_EPStartXfer+0x1226>
 80071d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d4:	3301      	adds	r3, #1
 80071d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	029b      	lsls	r3, r3, #10
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	e02d      	b.n	8007254 <USB_EPStartXfer+0x12a0>
 80071f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	785b      	ldrb	r3, [r3, #1]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d125      	bne.n	8007254 <USB_EPStartXfer+0x12a0>
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007216:	b29b      	uxth	r3, r3
 8007218:	461a      	mov	r2, r3
 800721a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800721e:	4413      	add	r3, r2
 8007220:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	011a      	lsls	r2, r3, #4
 8007232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007236:	4413      	add	r3, r2
 8007238:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800723c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	b29a      	uxth	r2, r3
 800724e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007252:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8218 	beq.w	8007696 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007286:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800728a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <USB_EPStartXfer+0x12ea>
 8007292:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10d      	bne.n	80072ba <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800729e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f040 81f5 	bne.w	8007696 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f040 81ee 	bne.w	8007696 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80072e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800730a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800730e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007312:	b29b      	uxth	r3, r3
 8007314:	8013      	strh	r3, [r2, #0]
 8007316:	e1be      	b.n	8007696 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	78db      	ldrb	r3, [r3, #3]
 8007324:	2b01      	cmp	r3, #1
 8007326:	f040 81b4 	bne.w	8007692 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800732a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	429a      	cmp	r2, r3
 8007344:	d917      	bls.n	8007376 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	619a      	str	r2, [r3, #24]
 8007374:	e00e      	b.n	8007394 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2200      	movs	r2, #0
 8007392:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 8085 	bne.w	80074b0 <USB_EPStartXfer+0x14fc>
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073ca:	4413      	add	r3, r2
 80073cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	011a      	lsls	r2, r3, #4
 80073de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073e2:	4413      	add	r3, r2
 80073e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007404:	2b3e      	cmp	r3, #62	@ 0x3e
 8007406:	d923      	bls.n	8007450 <USB_EPStartXfer+0x149c>
 8007408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <USB_EPStartXfer+0x1474>
 800741e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007422:	3b01      	subs	r3, #1
 8007424:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007434:	b29b      	uxth	r3, r3
 8007436:	029b      	lsls	r3, r3, #10
 8007438:	b29b      	uxth	r3, r3
 800743a:	4313      	orrs	r3, r2
 800743c:	b29b      	uxth	r3, r3
 800743e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007446:	b29a      	uxth	r2, r3
 8007448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	e060      	b.n	8007512 <USB_EPStartXfer+0x155e>
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10c      	bne.n	8007472 <USB_EPStartXfer+0x14be>
 8007458:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007468:	b29a      	uxth	r2, r3
 800746a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800746e:	801a      	strh	r2, [r3, #0]
 8007470:	e04f      	b.n	8007512 <USB_EPStartXfer+0x155e>
 8007472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d004      	beq.n	8007492 <USB_EPStartXfer+0x14de>
 8007488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800748c:	3301      	adds	r3, #1
 800748e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29a      	uxth	r2, r3
 800749a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800749e:	b29b      	uxth	r3, r3
 80074a0:	029b      	lsls	r3, r3, #10
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4313      	orrs	r3, r2
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	e030      	b.n	8007512 <USB_EPStartXfer+0x155e>
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d128      	bne.n	8007512 <USB_EPStartXfer+0x155e>
 80074c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074dc:	b29b      	uxth	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074e4:	4413      	add	r3, r2
 80074e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	011a      	lsls	r2, r3, #4
 80074f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074fc:	4413      	add	r3, r2
 80074fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007502:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750a:	b29a      	uxth	r2, r3
 800750c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 8085 	bne.w	800763c <USB_EPStartXfer+0x1688>
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007556:	4413      	add	r3, r2
 8007558:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	011a      	lsls	r2, r3, #4
 800756a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800756e:	4413      	add	r3, r2
 8007570:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007574:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	b29b      	uxth	r3, r3
 8007580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007584:	b29a      	uxth	r2, r3
 8007586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007590:	2b3e      	cmp	r3, #62	@ 0x3e
 8007592:	d923      	bls.n	80075dc <USB_EPStartXfer+0x1628>
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a2:	f003 031f 	and.w	r3, r3, #31
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <USB_EPStartXfer+0x1600>
 80075aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075ae:	3b01      	subs	r3, #1
 80075b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	e05c      	b.n	8007696 <USB_EPStartXfer+0x16e2>
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10c      	bne.n	80075fe <USB_EPStartXfer+0x164a>
 80075e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	e04b      	b.n	8007696 <USB_EPStartXfer+0x16e2>
 80075fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <USB_EPStartXfer+0x166a>
 8007614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007618:	3301      	adds	r3, #1
 800761a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800761e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	b29a      	uxth	r2, r3
 8007634:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e02c      	b.n	8007696 <USB_EPStartXfer+0x16e2>
 800763c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d124      	bne.n	8007696 <USB_EPStartXfer+0x16e2>
 800764c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007662:	4413      	add	r3, r2
 8007664:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	011a      	lsls	r2, r3, #4
 8007676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800767a:	4413      	add	r3, r2
 800767c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007680:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007688:	b29a      	uxth	r2, r3
 800768a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	e001      	b.n	8007696 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e03a      	b.n	800770c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	441a      	add	r2, r3
 80076f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007706:	b29b      	uxth	r3, r3
 8007708:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d020      	beq.n	800776a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800773e:	81bb      	strh	r3, [r7, #12]
 8007740:	89bb      	ldrh	r3, [r7, #12]
 8007742:	f083 0310 	eor.w	r3, r3, #16
 8007746:	81bb      	strh	r3, [r7, #12]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007764:	b29b      	uxth	r3, r3
 8007766:	8013      	strh	r3, [r2, #0]
 8007768:	e01f      	b.n	80077aa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800777c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007780:	81fb      	strh	r3, [r7, #14]
 8007782:	89fb      	ldrh	r3, [r7, #14]
 8007784:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007788:	81fb      	strh	r3, [r7, #14]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	441a      	add	r2, r3
 8007794:	89fb      	ldrh	r3, [r7, #14]
 8007796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800779a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800779e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr

080077b6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	7b1b      	ldrb	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f040 809d 	bne.w	8007904 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	785b      	ldrb	r3, [r3, #1]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d04c      	beq.n	800786c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	823b      	strh	r3, [r7, #16]
 80077e0:	8a3b      	ldrh	r3, [r7, #16]
 80077e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01b      	beq.n	8007822 <USB_EPClearStall+0x6c>
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007800:	81fb      	strh	r3, [r7, #14]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	441a      	add	r2, r3
 800780c:	89fb      	ldrh	r3, [r7, #14]
 800780e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007812:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800781a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800781e:	b29b      	uxth	r3, r3
 8007820:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	78db      	ldrb	r3, [r3, #3]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d06c      	beq.n	8007904 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800783c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007840:	81bb      	strh	r3, [r7, #12]
 8007842:	89bb      	ldrh	r3, [r7, #12]
 8007844:	f083 0320 	eor.w	r3, r3, #32
 8007848:	81bb      	strh	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	441a      	add	r2, r3
 8007854:	89bb      	ldrh	r3, [r7, #12]
 8007856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800785a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800785e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007866:	b29b      	uxth	r3, r3
 8007868:	8013      	strh	r3, [r2, #0]
 800786a:	e04b      	b.n	8007904 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	82fb      	strh	r3, [r7, #22]
 800787a:	8afb      	ldrh	r3, [r7, #22]
 800787c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <USB_EPClearStall+0x106>
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800789a:	82bb      	strh	r3, [r7, #20]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	441a      	add	r2, r3
 80078a6:	8abb      	ldrh	r3, [r7, #20]
 80078a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078d2:	827b      	strh	r3, [r7, #18]
 80078d4:	8a7b      	ldrh	r3, [r7, #18]
 80078d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078da:	827b      	strh	r3, [r7, #18]
 80078dc:	8a7b      	ldrh	r3, [r7, #18]
 80078de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078e2:	827b      	strh	r3, [r7, #18]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	441a      	add	r2, r3
 80078ee:	8a7b      	ldrh	r3, [r7, #18]
 80078f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007900:	b29b      	uxth	r3, r3
 8007902:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr

08007910 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2280      	movs	r2, #128	@ 0x80
 8007926:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800796c:	b29b      	uxth	r3, r3
 800796e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007970:	68fb      	ldr	r3, [r7, #12]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	bc80      	pop	{r7}
 800797a:	4770      	bx	lr

0800797c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr

08007992 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007992:	b480      	push	{r7}
 8007994:	b08b      	sub	sp, #44	@ 0x2c
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	4611      	mov	r1, r2
 800799e:	461a      	mov	r2, r3
 80079a0:	460b      	mov	r3, r1
 80079a2:	80fb      	strh	r3, [r7, #6]
 80079a4:	4613      	mov	r3, r2
 80079a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079a8:	88bb      	ldrh	r3, [r7, #4]
 80079aa:	3301      	adds	r3, #1
 80079ac:	085b      	lsrs	r3, r3, #1
 80079ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	005a      	lsls	r2, r3, #1
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ca:	e01e      	b.n	8007a0a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	3301      	adds	r3, #1
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	b21a      	sxth	r2, r3
 80079dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	b21b      	sxth	r3, r3
 80079e4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	8a7a      	ldrh	r2, [r7, #18]
 80079ea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	3302      	adds	r3, #2
 80079f0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	3302      	adds	r3, #2
 80079f6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	3301      	adds	r3, #1
 80079fc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3301      	adds	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	3b01      	subs	r3, #1
 8007a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1dd      	bne.n	80079cc <USB_WritePMA+0x3a>
  }
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	372c      	adds	r7, #44	@ 0x2c
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b08b      	sub	sp, #44	@ 0x2c
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4611      	mov	r1, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	80fb      	strh	r3, [r7, #6]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a32:	88bb      	ldrh	r3, [r7, #4]
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	005a      	lsls	r2, r3, #1
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a4e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a54:	e01b      	b.n	8007a8e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	3302      	adds	r3, #2
 8007a62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	0a1b      	lsrs	r3, r3, #8
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	3302      	adds	r3, #2
 8007a86:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e0      	bne.n	8007a56 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007a94:	88bb      	ldrh	r3, [r7, #4]
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	701a      	strb	r2, [r3, #0]
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	372c      	adds	r7, #44	@ 0x2c
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr

08007aba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7c1b      	ldrb	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d115      	bne.n	8007afe <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	2181      	movs	r1, #129	@ 0x81
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 fe95 	bl	800980a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aea:	2202      	movs	r2, #2
 8007aec:	2101      	movs	r1, #1
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fe8b 	bl	800980a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007afc:	e012      	b.n	8007b24 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007afe:	2340      	movs	r3, #64	@ 0x40
 8007b00:	2202      	movs	r2, #2
 8007b02:	2181      	movs	r1, #129	@ 0x81
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 fe80 	bl	800980a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b10:	2340      	movs	r3, #64	@ 0x40
 8007b12:	2202      	movs	r2, #2
 8007b14:	2101      	movs	r1, #1
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 fe77 	bl	800980a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b24:	2308      	movs	r3, #8
 8007b26:	2203      	movs	r2, #3
 8007b28:	2182      	movs	r1, #130	@ 0x82
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 fe6d 	bl	800980a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b36:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b3a:	f001 ff8d 	bl	8009a58 <USBD_static_malloc>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
 8007b54:	e026      	b.n	8007ba4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7c1b      	ldrb	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 ff2c 	bl	80099ea <USBD_LL_PrepareReceive>
 8007b92:	e007      	b.n	8007ba4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b9a:	2340      	movs	r3, #64	@ 0x40
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 ff23 	bl	80099ea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bbe:	2181      	movs	r1, #129	@ 0x81
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fe48 	bl	8009856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007bcc:	2101      	movs	r1, #1
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fe41 	bl	8009856 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007bdc:	2182      	movs	r1, #130	@ 0x82
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fe39 	bl	8009856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 ff33 	bl	8009a70 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c2c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d039      	beq.n	8007cba <USBD_CDC_Setup+0x9e>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d17f      	bne.n	8007d4a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d029      	beq.n	8007ca6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da11      	bge.n	8007c80 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007c68:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	88d2      	ldrh	r2, [r2, #6]
 8007c6e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c70:	6939      	ldr	r1, [r7, #16]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	88db      	ldrh	r3, [r3, #6]
 8007c76:	461a      	mov	r2, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 fa05 	bl	8009088 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007c7e:	e06b      	b.n	8007d58 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	785a      	ldrb	r2, [r3, #1]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	88db      	ldrh	r3, [r3, #6]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c96:	6939      	ldr	r1, [r7, #16]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	88db      	ldrh	r3, [r3, #6]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fa20 	bl	80090e4 <USBD_CtlPrepareRx>
      break;
 8007ca4:	e058      	b.n	8007d58 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	7850      	ldrb	r0, [r2, #1]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	4798      	blx	r3
      break;
 8007cb8:	e04e      	b.n	8007d58 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b0b      	cmp	r3, #11
 8007cc0:	d02e      	beq.n	8007d20 <USBD_CDC_Setup+0x104>
 8007cc2:	2b0b      	cmp	r3, #11
 8007cc4:	dc38      	bgt.n	8007d38 <USBD_CDC_Setup+0x11c>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <USBD_CDC_Setup+0xb4>
 8007cca:	2b0a      	cmp	r3, #10
 8007ccc:	d014      	beq.n	8007cf8 <USBD_CDC_Setup+0xdc>
 8007cce:	e033      	b.n	8007d38 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d107      	bne.n	8007cea <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007cda:	f107 030c 	add.w	r3, r7, #12
 8007cde:	2202      	movs	r2, #2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 f9d0 	bl	8009088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ce8:	e02e      	b.n	8007d48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 f961 	bl	8008fb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf6:	e027      	b.n	8007d48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d107      	bne.n	8007d12 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d02:	f107 030f 	add.w	r3, r7, #15
 8007d06:	2201      	movs	r2, #1
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 f9bc 	bl	8009088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d10:	e01a      	b.n	8007d48 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 f94d 	bl	8008fb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d1e:	e013      	b.n	8007d48 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d00d      	beq.n	8007d46 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 f941 	bl	8008fb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d32:	2302      	movs	r3, #2
 8007d34:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d36:	e006      	b.n	8007d46 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 f93a 	bl	8008fb4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d40:	2302      	movs	r3, #2
 8007d42:	75fb      	strb	r3, [r7, #23]
          break;
 8007d44:	e000      	b.n	8007d48 <USBD_CDC_Setup+0x12c>
          break;
 8007d46:	bf00      	nop
      }
      break;
 8007d48:	e006      	b.n	8007d58 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f931 	bl	8008fb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d52:	2302      	movs	r3, #2
 8007d54:	75fb      	strb	r3, [r7, #23]
      break;
 8007d56:	bf00      	nop
  }

  return ret;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d74:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d7c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d03a      	beq.n	8007dfe <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d88:	78fa      	ldrb	r2, [r7, #3]
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	331c      	adds	r3, #28
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d029      	beq.n	8007df2 <USBD_CDC_DataIn+0x90>
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	331c      	adds	r3, #28
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	78f9      	ldrb	r1, [r7, #3]
 8007db2:	68b8      	ldr	r0, [r7, #8]
 8007db4:	460b      	mov	r3, r1
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	4403      	add	r3, r0
 8007dbe:	3320      	adds	r3, #32
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dc6:	fb01 f303 	mul.w	r3, r1, r3
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d110      	bne.n	8007df2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007dd0:	78fa      	ldrb	r2, [r7, #3]
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	331c      	adds	r3, #28
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007de4:	78f9      	ldrb	r1, [r7, #3]
 8007de6:	2300      	movs	r3, #0
 8007de8:	2200      	movs	r2, #0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 fdda 	bl	80099a4 <USBD_LL_Transmit>
 8007df0:	e003      	b.n	8007dfa <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e000      	b.n	8007e00 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007dfe:	2302      	movs	r3, #2
  }
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fe05 	bl	8009a30 <USBD_LL_GetRxDataSize>
 8007e26:	4602      	mov	r2, r0
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00d      	beq.n	8007e54 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	4798      	blx	r3

    return USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e000      	b.n	8007e56 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e54:	2302      	movs	r3, #2
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d014      	beq.n	8007ea2 <USBD_CDC_EP0_RxReady+0x44>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e7e:	2bff      	cmp	r3, #255	@ 0xff
 8007e80:	d00f      	beq.n	8007ea2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007e90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	22ff      	movs	r2, #255	@ 0xff
 8007e9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2243      	movs	r2, #67	@ 0x43
 8007eb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007eba:	4b03      	ldr	r3, [pc, #12]	@ (8007ec8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	20000098 	.word	0x20000098

08007ecc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2243      	movs	r2, #67	@ 0x43
 8007ed8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007eda:	4b03      	ldr	r3, [pc, #12]	@ (8007ee8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000054 	.word	0x20000054

08007eec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2243      	movs	r2, #67	@ 0x43
 8007ef8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007efa:	4b03      	ldr	r3, [pc, #12]	@ (8007f08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	200000dc 	.word	0x200000dc

08007f0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	220a      	movs	r2, #10
 8007f18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f1a:	4b03      	ldr	r3, [pc, #12]	@ (8007f28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20000010 	.word	0x20000010

08007f2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f36:	2302      	movs	r3, #2
 8007f38:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bc80      	pop	{r7}
 8007f56:	4770      	bx	lr

08007f58 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f6c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f76:	88fa      	ldrh	r2, [r7, #6]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr

08007f8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr

08007fb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01c      	beq.n	8008004 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d115      	bne.n	8008000 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2181      	movs	r1, #129	@ 0x81
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fcd4 	bl	80099a4 <USBD_LL_Transmit>

      return USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e002      	b.n	8008006 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008000:	2301      	movs	r3, #1
 8008002:	e000      	b.n	8008006 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008004:	2302      	movs	r3, #2
  }
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800801c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008024:	2b00      	cmp	r3, #0
 8008026:	d017      	beq.n	8008058 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	7c1b      	ldrb	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008036:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800803a:	2101      	movs	r1, #1
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fcd4 	bl	80099ea <USBD_LL_PrepareReceive>
 8008042:	e007      	b.n	8008054 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800804a:	2340      	movs	r3, #64	@ 0x40
 800804c:	2101      	movs	r1, #1
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 fccb 	bl	80099ea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	e000      	b.n	800805a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008058:	2302      	movs	r3, #2
  }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	4613      	mov	r3, r2
 800806e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	e01a      	b.n	80080b0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	79fa      	ldrb	r2, [r7, #7]
 80080a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f001 fb39 	bl	8009720 <USBD_LL_Init>

  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d006      	beq.n	80080da <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
 80080d8:	e001      	b.n	80080de <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080da:	2302      	movs	r3, #2
 80080dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr

080080ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 fb6e 	bl	80097d4 <USBD_LL_Start>

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr

08008116 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b084      	sub	sp, #16
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008122:	2302      	movs	r3, #2
 8008124:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00c      	beq.n	800814a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	4611      	mov	r1, r2
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	4611      	mov	r1, r2
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fed8 	bl	8008f42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80081a0:	461a      	mov	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d016      	beq.n	80081e4 <USBD_LL_SetupStage+0x6a>
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d81c      	bhi.n	80081f4 <USBD_LL_SetupStage+0x7a>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <USBD_LL_SetupStage+0x4a>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d008      	beq.n	80081d4 <USBD_LL_SetupStage+0x5a>
 80081c2:	e017      	b.n	80081f4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f9cb 	bl	8008568 <USBD_StdDevReq>
      break;
 80081d2:	e01a      	b.n	800820a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fa2d 	bl	800863c <USBD_StdItfReq>
      break;
 80081e2:	e012      	b.n	800820a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa6d 	bl	80086cc <USBD_StdEPReq>
      break;
 80081f2:	e00a      	b.n	800820a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80081fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 fb46 	bl	8009894 <USBD_LL_StallEP>
      break;
 8008208:	bf00      	nop
  }

  return USBD_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	460b      	mov	r3, r1
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d14b      	bne.n	80082c0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800822e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008236:	2b03      	cmp	r3, #3
 8008238:	d134      	bne.n	80082a4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	429a      	cmp	r2, r3
 8008244:	d919      	bls.n	800827a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	1ad2      	subs	r2, r2, r3
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800825c:	429a      	cmp	r2, r3
 800825e:	d203      	bcs.n	8008268 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008264:	b29b      	uxth	r3, r3
 8008266:	e002      	b.n	800826e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800826c:	b29b      	uxth	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 ff54 	bl	8009120 <USBD_CtlContinueRx>
 8008278:	e038      	b.n	80082ec <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800828c:	2b03      	cmp	r3, #3
 800828e:	d105      	bne.n	800829c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 ff51 	bl	8009144 <USBD_CtlSendStatus>
 80082a2:	e023      	b.n	80082ec <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082aa:	2b05      	cmp	r3, #5
 80082ac:	d11e      	bne.n	80082ec <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80082b6:	2100      	movs	r1, #0
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f001 faeb 	bl	8009894 <USBD_LL_StallEP>
 80082be:	e015      	b.n	80082ec <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00d      	beq.n	80082e8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	d108      	bne.n	80082e8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	7afa      	ldrb	r2, [r7, #11]
 80082e0:	4611      	mov	r1, r2
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	4798      	blx	r3
 80082e6:	e001      	b.n	80082ec <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082e8:	2302      	movs	r3, #2
 80082ea:	e000      	b.n	80082ee <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b086      	sub	sp, #24
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	460b      	mov	r3, r1
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d17f      	bne.n	800840a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3314      	adds	r3, #20
 800830e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008316:	2b02      	cmp	r3, #2
 8008318:	d15c      	bne.n	80083d4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	429a      	cmp	r2, r3
 8008324:	d915      	bls.n	8008352 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	b29b      	uxth	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 febe 	bl	80090c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008344:	2300      	movs	r3, #0
 8008346:	2200      	movs	r2, #0
 8008348:	2100      	movs	r1, #0
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f001 fb4d 	bl	80099ea <USBD_LL_PrepareReceive>
 8008350:	e04e      	b.n	80083f0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	6912      	ldr	r2, [r2, #16]
 800835a:	fbb3 f1f2 	udiv	r1, r3, r2
 800835e:	fb01 f202 	mul.w	r2, r1, r2
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11c      	bne.n	80083a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008370:	429a      	cmp	r2, r3
 8008372:	d316      	bcc.n	80083a2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800837e:	429a      	cmp	r2, r3
 8008380:	d20f      	bcs.n	80083a2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008382:	2200      	movs	r2, #0
 8008384:	2100      	movs	r1, #0
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fe9a 	bl	80090c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f001 fb25 	bl	80099ea <USBD_LL_PrepareReceive>
 80083a0:	e026      	b.n	80083f0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d105      	bne.n	80083c4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083c4:	2180      	movs	r1, #128	@ 0x80
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f001 fa64 	bl	8009894 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fecc 	bl	800916a <USBD_CtlReceiveStatus>
 80083d2:	e00d      	b.n	80083f0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d004      	beq.n	80083e8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80083e8:	2180      	movs	r1, #128	@ 0x80
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f001 fa52 	bl	8009894 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d11d      	bne.n	8008436 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f7ff fe81 	bl	8008102 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008408:	e015      	b.n	8008436 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00d      	beq.n	8008432 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800841c:	2b03      	cmp	r3, #3
 800841e:	d108      	bne.n	8008432 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	7afa      	ldrb	r2, [r7, #11]
 800842a:	4611      	mov	r1, r2
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	4798      	blx	r3
 8008430:	e001      	b.n	8008436 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008432:	2302      	movs	r3, #2
 8008434:	e000      	b.n	8008438 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008448:	2340      	movs	r3, #64	@ 0x40
 800844a:	2200      	movs	r2, #0
 800844c:	2100      	movs	r1, #0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 f9db 	bl	800980a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2240      	movs	r2, #64	@ 0x40
 8008460:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008464:	2340      	movs	r3, #64	@ 0x40
 8008466:	2200      	movs	r2, #0
 8008468:	2180      	movs	r1, #128	@ 0x80
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 f9cd 	bl	800980a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2240      	movs	r2, #64	@ 0x40
 800847a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d009      	beq.n	80084b8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6852      	ldr	r2, [r2, #4]
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	4611      	mov	r1, r2
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
  }

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	460b      	mov	r3, r1
 80084cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2204      	movs	r2, #4
 80084f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr

08008508 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008516:	2b04      	cmp	r3, #4
 8008518:	d105      	bne.n	8008526 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008540:	2b03      	cmp	r3, #3
 8008542:	d10b      	bne.n	800855c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800857e:	2b40      	cmp	r3, #64	@ 0x40
 8008580:	d005      	beq.n	800858e <USBD_StdDevReq+0x26>
 8008582:	2b40      	cmp	r3, #64	@ 0x40
 8008584:	d84f      	bhi.n	8008626 <USBD_StdDevReq+0xbe>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <USBD_StdDevReq+0x36>
 800858a:	2b20      	cmp	r3, #32
 800858c:	d14b      	bne.n	8008626 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	4798      	blx	r3
      break;
 800859c:	e048      	b.n	8008630 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	2b09      	cmp	r3, #9
 80085a4:	d839      	bhi.n	800861a <USBD_StdDevReq+0xb2>
 80085a6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <USBD_StdDevReq+0x44>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085fd 	.word	0x080085fd
 80085b0:	08008611 	.word	0x08008611
 80085b4:	0800861b 	.word	0x0800861b
 80085b8:	08008607 	.word	0x08008607
 80085bc:	0800861b 	.word	0x0800861b
 80085c0:	080085df 	.word	0x080085df
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	0800861b 	.word	0x0800861b
 80085cc:	080085f3 	.word	0x080085f3
 80085d0:	080085e9 	.word	0x080085e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f9dc 	bl	8008994 <USBD_GetDescriptor>
          break;
 80085dc:	e022      	b.n	8008624 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fb3f 	bl	8008c64 <USBD_SetAddress>
          break;
 80085e6:	e01d      	b.n	8008624 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fb7e 	bl	8008cec <USBD_SetConfig>
          break;
 80085f0:	e018      	b.n	8008624 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fc07 	bl	8008e08 <USBD_GetConfig>
          break;
 80085fa:	e013      	b.n	8008624 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fc37 	bl	8008e72 <USBD_GetStatus>
          break;
 8008604:	e00e      	b.n	8008624 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fc65 	bl	8008ed8 <USBD_SetFeature>
          break;
 800860e:	e009      	b.n	8008624 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fc74 	bl	8008f00 <USBD_ClrFeature>
          break;
 8008618:	e004      	b.n	8008624 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fcc9 	bl	8008fb4 <USBD_CtlError>
          break;
 8008622:	bf00      	nop
      }
      break;
 8008624:	e004      	b.n	8008630 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fcc3 	bl	8008fb4 <USBD_CtlError>
      break;
 800862e:	bf00      	nop
  }

  return ret;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop

0800863c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008652:	2b40      	cmp	r3, #64	@ 0x40
 8008654:	d005      	beq.n	8008662 <USBD_StdItfReq+0x26>
 8008656:	2b40      	cmp	r3, #64	@ 0x40
 8008658:	d82e      	bhi.n	80086b8 <USBD_StdItfReq+0x7c>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <USBD_StdItfReq+0x26>
 800865e:	2b20      	cmp	r3, #32
 8008660:	d12a      	bne.n	80086b8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008668:	3b01      	subs	r3, #1
 800866a:	2b02      	cmp	r3, #2
 800866c:	d81d      	bhi.n	80086aa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	889b      	ldrh	r3, [r3, #4]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b01      	cmp	r3, #1
 8008676:	d813      	bhi.n	80086a0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	88db      	ldrh	r3, [r3, #6]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d110      	bne.n	80086b4 <USBD_StdItfReq+0x78>
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10d      	bne.n	80086b4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fd53 	bl	8009144 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800869e:	e009      	b.n	80086b4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fc86 	bl	8008fb4 <USBD_CtlError>
          break;
 80086a8:	e004      	b.n	80086b4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fc81 	bl	8008fb4 <USBD_CtlError>
          break;
 80086b2:	e000      	b.n	80086b6 <USBD_StdItfReq+0x7a>
          break;
 80086b4:	bf00      	nop
      }
      break;
 80086b6:	e004      	b.n	80086c2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fc7a 	bl	8008fb4 <USBD_CtlError>
      break;
 80086c0:	bf00      	nop
  }

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	889b      	ldrh	r3, [r3, #4]
 80086de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086e8:	2b40      	cmp	r3, #64	@ 0x40
 80086ea:	d007      	beq.n	80086fc <USBD_StdEPReq+0x30>
 80086ec:	2b40      	cmp	r3, #64	@ 0x40
 80086ee:	f200 8146 	bhi.w	800897e <USBD_StdEPReq+0x2b2>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <USBD_StdEPReq+0x40>
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	f040 8141 	bne.w	800897e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
      break;
 800870a:	e13d      	b.n	8008988 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008714:	2b20      	cmp	r3, #32
 8008716:	d10a      	bne.n	800872e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
 8008726:	4603      	mov	r3, r0
 8008728:	73fb      	strb	r3, [r7, #15]

        return ret;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	e12d      	b.n	800898a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d007      	beq.n	8008746 <USBD_StdEPReq+0x7a>
 8008736:	2b03      	cmp	r3, #3
 8008738:	f300 811b 	bgt.w	8008972 <USBD_StdEPReq+0x2a6>
 800873c:	2b00      	cmp	r3, #0
 800873e:	d072      	beq.n	8008826 <USBD_StdEPReq+0x15a>
 8008740:	2b01      	cmp	r3, #1
 8008742:	d03a      	beq.n	80087ba <USBD_StdEPReq+0xee>
 8008744:	e115      	b.n	8008972 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800874c:	2b02      	cmp	r3, #2
 800874e:	d002      	beq.n	8008756 <USBD_StdEPReq+0x8a>
 8008750:	2b03      	cmp	r3, #3
 8008752:	d015      	beq.n	8008780 <USBD_StdEPReq+0xb4>
 8008754:	e02b      	b.n	80087ae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00c      	beq.n	8008776 <USBD_StdEPReq+0xaa>
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b80      	cmp	r3, #128	@ 0x80
 8008760:	d009      	beq.n	8008776 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 f894 	bl	8009894 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800876c:	2180      	movs	r1, #128	@ 0x80
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 f890 	bl	8009894 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008774:	e020      	b.n	80087b8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fc1b 	bl	8008fb4 <USBD_CtlError>
              break;
 800877e:	e01b      	b.n	80087b8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	885b      	ldrh	r3, [r3, #2]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10e      	bne.n	80087a6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <USBD_StdEPReq+0xda>
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	2b80      	cmp	r3, #128	@ 0x80
 8008792:	d008      	beq.n	80087a6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	88db      	ldrh	r3, [r3, #6]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f877 	bl	8009894 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fccc 	bl	8009144 <USBD_CtlSendStatus>

              break;
 80087ac:	e004      	b.n	80087b8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fbff 	bl	8008fb4 <USBD_CtlError>
              break;
 80087b6:	bf00      	nop
          }
          break;
 80087b8:	e0e0      	b.n	800897c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d002      	beq.n	80087ca <USBD_StdEPReq+0xfe>
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d015      	beq.n	80087f4 <USBD_StdEPReq+0x128>
 80087c8:	e026      	b.n	8008818 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00c      	beq.n	80087ea <USBD_StdEPReq+0x11e>
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
 80087d2:	2b80      	cmp	r3, #128	@ 0x80
 80087d4:	d009      	beq.n	80087ea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 f85a 	bl	8009894 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087e0:	2180      	movs	r1, #128	@ 0x80
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 f856 	bl	8009894 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087e8:	e01c      	b.n	8008824 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fbe1 	bl	8008fb4 <USBD_CtlError>
              break;
 80087f2:	e017      	b.n	8008824 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	885b      	ldrh	r3, [r3, #2]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d112      	bne.n	8008822 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008802:	2b00      	cmp	r3, #0
 8008804:	d004      	beq.n	8008810 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008806:	7bbb      	ldrb	r3, [r7, #14]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 f861 	bl	80098d2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fc97 	bl	8009144 <USBD_CtlSendStatus>
              }
              break;
 8008816:	e004      	b.n	8008822 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fbca 	bl	8008fb4 <USBD_CtlError>
              break;
 8008820:	e000      	b.n	8008824 <USBD_StdEPReq+0x158>
              break;
 8008822:	bf00      	nop
          }
          break;
 8008824:	e0aa      	b.n	800897c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800882c:	2b02      	cmp	r3, #2
 800882e:	d002      	beq.n	8008836 <USBD_StdEPReq+0x16a>
 8008830:	2b03      	cmp	r3, #3
 8008832:	d032      	beq.n	800889a <USBD_StdEPReq+0x1ce>
 8008834:	e097      	b.n	8008966 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <USBD_StdEPReq+0x180>
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	2b80      	cmp	r3, #128	@ 0x80
 8008840:	d004      	beq.n	800884c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fbb5 	bl	8008fb4 <USBD_CtlError>
                break;
 800884a:	e091      	b.n	8008970 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800884c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008850:	2b00      	cmp	r3, #0
 8008852:	da0b      	bge.n	800886c <USBD_StdEPReq+0x1a0>
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800885a:	4613      	mov	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	3310      	adds	r3, #16
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	4413      	add	r3, r2
 8008868:	3304      	adds	r3, #4
 800886a:	e00b      	b.n	8008884 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	4413      	add	r3, r2
 8008882:	3304      	adds	r3, #4
 8008884:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2202      	movs	r2, #2
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fbf8 	bl	8009088 <USBD_CtlSendData>
              break;
 8008898:	e06a      	b.n	8008970 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800889a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da11      	bge.n	80088c6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	f003 020f 	and.w	r2, r3, #15
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3318      	adds	r3, #24
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d117      	bne.n	80088ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fb78 	bl	8008fb4 <USBD_CtlError>
                  break;
 80088c4:	e054      	b.n	8008970 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fb65 	bl	8008fb4 <USBD_CtlError>
                  break;
 80088ea:	e041      	b.n	8008970 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da0b      	bge.n	800890c <USBD_StdEPReq+0x240>
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	3310      	adds	r3, #16
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	4413      	add	r3, r2
 8008908:	3304      	adds	r3, #4
 800890a:	e00b      	b.n	8008924 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	4413      	add	r3, r2
 8008922:	3304      	adds	r3, #4
 8008924:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <USBD_StdEPReq+0x266>
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b80      	cmp	r3, #128	@ 0x80
 8008930:	d103      	bne.n	800893a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	e00e      	b.n	8008958 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 ffe6 	bl	8009910 <USBD_LL_IsStallEP>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e002      	b.n	8008958 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2202      	movs	r2, #2
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fb92 	bl	8009088 <USBD_CtlSendData>
              break;
 8008964:	e004      	b.n	8008970 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb23 	bl	8008fb4 <USBD_CtlError>
              break;
 800896e:	bf00      	nop
          }
          break;
 8008970:	e004      	b.n	800897c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fb1d 	bl	8008fb4 <USBD_CtlError>
          break;
 800897a:	bf00      	nop
      }
      break;
 800897c:	e004      	b.n	8008988 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb17 	bl	8008fb4 <USBD_CtlError>
      break;
 8008986:	bf00      	nop
  }

  return ret;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b06      	cmp	r3, #6
 80089b6:	f200 8128 	bhi.w	8008c0a <USBD_GetDescriptor+0x276>
 80089ba:	a201      	add	r2, pc, #4	@ (adr r2, 80089c0 <USBD_GetDescriptor+0x2c>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089dd 	.word	0x080089dd
 80089c4:	080089f5 	.word	0x080089f5
 80089c8:	08008a35 	.word	0x08008a35
 80089cc:	08008c0b 	.word	0x08008c0b
 80089d0:	08008c0b 	.word	0x08008c0b
 80089d4:	08008bab 	.word	0x08008bab
 80089d8:	08008bd7 	.word	0x08008bd7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7c12      	ldrb	r2, [r2, #16]
 80089e8:	f107 0108 	add.w	r1, r7, #8
 80089ec:	4610      	mov	r0, r2
 80089ee:	4798      	blx	r3
 80089f0:	60f8      	str	r0, [r7, #12]
      break;
 80089f2:	e112      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7c1b      	ldrb	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10d      	bne.n	8008a18 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a04:	f107 0208 	add.w	r2, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3301      	adds	r3, #1
 8008a12:	2202      	movs	r2, #2
 8008a14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a16:	e100      	b.n	8008c1a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	f107 0208 	add.w	r2, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	2202      	movs	r2, #2
 8008a30:	701a      	strb	r2, [r3, #0]
      break;
 8008a32:	e0f2      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	885b      	ldrh	r3, [r3, #2]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b05      	cmp	r3, #5
 8008a3c:	f200 80ac 	bhi.w	8008b98 <USBD_GetDescriptor+0x204>
 8008a40:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <USBD_GetDescriptor+0xb4>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a95 	.word	0x08008a95
 8008a50:	08008ac9 	.word	0x08008ac9
 8008a54:	08008afd 	.word	0x08008afd
 8008a58:	08008b31 	.word	0x08008b31
 8008a5c:	08008b65 	.word	0x08008b65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7c12      	ldrb	r2, [r2, #16]
 8008a78:	f107 0108 	add.w	r1, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a82:	e091      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa94 	bl	8008fb4 <USBD_CtlError>
            err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
          break;
 8008a92:	e089      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7c12      	ldrb	r2, [r2, #16]
 8008aac:	f107 0108 	add.w	r1, r7, #8
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab6:	e077      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa7a 	bl	8008fb4 <USBD_CtlError>
            err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac6:	e06f      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7c12      	ldrb	r2, [r2, #16]
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aea:	e05d      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa60 	bl	8008fb4 <USBD_CtlError>
            err++;
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	3301      	adds	r3, #1
 8008af8:	72fb      	strb	r3, [r7, #11]
          break;
 8008afa:	e055      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	7c12      	ldrb	r2, [r2, #16]
 8008b14:	f107 0108 	add.w	r1, r7, #8
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4798      	blx	r3
 8008b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b1e:	e043      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fa46 	bl	8008fb4 <USBD_CtlError>
            err++;
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b2e:	e03b      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00b      	beq.n	8008b54 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	7c12      	ldrb	r2, [r2, #16]
 8008b48:	f107 0108 	add.w	r1, r7, #8
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4798      	blx	r3
 8008b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b52:	e029      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa2c 	bl	8008fb4 <USBD_CtlError>
            err++;
 8008b5c:	7afb      	ldrb	r3, [r7, #11]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	72fb      	strb	r3, [r7, #11]
          break;
 8008b62:	e021      	b.n	8008ba8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	7c12      	ldrb	r2, [r2, #16]
 8008b7c:	f107 0108 	add.w	r1, r7, #8
 8008b80:	4610      	mov	r0, r2
 8008b82:	4798      	blx	r3
 8008b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b86:	e00f      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa12 	bl	8008fb4 <USBD_CtlError>
            err++;
 8008b90:	7afb      	ldrb	r3, [r7, #11]
 8008b92:	3301      	adds	r3, #1
 8008b94:	72fb      	strb	r3, [r7, #11]
          break;
 8008b96:	e007      	b.n	8008ba8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa0a 	bl	8008fb4 <USBD_CtlError>
          err++;
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008ba6:	e038      	b.n	8008c1a <USBD_GetDescriptor+0x286>
 8008ba8:	e037      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7c1b      	ldrb	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bba:	f107 0208 	add.w	r2, r7, #8
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4798      	blx	r3
 8008bc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bc4:	e029      	b.n	8008c1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f9f3 	bl	8008fb4 <USBD_CtlError>
        err++;
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8008bd4:	e021      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7c1b      	ldrb	r3, [r3, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10d      	bne.n	8008bfa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be6:	f107 0208 	add.w	r2, r7, #8
 8008bea:	4610      	mov	r0, r2
 8008bec:	4798      	blx	r3
 8008bee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	2207      	movs	r2, #7
 8008bf6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bf8:	e00f      	b.n	8008c1a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f9d9 	bl	8008fb4 <USBD_CtlError>
        err++;
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	3301      	adds	r3, #1
 8008c06:	72fb      	strb	r3, [r7, #11]
      break;
 8008c08:	e007      	b.n	8008c1a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f9d1 	bl	8008fb4 <USBD_CtlError>
      err++;
 8008c12:	7afb      	ldrb	r3, [r7, #11]
 8008c14:	3301      	adds	r3, #1
 8008c16:	72fb      	strb	r3, [r7, #11]
      break;
 8008c18:	bf00      	nop
  }

  if (err != 0U)
 8008c1a:	7afb      	ldrb	r3, [r7, #11]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d11c      	bne.n	8008c5a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c20:	893b      	ldrh	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d011      	beq.n	8008c4a <USBD_GetDescriptor+0x2b6>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88db      	ldrh	r3, [r3, #6]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00d      	beq.n	8008c4a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	88da      	ldrh	r2, [r3, #6]
 8008c32:	893b      	ldrh	r3, [r7, #8]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	bf28      	it	cs
 8008c38:	4613      	movcs	r3, r2
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c3e:	893b      	ldrh	r3, [r7, #8]
 8008c40:	461a      	mov	r2, r3
 8008c42:	68f9      	ldr	r1, [r7, #12]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fa1f 	bl	8009088 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	88db      	ldrh	r3, [r3, #6]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa76 	bl	8009144 <USBD_CtlSendStatus>
 8008c58:	e000      	b.n	8008c5c <USBD_GetDescriptor+0x2c8>
    return;
 8008c5a:	bf00      	nop
    }
  }
}
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop

08008c64 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	889b      	ldrh	r3, [r3, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d130      	bne.n	8008cd8 <USBD_SetAddress+0x74>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	88db      	ldrh	r3, [r3, #6]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d12c      	bne.n	8008cd8 <USBD_SetAddress+0x74>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	885b      	ldrh	r3, [r3, #2]
 8008c82:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c84:	d828      	bhi.n	8008cd8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	885b      	ldrh	r3, [r3, #2]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d104      	bne.n	8008ca6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f988 	bl	8008fb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca4:	e01d      	b.n	8008ce2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	7bfa      	ldrb	r2, [r7, #15]
 8008caa:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fe57 	bl	8009966 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fa43 	bl	8009144 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ccc:	e009      	b.n	8008ce2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd6:	e004      	b.n	8008ce2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f96a 	bl	8008fb4 <USBD_CtlError>
  }
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	4b41      	ldr	r3, [pc, #260]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008cfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d00:	4b40      	ldr	r3, [pc, #256]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d904      	bls.n	8008d12 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f952 	bl	8008fb4 <USBD_CtlError>
 8008d10:	e075      	b.n	8008dfe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d002      	beq.n	8008d22 <USBD_SetConfig+0x36>
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d023      	beq.n	8008d68 <USBD_SetConfig+0x7c>
 8008d20:	e062      	b.n	8008de8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d22:	4b38      	ldr	r3, [pc, #224]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01a      	beq.n	8008d60 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d2a:	4b36      	ldr	r3, [pc, #216]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2203      	movs	r2, #3
 8008d38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d3c:	4b31      	ldr	r3, [pc, #196]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff f9e7 	bl	8008116 <USBD_SetClassConfig>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d104      	bne.n	8008d58 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f92f 	bl	8008fb4 <USBD_CtlError>
            return;
 8008d56:	e052      	b.n	8008dfe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f9f3 	bl	8009144 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d5e:	e04e      	b.n	8008dfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9ef 	bl	8009144 <USBD_CtlSendStatus>
        break;
 8008d66:	e04a      	b.n	8008dfe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008d68:	4b26      	ldr	r3, [pc, #152]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d112      	bne.n	8008d96 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008d78:	4b22      	ldr	r3, [pc, #136]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008d82:	4b20      	ldr	r3, [pc, #128]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff f9e3 	bl	8008154 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9d8 	bl	8009144 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d94:	e033      	b.n	8008dfe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008d96:	4b1b      	ldr	r3, [pc, #108]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d01d      	beq.n	8008de0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff f9d1 	bl	8008154 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008db2:	4b14      	ldr	r3, [pc, #80]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dbc:	4b11      	ldr	r3, [pc, #68]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff f9a7 	bl	8008116 <USBD_SetClassConfig>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d104      	bne.n	8008dd8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f8ef 	bl	8008fb4 <USBD_CtlError>
            return;
 8008dd6:	e012      	b.n	8008dfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f9b3 	bl	8009144 <USBD_CtlSendStatus>
        break;
 8008dde:	e00e      	b.n	8008dfe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f9af 	bl	8009144 <USBD_CtlSendStatus>
        break;
 8008de6:	e00a      	b.n	8008dfe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f8e2 	bl	8008fb4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008df0:	4b04      	ldr	r3, [pc, #16]	@ (8008e04 <USBD_SetConfig+0x118>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff f9ac 	bl	8008154 <USBD_ClrClassConfig>
        break;
 8008dfc:	bf00      	nop
    }
  }
}
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	200002fc 	.word	0x200002fc

08008e08 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	88db      	ldrh	r3, [r3, #6]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d004      	beq.n	8008e24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f8c9 	bl	8008fb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e22:	e022      	b.n	8008e6a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	dc02      	bgt.n	8008e34 <USBD_GetConfig+0x2c>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	dc03      	bgt.n	8008e3a <USBD_GetConfig+0x32>
 8008e32:	e015      	b.n	8008e60 <USBD_GetConfig+0x58>
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetConfig+0x48>
 8008e38:	e012      	b.n	8008e60 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3308      	adds	r3, #8
 8008e44:	2201      	movs	r2, #1
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f91d 	bl	8009088 <USBD_CtlSendData>
        break;
 8008e4e:	e00c      	b.n	8008e6a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	3304      	adds	r3, #4
 8008e54:	2201      	movs	r2, #1
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f915 	bl	8009088 <USBD_CtlSendData>
        break;
 8008e5e:	e004      	b.n	8008e6a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f8a6 	bl	8008fb4 <USBD_CtlError>
        break;
 8008e68:	bf00      	nop
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e82:	3b01      	subs	r3, #1
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d81e      	bhi.n	8008ec6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	88db      	ldrh	r3, [r3, #6]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d004      	beq.n	8008e9a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f88e 	bl	8008fb4 <USBD_CtlError>
        break;
 8008e98:	e01a      	b.n	8008ed0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d005      	beq.n	8008eb6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f043 0202 	orr.w	r2, r3, #2
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	2202      	movs	r2, #2
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f8e2 	bl	8009088 <USBD_CtlSendData>
      break;
 8008ec4:	e004      	b.n	8008ed0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f873 	bl	8008fb4 <USBD_CtlError>
      break;
 8008ece:	bf00      	nop
  }
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	885b      	ldrh	r3, [r3, #2]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d106      	bne.n	8008ef8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f926 	bl	8009144 <USBD_CtlSendStatus>
  }
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d80b      	bhi.n	8008f2e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	885b      	ldrh	r3, [r3, #2]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d10c      	bne.n	8008f38 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f90c 	bl	8009144 <USBD_CtlSendStatus>
      }
      break;
 8008f2c:	e004      	b.n	8008f38 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f83f 	bl	8008fb4 <USBD_CtlError>
      break;
 8008f36:	e000      	b.n	8008f3a <USBD_ClrFeature+0x3a>
      break;
 8008f38:	bf00      	nop
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	785a      	ldrb	r2, [r3, #1]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	3302      	adds	r3, #2
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	3303      	adds	r3, #3
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	3305      	adds	r3, #5
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	021b      	lsls	r3, r3, #8
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	4413      	add	r3, r2
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	3306      	adds	r3, #6
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	3307      	adds	r3, #7
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	021b      	lsls	r3, r3, #8
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	80da      	strh	r2, [r3, #6]

}
 8008faa:	bf00      	nop
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr

08008fb4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008fbe:	2180      	movs	r1, #128	@ 0x80
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fc67 	bl	8009894 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fc63 	bl	8009894 <USBD_LL_StallEP>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d032      	beq.n	8009052 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f000 f834 	bl	800905a <USBD_GetLen>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	75fa      	strb	r2, [r7, #23]
 8009006:	461a      	mov	r2, r3
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7812      	ldrb	r2, [r2, #0]
 8009010:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	75fa      	strb	r2, [r7, #23]
 8009018:	461a      	mov	r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	2203      	movs	r2, #3
 8009020:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009022:	e012      	b.n	800904a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	60fa      	str	r2, [r7, #12]
 800902a:	7dfa      	ldrb	r2, [r7, #23]
 800902c:	1c51      	adds	r1, r2, #1
 800902e:	75f9      	strb	r1, [r7, #23]
 8009030:	4611      	mov	r1, r2
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	440a      	add	r2, r1
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	75fa      	strb	r2, [r7, #23]
 8009040:	461a      	mov	r2, r3
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	4413      	add	r3, r2
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e8      	bne.n	8009024 <USBD_GetString+0x4e>
    }
  }
}
 8009052:	bf00      	nop
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009066:	e005      	b.n	8009074 <USBD_GetLen+0x1a>
  {
    len++;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	3301      	adds	r3, #1
 800906c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3301      	adds	r3, #1
 8009072:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1f5      	bne.n	8009068 <USBD_GetLen+0xe>
  }

  return len;
 800907c:	7bfb      	ldrb	r3, [r7, #15]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	bc80      	pop	{r7}
 8009086:	4770      	bx	lr

08009088 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2202      	movs	r2, #2
 800909a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800909e:	88fa      	ldrh	r2, [r7, #6]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80090a4:	88fa      	ldrh	r2, [r7, #6]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	2100      	movs	r1, #0
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fc77 	bl	80099a4 <USBD_LL_Transmit>

  return USBD_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090ce:	88fb      	ldrh	r3, [r7, #6]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	2100      	movs	r1, #0
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fc65 	bl	80099a4 <USBD_LL_Transmit>

  return USBD_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2203      	movs	r2, #3
 80090f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	2100      	movs	r1, #0
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fc6a 	bl	80099ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	2100      	movs	r1, #0
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fc58 	bl	80099ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2204      	movs	r2, #4
 8009150:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009154:	2300      	movs	r3, #0
 8009156:	2200      	movs	r2, #0
 8009158:	2100      	movs	r1, #0
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc22 	bl	80099a4 <USBD_LL_Transmit>

  return USBD_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2205      	movs	r2, #5
 8009176:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800917a:	2300      	movs	r3, #0
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fc32 	bl	80099ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009194:	2200      	movs	r2, #0
 8009196:	4912      	ldr	r1, [pc, #72]	@ (80091e0 <MX_USB_DEVICE_Init+0x50>)
 8009198:	4812      	ldr	r0, [pc, #72]	@ (80091e4 <MX_USB_DEVICE_Init+0x54>)
 800919a:	f7fe ff62 	bl	8008062 <USBD_Init>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();  // USB başlatılamadı, hata işleyiciye yönlendirin
 80091a4:	f7f8 f8f8 	bl	8001398 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091a8:	490f      	ldr	r1, [pc, #60]	@ (80091e8 <MX_USB_DEVICE_Init+0x58>)
 80091aa:	480e      	ldr	r0, [pc, #56]	@ (80091e4 <MX_USB_DEVICE_Init+0x54>)
 80091ac:	f7fe ff84 	bl	80080b8 <USBD_RegisterClass>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091b6:	f7f8 f8ef 	bl	8001398 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091ba:	490c      	ldr	r1, [pc, #48]	@ (80091ec <MX_USB_DEVICE_Init+0x5c>)
 80091bc:	4809      	ldr	r0, [pc, #36]	@ (80091e4 <MX_USB_DEVICE_Init+0x54>)
 80091be:	f7fe feb5 	bl	8007f2c <USBD_CDC_RegisterInterface>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091c8:	f7f8 f8e6 	bl	8001398 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091cc:	4805      	ldr	r0, [pc, #20]	@ (80091e4 <MX_USB_DEVICE_Init+0x54>)
 80091ce:	f7fe ff8c 	bl	80080ea <USBD_Start>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091d8:	f7f8 f8de 	bl	8001398 <Error_Handler>
  }

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091dc:	bf00      	nop
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20000130 	.word	0x20000130
 80091e4:	20000300 	.word	0x20000300
 80091e8:	2000001c 	.word	0x2000001c
 80091ec:	20000120 	.word	0x20000120

080091f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091f4:	2200      	movs	r2, #0
 80091f6:	4905      	ldr	r1, [pc, #20]	@ (800920c <CDC_Init_FS+0x1c>)
 80091f8:	4805      	ldr	r0, [pc, #20]	@ (8009210 <CDC_Init_FS+0x20>)
 80091fa:	f7fe fead 	bl	8007f58 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091fe:	4905      	ldr	r1, [pc, #20]	@ (8009214 <CDC_Init_FS+0x24>)
 8009200:	4803      	ldr	r0, [pc, #12]	@ (8009210 <CDC_Init_FS+0x20>)
 8009202:	f7fe fec2 	bl	8007f8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009206:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009208:	4618      	mov	r0, r3
 800920a:	bd80      	pop	{r7, pc}
 800920c:	200009c4 	.word	0x200009c4
 8009210:	20000300 	.word	0x20000300
 8009214:	200005c4 	.word	0x200005c4

08009218 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800921c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800921e:	4618      	mov	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	bc80      	pop	{r7}
 8009224:	4770      	bx	lr
	...

08009228 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	71fb      	strb	r3, [r7, #7]
 8009234:	4613      	mov	r3, r2
 8009236:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b23      	cmp	r3, #35	@ 0x23
 800923c:	d84a      	bhi.n	80092d4 <CDC_Control_FS+0xac>
 800923e:	a201      	add	r2, pc, #4	@ (adr r2, 8009244 <CDC_Control_FS+0x1c>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	080092d5 	.word	0x080092d5
 8009248:	080092d5 	.word	0x080092d5
 800924c:	080092d5 	.word	0x080092d5
 8009250:	080092d5 	.word	0x080092d5
 8009254:	080092d5 	.word	0x080092d5
 8009258:	080092d5 	.word	0x080092d5
 800925c:	080092d5 	.word	0x080092d5
 8009260:	080092d5 	.word	0x080092d5
 8009264:	080092d5 	.word	0x080092d5
 8009268:	080092d5 	.word	0x080092d5
 800926c:	080092d5 	.word	0x080092d5
 8009270:	080092d5 	.word	0x080092d5
 8009274:	080092d5 	.word	0x080092d5
 8009278:	080092d5 	.word	0x080092d5
 800927c:	080092d5 	.word	0x080092d5
 8009280:	080092d5 	.word	0x080092d5
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080092d5 	.word	0x080092d5
 800928c:	080092d5 	.word	0x080092d5
 8009290:	080092d5 	.word	0x080092d5
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092d5 	.word	0x080092d5
 800929c:	080092d5 	.word	0x080092d5
 80092a0:	080092d5 	.word	0x080092d5
 80092a4:	080092d5 	.word	0x080092d5
 80092a8:	080092d5 	.word	0x080092d5
 80092ac:	080092d5 	.word	0x080092d5
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080092d5 	.word	0x080092d5
 80092b8:	080092d5 	.word	0x080092d5
 80092bc:	080092d5 	.word	0x080092d5
 80092c0:	080092d5 	.word	0x080092d5
 80092c4:	080092d5 	.word	0x080092d5
 80092c8:	080092d5 	.word	0x080092d5
 80092cc:	080092d5 	.word	0x080092d5
 80092d0:	080092d5 	.word	0x080092d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092d4:	bf00      	nop
  }

  return (USBD_OK);
 80092d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop

080092e4 <CDC_Receive_FS>:
  *
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len) {
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
    memcpy(RxBuffer, Buf, *Len);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	480d      	ldr	r0, [pc, #52]	@ (800932c <CDC_Receive_FS+0x48>)
 80092f8:	f000 fc26 	bl	8009b48 <memcpy>
    RxBuffer[*Len] = '\0'; // Sonlandırıcı ekle
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a0a      	ldr	r2, [pc, #40]	@ (800932c <CDC_Receive_FS+0x48>)
 8009302:	2100      	movs	r1, #0
 8009304:	54d1      	strb	r1, [r2, r3]
    processReceivedData(); // Gelen veriyi işleyen fonksiyon
 8009306:	f7f7 ff45 	bl	8001194 <processReceivedData>
    memset(RxBuffer, 0, sizeof(RxBuffer)); // Buffer'ı sıfırla
 800930a:	220a      	movs	r2, #10
 800930c:	2100      	movs	r1, #0
 800930e:	4807      	ldr	r0, [pc, #28]	@ (800932c <CDC_Receive_FS+0x48>)
 8009310:	f000 fbee 	bl	8009af0 <memset>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	4806      	ldr	r0, [pc, #24]	@ (8009330 <CDC_Receive_FS+0x4c>)
 8009318:	f7fe fe37 	bl	8007f8a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800931c:	4804      	ldr	r0, [pc, #16]	@ (8009330 <CDC_Receive_FS+0x4c>)
 800931e:	f7fe fe76 	bl	800800e <USBD_CDC_ReceivePacket>
    return (USBD_OK);
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	2000028c 	.word	0x2000028c
 8009330:	20000300 	.word	0x20000300

08009334 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009344:	4b0d      	ldr	r3, [pc, #52]	@ (800937c <CDC_Transmit_FS+0x48>)
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800934a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009356:	2301      	movs	r3, #1
 8009358:	e00b      	b.n	8009372 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800935a:	887b      	ldrh	r3, [r7, #2]
 800935c:	461a      	mov	r2, r3
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4806      	ldr	r0, [pc, #24]	@ (800937c <CDC_Transmit_FS+0x48>)
 8009362:	f7fe fdf9 	bl	8007f58 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009366:	4805      	ldr	r0, [pc, #20]	@ (800937c <CDC_Transmit_FS+0x48>)
 8009368:	f7fe fe22 	bl	8007fb0 <USBD_CDC_TransmitPacket>
 800936c:	4603      	mov	r3, r0
 800936e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000300 	.word	0x20000300

08009380 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2212      	movs	r2, #18
 8009390:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009392:	4b03      	ldr	r3, [pc, #12]	@ (80093a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	2000014c 	.word	0x2000014c

080093a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2204      	movs	r2, #4
 80093b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093b6:	4b03      	ldr	r3, [pc, #12]	@ (80093c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	20000160 	.word	0x20000160

080093c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d105      	bne.n	80093e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4907      	ldr	r1, [pc, #28]	@ (80093fc <USBD_FS_ProductStrDescriptor+0x34>)
 80093de:	4808      	ldr	r0, [pc, #32]	@ (8009400 <USBD_FS_ProductStrDescriptor+0x38>)
 80093e0:	f7ff fdf9 	bl	8008fd6 <USBD_GetString>
 80093e4:	e004      	b.n	80093f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	4904      	ldr	r1, [pc, #16]	@ (80093fc <USBD_FS_ProductStrDescriptor+0x34>)
 80093ea:	4805      	ldr	r0, [pc, #20]	@ (8009400 <USBD_FS_ProductStrDescriptor+0x38>)
 80093ec:	f7ff fdf3 	bl	8008fd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093f0:	4b02      	ldr	r3, [pc, #8]	@ (80093fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000dc4 	.word	0x20000dc4
 8009400:	0800ab28 	.word	0x0800ab28

08009404 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	6039      	str	r1, [r7, #0]
 800940e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	4904      	ldr	r1, [pc, #16]	@ (8009424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009414:	4804      	ldr	r0, [pc, #16]	@ (8009428 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009416:	f7ff fdde 	bl	8008fd6 <USBD_GetString>
  return USBD_StrDesc;
 800941a:	4b02      	ldr	r3, [pc, #8]	@ (8009424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20000dc4 	.word	0x20000dc4
 8009428:	0800ab64 	.word	0x0800ab64

0800942c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	6039      	str	r1, [r7, #0]
 8009436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	221a      	movs	r2, #26
 800943c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800943e:	f000 f843 	bl	80094c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009442:	4b02      	ldr	r3, [pc, #8]	@ (800944c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	20000164 	.word	0x20000164

08009450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	4603      	mov	r3, r0
 8009458:	6039      	str	r1, [r7, #0]
 800945a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d105      	bne.n	800946e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4907      	ldr	r1, [pc, #28]	@ (8009484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009466:	4808      	ldr	r0, [pc, #32]	@ (8009488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009468:	f7ff fdb5 	bl	8008fd6 <USBD_GetString>
 800946c:	e004      	b.n	8009478 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	4904      	ldr	r1, [pc, #16]	@ (8009484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009472:	4805      	ldr	r0, [pc, #20]	@ (8009488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009474:	f7ff fdaf 	bl	8008fd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009478:	4b02      	ldr	r3, [pc, #8]	@ (8009484 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000dc4 	.word	0x20000dc4
 8009488:	0800ab74 	.word	0x0800ab74

0800948c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d105      	bne.n	80094aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4907      	ldr	r1, [pc, #28]	@ (80094c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094a2:	4808      	ldr	r0, [pc, #32]	@ (80094c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094a4:	f7ff fd97 	bl	8008fd6 <USBD_GetString>
 80094a8:	e004      	b.n	80094b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	4904      	ldr	r1, [pc, #16]	@ (80094c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80094ae:	4805      	ldr	r0, [pc, #20]	@ (80094c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80094b0:	f7ff fd91 	bl	8008fd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b4:	4b02      	ldr	r3, [pc, #8]	@ (80094c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000dc4 	.word	0x20000dc4
 80094c4:	0800ab80 	.word	0x0800ab80

080094c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094ce:	4b0f      	ldr	r3, [pc, #60]	@ (800950c <Get_SerialNum+0x44>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009510 <Get_SerialNum+0x48>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094da:	4b0e      	ldr	r3, [pc, #56]	@ (8009514 <Get_SerialNum+0x4c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4413      	add	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d009      	beq.n	8009502 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094ee:	2208      	movs	r2, #8
 80094f0:	4909      	ldr	r1, [pc, #36]	@ (8009518 <Get_SerialNum+0x50>)
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f814 	bl	8009520 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094f8:	2204      	movs	r2, #4
 80094fa:	4908      	ldr	r1, [pc, #32]	@ (800951c <Get_SerialNum+0x54>)
 80094fc:	68b8      	ldr	r0, [r7, #8]
 80094fe:	f000 f80f 	bl	8009520 <IntToUnicode>
  }
}
 8009502:	bf00      	nop
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	1ffff7e8 	.word	0x1ffff7e8
 8009510:	1ffff7ec 	.word	0x1ffff7ec
 8009514:	1ffff7f0 	.word	0x1ffff7f0
 8009518:	20000166 	.word	0x20000166
 800951c:	20000176 	.word	0x20000176

08009520 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
 8009536:	e027      	b.n	8009588 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	0f1b      	lsrs	r3, r3, #28
 800953c:	2b09      	cmp	r3, #9
 800953e:	d80b      	bhi.n	8009558 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	0f1b      	lsrs	r3, r3, #28
 8009544:	b2da      	uxtb	r2, r3
 8009546:	7dfb      	ldrb	r3, [r7, #23]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	4619      	mov	r1, r3
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	440b      	add	r3, r1
 8009550:	3230      	adds	r2, #48	@ 0x30
 8009552:	b2d2      	uxtb	r2, r2
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	e00a      	b.n	800956e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	0f1b      	lsrs	r3, r3, #28
 800955c:	b2da      	uxtb	r2, r3
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	4619      	mov	r1, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	440b      	add	r3, r1
 8009568:	3237      	adds	r2, #55	@ 0x37
 800956a:	b2d2      	uxtb	r2, r2
 800956c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	3301      	adds	r3, #1
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	4413      	add	r3, r2
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	3301      	adds	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
 8009588:	7dfa      	ldrb	r2, [r7, #23]
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	429a      	cmp	r2, r3
 800958e:	d3d3      	bcc.n	8009538 <IntToUnicode+0x18>
  }
}
 8009590:	bf00      	nop
 8009592:	bf00      	nop
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr

0800959c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a0d      	ldr	r2, [pc, #52]	@ (80095e0 <HAL_PCD_MspInit+0x44>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d113      	bne.n	80095d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <HAL_PCD_MspInit+0x48>)
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	4a0c      	ldr	r2, [pc, #48]	@ (80095e4 <HAL_PCD_MspInit+0x48>)
 80095b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80095b8:	61d3      	str	r3, [r2, #28]
 80095ba:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <HAL_PCD_MspInit+0x48>)
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80095c6:	2200      	movs	r2, #0
 80095c8:	2100      	movs	r1, #0
 80095ca:	2014      	movs	r0, #20
 80095cc:	f7f8 fd39 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80095d0:	2014      	movs	r0, #20
 80095d2:	f7f8 fd52 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	40005c00 	.word	0x40005c00
 80095e4:	40021000 	.word	0x40021000

080095e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f7fe fdbb 	bl	800817a <USBD_LL_SetupStage>
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	00db      	lsls	r3, r3, #3
 800962a:	440b      	add	r3, r1
 800962c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	4619      	mov	r1, r3
 8009636:	f7fe fded 	bl	8008214 <USBD_LL_DataOutStage>
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	440b      	add	r3, r1
 8009662:	3324      	adds	r3, #36	@ 0x24
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	4619      	mov	r1, r3
 800966a:	f7fe fe44 	bl	80082f6 <USBD_LL_DataInStage>
}
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe ff54 	bl	8008532 <USBD_LL_SOF>
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800969a:	2301      	movs	r3, #1
 800969c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	799b      	ldrb	r3, [r3, #6]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d001      	beq.n	80096aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096a6:	f7f7 fe77 	bl	8001398 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096b0:	7bfa      	ldrb	r2, [r7, #15]
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe ff04 	bl	80084c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fe febd 	bl	8008440 <USBD_LL_Reset>
}
 80096c6:	bf00      	nop
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fefe 	bl	80084e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7a9b      	ldrb	r3, [r3, #10]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096ec:	4b04      	ldr	r3, [pc, #16]	@ (8009700 <HAL_PCD_SuspendCallback+0x30>)
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	4a03      	ldr	r2, [pc, #12]	@ (8009700 <HAL_PCD_SuspendCallback+0x30>)
 80096f2:	f043 0306 	orr.w	r3, r3, #6
 80096f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	e000ed00 	.word	0xe000ed00

08009704 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fef8 	bl	8008508 <USBD_LL_Resume>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009728:	4a28      	ldr	r2, [pc, #160]	@ (80097cc <USBD_LL_Init+0xac>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a26      	ldr	r2, [pc, #152]	@ (80097cc <USBD_LL_Init+0xac>)
 8009734:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009738:	4b24      	ldr	r3, [pc, #144]	@ (80097cc <USBD_LL_Init+0xac>)
 800973a:	4a25      	ldr	r2, [pc, #148]	@ (80097d0 <USBD_LL_Init+0xb0>)
 800973c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800973e:	4b23      	ldr	r3, [pc, #140]	@ (80097cc <USBD_LL_Init+0xac>)
 8009740:	2208      	movs	r2, #8
 8009742:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009744:	4b21      	ldr	r3, [pc, #132]	@ (80097cc <USBD_LL_Init+0xac>)
 8009746:	2202      	movs	r2, #2
 8009748:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800974a:	4b20      	ldr	r3, [pc, #128]	@ (80097cc <USBD_LL_Init+0xac>)
 800974c:	2200      	movs	r2, #0
 800974e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009750:	4b1e      	ldr	r3, [pc, #120]	@ (80097cc <USBD_LL_Init+0xac>)
 8009752:	2200      	movs	r2, #0
 8009754:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009756:	4b1d      	ldr	r3, [pc, #116]	@ (80097cc <USBD_LL_Init+0xac>)
 8009758:	2200      	movs	r2, #0
 800975a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800975c:	481b      	ldr	r0, [pc, #108]	@ (80097cc <USBD_LL_Init+0xac>)
 800975e:	f7f9 f831 	bl	80027c4 <HAL_PCD_Init>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009768:	f7f7 fe16 	bl	8001398 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009772:	2318      	movs	r3, #24
 8009774:	2200      	movs	r2, #0
 8009776:	2100      	movs	r1, #0
 8009778:	f7fa fd42 	bl	8004200 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009782:	2358      	movs	r3, #88	@ 0x58
 8009784:	2200      	movs	r2, #0
 8009786:	2180      	movs	r1, #128	@ 0x80
 8009788:	f7fa fd3a 	bl	8004200 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009792:	23c0      	movs	r3, #192	@ 0xc0
 8009794:	2200      	movs	r2, #0
 8009796:	2181      	movs	r1, #129	@ 0x81
 8009798:	f7fa fd32 	bl	8004200 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80097a2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80097a6:	2200      	movs	r2, #0
 80097a8:	2101      	movs	r1, #1
 80097aa:	f7fa fd29 	bl	8004200 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80097b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80097b8:	2200      	movs	r2, #0
 80097ba:	2182      	movs	r1, #130	@ 0x82
 80097bc:	f7fa fd20 	bl	8004200 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	20000fc4 	.word	0x20000fc4
 80097d0:	40005c00 	.word	0x40005c00

080097d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7f9 f8e0 	bl	80029b0 <HAL_PCD_Start>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 f94e 	bl	8009a98 <USBD_Get_USB_Status>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009800:	7bbb      	ldrb	r3, [r7, #14]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	4608      	mov	r0, r1
 8009814:	4611      	mov	r1, r2
 8009816:	461a      	mov	r2, r3
 8009818:	4603      	mov	r3, r0
 800981a:	70fb      	strb	r3, [r7, #3]
 800981c:	460b      	mov	r3, r1
 800981e:	70bb      	strb	r3, [r7, #2]
 8009820:	4613      	mov	r3, r2
 8009822:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009832:	78bb      	ldrb	r3, [r7, #2]
 8009834:	883a      	ldrh	r2, [r7, #0]
 8009836:	78f9      	ldrb	r1, [r7, #3]
 8009838:	f7f9 fa34 	bl	8002ca4 <HAL_PCD_EP_Open>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f928 	bl	8009a98 <USBD_Get_USB_Status>
 8009848:	4603      	mov	r3, r0
 800984a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984c:	7bbb      	ldrb	r3, [r7, #14]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	460b      	mov	r3, r1
 8009860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009870:	78fa      	ldrb	r2, [r7, #3]
 8009872:	4611      	mov	r1, r2
 8009874:	4618      	mov	r0, r3
 8009876:	f7f9 fa72 	bl	8002d5e <HAL_PCD_EP_Close>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f909 	bl	8009a98 <USBD_Get_USB_Status>
 8009886:	4603      	mov	r3, r0
 8009888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988a:	7bbb      	ldrb	r3, [r7, #14]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7f9 fb1a 	bl	8002eec <HAL_PCD_EP_SetStall>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 f8ea 	bl	8009a98 <USBD_Get_USB_Status>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098ec:	78fa      	ldrb	r2, [r7, #3]
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7f9 fb5b 	bl	8002fac <HAL_PCD_EP_ClrStall>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f8cb 	bl	8009a98 <USBD_Get_USB_Status>
 8009902:	4603      	mov	r3, r0
 8009904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009906:	7bbb      	ldrb	r3, [r7, #14]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009922:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009928:	2b00      	cmp	r3, #0
 800992a:	da0b      	bge.n	8009944 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009932:	68f9      	ldr	r1, [r7, #12]
 8009934:	4613      	mov	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	440b      	add	r3, r1
 800993e:	3312      	adds	r3, #18
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	e00b      	b.n	800995c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800994a:	68f9      	ldr	r1, [r7, #12]
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	440b      	add	r3, r1
 8009956:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800995a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	bc80      	pop	{r7}
 8009964:	4770      	bx	lr

08009966 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	460b      	mov	r3, r1
 8009970:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009972:	2300      	movs	r3, #0
 8009974:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009980:	78fa      	ldrb	r2, [r7, #3]
 8009982:	4611      	mov	r1, r2
 8009984:	4618      	mov	r0, r3
 8009986:	f7f9 f969 	bl	8002c5c <HAL_PCD_SetAddress>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 f881 	bl	8009a98 <USBD_Get_USB_Status>
 8009996:	4603      	mov	r3, r0
 8009998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800999a:	7bbb      	ldrb	r3, [r7, #14]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	607a      	str	r2, [r7, #4]
 80099ae:	461a      	mov	r2, r3
 80099b0:	460b      	mov	r3, r1
 80099b2:	72fb      	strb	r3, [r7, #11]
 80099b4:	4613      	mov	r3, r2
 80099b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099c6:	893b      	ldrh	r3, [r7, #8]
 80099c8:	7af9      	ldrb	r1, [r7, #11]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	f7f9 fa57 	bl	8002e7e <HAL_PCD_EP_Transmit>
 80099d0:	4603      	mov	r3, r0
 80099d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 f85e 	bl	8009a98 <USBD_Get_USB_Status>
 80099dc:	4603      	mov	r3, r0
 80099de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b086      	sub	sp, #24
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	461a      	mov	r2, r3
 80099f6:	460b      	mov	r3, r1
 80099f8:	72fb      	strb	r3, [r7, #11]
 80099fa:	4613      	mov	r3, r2
 80099fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a0c:	893b      	ldrh	r3, [r7, #8]
 8009a0e:	7af9      	ldrb	r1, [r7, #11]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	f7f9 f9ec 	bl	8002dee <HAL_PCD_EP_Receive>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f83b 	bl	8009a98 <USBD_Get_USB_Status>
 8009a22:	4603      	mov	r3, r0
 8009a24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a26:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a42:	78fa      	ldrb	r2, [r7, #3]
 8009a44:	4611      	mov	r1, r2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7f9 fa02 	bl	8002e50 <HAL_PCD_EP_GetRxCount>
 8009a4c:	4603      	mov	r3, r0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a60:	4b02      	ldr	r3, [pc, #8]	@ (8009a6c <USBD_static_malloc+0x14>)
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bc80      	pop	{r7}
 8009a6a:	4770      	bx	lr
 8009a6c:	2000129c 	.word	0x2000129c

08009a70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]

}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bc80      	pop	{r7}
 8009a80:	4770      	bx	lr

08009a82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bc80      	pop	{r7}
 8009a96:	4770      	bx	lr

08009a98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d817      	bhi.n	8009adc <USBD_Get_USB_Status+0x44>
 8009aac:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab4 <USBD_Get_USB_Status+0x1c>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ac5 	.word	0x08009ac5
 8009ab8:	08009acb 	.word	0x08009acb
 8009abc:	08009ad1 	.word	0x08009ad1
 8009ac0:	08009ad7 	.word	0x08009ad7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac8:	e00b      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aca:	2302      	movs	r3, #2
 8009acc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ace:	e008      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad4:	e005      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8009ada:	e002      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009adc:	2302      	movs	r3, #2
 8009ade:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae0:	bf00      	nop
  }
  return usb_status;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bc80      	pop	{r7}
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop

08009af0 <memset>:
 8009af0:	4603      	mov	r3, r0
 8009af2:	4402      	add	r2, r0
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d100      	bne.n	8009afa <memset+0xa>
 8009af8:	4770      	bx	lr
 8009afa:	f803 1b01 	strb.w	r1, [r3], #1
 8009afe:	e7f9      	b.n	8009af4 <memset+0x4>

08009b00 <__libc_init_array>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	2600      	movs	r6, #0
 8009b04:	4d0c      	ldr	r5, [pc, #48]	@ (8009b38 <__libc_init_array+0x38>)
 8009b06:	4c0d      	ldr	r4, [pc, #52]	@ (8009b3c <__libc_init_array+0x3c>)
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	42a6      	cmp	r6, r4
 8009b0e:	d109      	bne.n	8009b24 <__libc_init_array+0x24>
 8009b10:	f000 fffe 	bl	800ab10 <_init>
 8009b14:	2600      	movs	r6, #0
 8009b16:	4d0a      	ldr	r5, [pc, #40]	@ (8009b40 <__libc_init_array+0x40>)
 8009b18:	4c0a      	ldr	r4, [pc, #40]	@ (8009b44 <__libc_init_array+0x44>)
 8009b1a:	1b64      	subs	r4, r4, r5
 8009b1c:	10a4      	asrs	r4, r4, #2
 8009b1e:	42a6      	cmp	r6, r4
 8009b20:	d105      	bne.n	8009b2e <__libc_init_array+0x2e>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b28:	4798      	blx	r3
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7ee      	b.n	8009b0c <__libc_init_array+0xc>
 8009b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b32:	4798      	blx	r3
 8009b34:	3601      	adds	r6, #1
 8009b36:	e7f2      	b.n	8009b1e <__libc_init_array+0x1e>
 8009b38:	0800ad90 	.word	0x0800ad90
 8009b3c:	0800ad90 	.word	0x0800ad90
 8009b40:	0800ad90 	.word	0x0800ad90
 8009b44:	0800ad94 	.word	0x0800ad94

08009b48 <memcpy>:
 8009b48:	440a      	add	r2, r1
 8009b4a:	4291      	cmp	r1, r2
 8009b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b50:	d100      	bne.n	8009b54 <memcpy+0xc>
 8009b52:	4770      	bx	lr
 8009b54:	b510      	push	{r4, lr}
 8009b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5a:	4291      	cmp	r1, r2
 8009b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b60:	d1f9      	bne.n	8009b56 <memcpy+0xe>
 8009b62:	bd10      	pop	{r4, pc}

08009b64 <sin>:
 8009b64:	b530      	push	{r4, r5, lr}
 8009b66:	4d20      	ldr	r5, [pc, #128]	@ (8009be8 <sin+0x84>)
 8009b68:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009b6c:	42ac      	cmp	r4, r5
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	b087      	sub	sp, #28
 8009b74:	d806      	bhi.n	8009b84 <sin+0x20>
 8009b76:	2300      	movs	r3, #0
 8009b78:	2200      	movs	r2, #0
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f000 f8f7 	bl	8009d70 <__kernel_sin>
 8009b82:	e004      	b.n	8009b8e <sin+0x2a>
 8009b84:	4d19      	ldr	r5, [pc, #100]	@ (8009bec <sin+0x88>)
 8009b86:	42ac      	cmp	r4, r5
 8009b88:	d903      	bls.n	8009b92 <sin+0x2e>
 8009b8a:	f7f6 fae5 	bl	8000158 <__aeabi_dsub>
 8009b8e:	b007      	add	sp, #28
 8009b90:	bd30      	pop	{r4, r5, pc}
 8009b92:	aa02      	add	r2, sp, #8
 8009b94:	f000 f9a4 	bl	8009ee0 <__ieee754_rem_pio2>
 8009b98:	f000 0003 	and.w	r0, r0, #3
 8009b9c:	2801      	cmp	r0, #1
 8009b9e:	d009      	beq.n	8009bb4 <sin+0x50>
 8009ba0:	2802      	cmp	r0, #2
 8009ba2:	d00e      	beq.n	8009bc2 <sin+0x5e>
 8009ba4:	b9c0      	cbnz	r0, 8009bd8 <sin+0x74>
 8009ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009baa:	2301      	movs	r3, #1
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bb2:	e7e4      	b.n	8009b7e <sin+0x1a>
 8009bb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bbc:	f000 f818 	bl	8009bf0 <__kernel_cos>
 8009bc0:	e7e5      	b.n	8009b8e <sin+0x2a>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bce:	f000 f8cf 	bl	8009d70 <__kernel_sin>
 8009bd2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8009bd6:	e7da      	b.n	8009b8e <sin+0x2a>
 8009bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be0:	f000 f806 	bl	8009bf0 <__kernel_cos>
 8009be4:	e7f5      	b.n	8009bd2 <sin+0x6e>
 8009be6:	bf00      	nop
 8009be8:	3fe921fb 	.word	0x3fe921fb
 8009bec:	7fefffff 	.word	0x7fefffff

08009bf0 <__kernel_cos>:
 8009bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009bf8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8009bfc:	4680      	mov	r8, r0
 8009bfe:	4689      	mov	r9, r1
 8009c00:	e9cd 2300 	strd	r2, r3, [sp]
 8009c04:	d204      	bcs.n	8009c10 <__kernel_cos+0x20>
 8009c06:	f7f6 fef9 	bl	80009fc <__aeabi_d2iz>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	f000 8086 	beq.w	8009d1c <__kernel_cos+0x12c>
 8009c10:	4642      	mov	r2, r8
 8009c12:	464b      	mov	r3, r9
 8009c14:	4640      	mov	r0, r8
 8009c16:	4649      	mov	r1, r9
 8009c18:	f7f6 fc56 	bl	80004c8 <__aeabi_dmul>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8009d58 <__kernel_cos+0x168>)
 8009c20:	4604      	mov	r4, r0
 8009c22:	460d      	mov	r5, r1
 8009c24:	f7f6 fc50 	bl	80004c8 <__aeabi_dmul>
 8009c28:	a33f      	add	r3, pc, #252	@ (adr r3, 8009d28 <__kernel_cos+0x138>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	4682      	mov	sl, r0
 8009c30:	468b      	mov	fp, r1
 8009c32:	4620      	mov	r0, r4
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7f6 fc47 	bl	80004c8 <__aeabi_dmul>
 8009c3a:	a33d      	add	r3, pc, #244	@ (adr r3, 8009d30 <__kernel_cos+0x140>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fa8c 	bl	800015c <__adddf3>
 8009c44:	4622      	mov	r2, r4
 8009c46:	462b      	mov	r3, r5
 8009c48:	f7f6 fc3e 	bl	80004c8 <__aeabi_dmul>
 8009c4c:	a33a      	add	r3, pc, #232	@ (adr r3, 8009d38 <__kernel_cos+0x148>)
 8009c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c52:	f7f6 fa81 	bl	8000158 <__aeabi_dsub>
 8009c56:	4622      	mov	r2, r4
 8009c58:	462b      	mov	r3, r5
 8009c5a:	f7f6 fc35 	bl	80004c8 <__aeabi_dmul>
 8009c5e:	a338      	add	r3, pc, #224	@ (adr r3, 8009d40 <__kernel_cos+0x150>)
 8009c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c64:	f7f6 fa7a 	bl	800015c <__adddf3>
 8009c68:	4622      	mov	r2, r4
 8009c6a:	462b      	mov	r3, r5
 8009c6c:	f7f6 fc2c 	bl	80004c8 <__aeabi_dmul>
 8009c70:	a335      	add	r3, pc, #212	@ (adr r3, 8009d48 <__kernel_cos+0x158>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fa6f 	bl	8000158 <__aeabi_dsub>
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	462b      	mov	r3, r5
 8009c7e:	f7f6 fc23 	bl	80004c8 <__aeabi_dmul>
 8009c82:	a333      	add	r3, pc, #204	@ (adr r3, 8009d50 <__kernel_cos+0x160>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 fa68 	bl	800015c <__adddf3>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	f7f6 fc1a 	bl	80004c8 <__aeabi_dmul>
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	f7f6 fc16 	bl	80004c8 <__aeabi_dmul>
 8009c9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	f7f6 fc0e 	bl	80004c8 <__aeabi_dmul>
 8009cac:	460b      	mov	r3, r1
 8009cae:	4602      	mov	r2, r0
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7f6 fa50 	bl	8000158 <__aeabi_dsub>
 8009cb8:	4b28      	ldr	r3, [pc, #160]	@ (8009d5c <__kernel_cos+0x16c>)
 8009cba:	4680      	mov	r8, r0
 8009cbc:	429e      	cmp	r6, r3
 8009cbe:	4689      	mov	r9, r1
 8009cc0:	d80e      	bhi.n	8009ce0 <__kernel_cos+0xf0>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	4659      	mov	r1, fp
 8009cca:	f7f6 fa45 	bl	8000158 <__aeabi_dsub>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4922      	ldr	r1, [pc, #136]	@ (8009d60 <__kernel_cos+0x170>)
 8009cd6:	f7f6 fa3f 	bl	8000158 <__aeabi_dsub>
 8009cda:	b003      	add	sp, #12
 8009cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce0:	2400      	movs	r4, #0
 8009ce2:	4b20      	ldr	r3, [pc, #128]	@ (8009d64 <__kernel_cos+0x174>)
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	429e      	cmp	r6, r3
 8009ce8:	bf8c      	ite	hi
 8009cea:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009d68 <__kernel_cos+0x178>)
 8009cec:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	491a      	ldr	r1, [pc, #104]	@ (8009d60 <__kernel_cos+0x170>)
 8009cf6:	f7f6 fa2f 	bl	8000158 <__aeabi_dsub>
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460f      	mov	r7, r1
 8009d00:	462b      	mov	r3, r5
 8009d02:	4650      	mov	r0, sl
 8009d04:	4659      	mov	r1, fp
 8009d06:	f7f6 fa27 	bl	8000158 <__aeabi_dsub>
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	f7f6 fa23 	bl	8000158 <__aeabi_dsub>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4630      	mov	r0, r6
 8009d18:	4639      	mov	r1, r7
 8009d1a:	e7dc      	b.n	8009cd6 <__kernel_cos+0xe6>
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	4910      	ldr	r1, [pc, #64]	@ (8009d60 <__kernel_cos+0x170>)
 8009d20:	e7db      	b.n	8009cda <__kernel_cos+0xea>
 8009d22:	bf00      	nop
 8009d24:	f3af 8000 	nop.w
 8009d28:	be8838d4 	.word	0xbe8838d4
 8009d2c:	bda8fae9 	.word	0xbda8fae9
 8009d30:	bdb4b1c4 	.word	0xbdb4b1c4
 8009d34:	3e21ee9e 	.word	0x3e21ee9e
 8009d38:	809c52ad 	.word	0x809c52ad
 8009d3c:	3e927e4f 	.word	0x3e927e4f
 8009d40:	19cb1590 	.word	0x19cb1590
 8009d44:	3efa01a0 	.word	0x3efa01a0
 8009d48:	16c15177 	.word	0x16c15177
 8009d4c:	3f56c16c 	.word	0x3f56c16c
 8009d50:	5555554c 	.word	0x5555554c
 8009d54:	3fa55555 	.word	0x3fa55555
 8009d58:	3fe00000 	.word	0x3fe00000
 8009d5c:	3fd33332 	.word	0x3fd33332
 8009d60:	3ff00000 	.word	0x3ff00000
 8009d64:	3fe90000 	.word	0x3fe90000
 8009d68:	3fd20000 	.word	0x3fd20000
 8009d6c:	00000000 	.word	0x00000000

08009d70 <__kernel_sin>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	461f      	mov	r7, r3
 8009d76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d7a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009d7e:	4604      	mov	r4, r0
 8009d80:	460d      	mov	r5, r1
 8009d82:	4616      	mov	r6, r2
 8009d84:	b085      	sub	sp, #20
 8009d86:	d203      	bcs.n	8009d90 <__kernel_sin+0x20>
 8009d88:	f7f6 fe38 	bl	80009fc <__aeabi_d2iz>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d051      	beq.n	8009e34 <__kernel_sin+0xc4>
 8009d90:	4622      	mov	r2, r4
 8009d92:	462b      	mov	r3, r5
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 fb96 	bl	80004c8 <__aeabi_dmul>
 8009d9c:	4682      	mov	sl, r0
 8009d9e:	468b      	mov	fp, r1
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4620      	mov	r0, r4
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 fb8e 	bl	80004c8 <__aeabi_dmul>
 8009dac:	a33e      	add	r3, pc, #248	@ (adr r3, 8009ea8 <__kernel_sin+0x138>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	4680      	mov	r8, r0
 8009db4:	4689      	mov	r9, r1
 8009db6:	4650      	mov	r0, sl
 8009db8:	4659      	mov	r1, fp
 8009dba:	f7f6 fb85 	bl	80004c8 <__aeabi_dmul>
 8009dbe:	a33c      	add	r3, pc, #240	@ (adr r3, 8009eb0 <__kernel_sin+0x140>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f7f6 f9c8 	bl	8000158 <__aeabi_dsub>
 8009dc8:	4652      	mov	r2, sl
 8009dca:	465b      	mov	r3, fp
 8009dcc:	f7f6 fb7c 	bl	80004c8 <__aeabi_dmul>
 8009dd0:	a339      	add	r3, pc, #228	@ (adr r3, 8009eb8 <__kernel_sin+0x148>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f7f6 f9c1 	bl	800015c <__adddf3>
 8009dda:	4652      	mov	r2, sl
 8009ddc:	465b      	mov	r3, fp
 8009dde:	f7f6 fb73 	bl	80004c8 <__aeabi_dmul>
 8009de2:	a337      	add	r3, pc, #220	@ (adr r3, 8009ec0 <__kernel_sin+0x150>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 f9b6 	bl	8000158 <__aeabi_dsub>
 8009dec:	4652      	mov	r2, sl
 8009dee:	465b      	mov	r3, fp
 8009df0:	f7f6 fb6a 	bl	80004c8 <__aeabi_dmul>
 8009df4:	a334      	add	r3, pc, #208	@ (adr r3, 8009ec8 <__kernel_sin+0x158>)
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f7f6 f9af 	bl	800015c <__adddf3>
 8009dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e00:	e9cd 0100 	strd	r0, r1, [sp]
 8009e04:	b9db      	cbnz	r3, 8009e3e <__kernel_sin+0xce>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4650      	mov	r0, sl
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	f7f6 fb5b 	bl	80004c8 <__aeabi_dmul>
 8009e12:	a32f      	add	r3, pc, #188	@ (adr r3, 8009ed0 <__kernel_sin+0x160>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 f99e 	bl	8000158 <__aeabi_dsub>
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	f7f6 fb52 	bl	80004c8 <__aeabi_dmul>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 f996 	bl	800015c <__adddf3>
 8009e30:	4604      	mov	r4, r0
 8009e32:	460d      	mov	r5, r1
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	b005      	add	sp, #20
 8009e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	4b24      	ldr	r3, [pc, #144]	@ (8009ed8 <__kernel_sin+0x168>)
 8009e46:	f7f6 fb3f 	bl	80004c8 <__aeabi_dmul>
 8009e4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	f7f6 fb37 	bl	80004c8 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e62:	f7f6 f979 	bl	8000158 <__aeabi_dsub>
 8009e66:	4652      	mov	r2, sl
 8009e68:	465b      	mov	r3, fp
 8009e6a:	f7f6 fb2d 	bl	80004c8 <__aeabi_dmul>
 8009e6e:	4632      	mov	r2, r6
 8009e70:	463b      	mov	r3, r7
 8009e72:	f7f6 f971 	bl	8000158 <__aeabi_dsub>
 8009e76:	a316      	add	r3, pc, #88	@ (adr r3, 8009ed0 <__kernel_sin+0x160>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460f      	mov	r7, r1
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	f7f6 fb20 	bl	80004c8 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 f964 	bl	800015c <__adddf3>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	f7f6 f95c 	bl	8000158 <__aeabi_dsub>
 8009ea0:	e7c6      	b.n	8009e30 <__kernel_sin+0xc0>
 8009ea2:	bf00      	nop
 8009ea4:	f3af 8000 	nop.w
 8009ea8:	5acfd57c 	.word	0x5acfd57c
 8009eac:	3de5d93a 	.word	0x3de5d93a
 8009eb0:	8a2b9ceb 	.word	0x8a2b9ceb
 8009eb4:	3e5ae5e6 	.word	0x3e5ae5e6
 8009eb8:	57b1fe7d 	.word	0x57b1fe7d
 8009ebc:	3ec71de3 	.word	0x3ec71de3
 8009ec0:	19c161d5 	.word	0x19c161d5
 8009ec4:	3f2a01a0 	.word	0x3f2a01a0
 8009ec8:	1110f8a6 	.word	0x1110f8a6
 8009ecc:	3f811111 	.word	0x3f811111
 8009ed0:	55555549 	.word	0x55555549
 8009ed4:	3fc55555 	.word	0x3fc55555
 8009ed8:	3fe00000 	.word	0x3fe00000
 8009edc:	00000000 	.word	0x00000000

08009ee0 <__ieee754_rem_pio2>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	4bc4      	ldr	r3, [pc, #784]	@ (800a1f8 <__ieee754_rem_pio2+0x318>)
 8009ee6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009eea:	b08d      	sub	sp, #52	@ 0x34
 8009eec:	4598      	cmp	r8, r3
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	4614      	mov	r4, r2
 8009ef4:	9104      	str	r1, [sp, #16]
 8009ef6:	d807      	bhi.n	8009f08 <__ieee754_rem_pio2+0x28>
 8009ef8:	e9c2 6700 	strd	r6, r7, [r2]
 8009efc:	2300      	movs	r3, #0
 8009efe:	2200      	movs	r2, #0
 8009f00:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009f04:	2500      	movs	r5, #0
 8009f06:	e026      	b.n	8009f56 <__ieee754_rem_pio2+0x76>
 8009f08:	4bbc      	ldr	r3, [pc, #752]	@ (800a1fc <__ieee754_rem_pio2+0x31c>)
 8009f0a:	4598      	cmp	r8, r3
 8009f0c:	d876      	bhi.n	8009ffc <__ieee754_rem_pio2+0x11c>
 8009f0e:	9b04      	ldr	r3, [sp, #16]
 8009f10:	4dbb      	ldr	r5, [pc, #748]	@ (800a200 <__ieee754_rem_pio2+0x320>)
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	a3aa      	add	r3, pc, #680	@ (adr r3, 800a1c0 <__ieee754_rem_pio2+0x2e0>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	dd38      	ble.n	8009f8e <__ieee754_rem_pio2+0xae>
 8009f1c:	f7f6 f91c 	bl	8000158 <__aeabi_dsub>
 8009f20:	45a8      	cmp	r8, r5
 8009f22:	4606      	mov	r6, r0
 8009f24:	460f      	mov	r7, r1
 8009f26:	d01a      	beq.n	8009f5e <__ieee754_rem_pio2+0x7e>
 8009f28:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a1c8 <__ieee754_rem_pio2+0x2e8>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f7f6 f913 	bl	8000158 <__aeabi_dsub>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4680      	mov	r8, r0
 8009f38:	4689      	mov	r9, r1
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	f7f6 f90b 	bl	8000158 <__aeabi_dsub>
 8009f42:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a1c8 <__ieee754_rem_pio2+0x2e8>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f7f6 f906 	bl	8000158 <__aeabi_dsub>
 8009f4c:	2501      	movs	r5, #1
 8009f4e:	e9c4 8900 	strd	r8, r9, [r4]
 8009f52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f56:	4628      	mov	r0, r5
 8009f58:	b00d      	add	sp, #52	@ 0x34
 8009f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5e:	a39c      	add	r3, pc, #624	@ (adr r3, 800a1d0 <__ieee754_rem_pio2+0x2f0>)
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f7f6 f8f8 	bl	8000158 <__aeabi_dsub>
 8009f68:	a39b      	add	r3, pc, #620	@ (adr r3, 800a1d8 <__ieee754_rem_pio2+0x2f8>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	f7f6 f8f1 	bl	8000158 <__aeabi_dsub>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	4689      	mov	r9, r1
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	f7f6 f8e9 	bl	8000158 <__aeabi_dsub>
 8009f86:	a394      	add	r3, pc, #592	@ (adr r3, 800a1d8 <__ieee754_rem_pio2+0x2f8>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	e7dc      	b.n	8009f48 <__ieee754_rem_pio2+0x68>
 8009f8e:	f7f6 f8e5 	bl	800015c <__adddf3>
 8009f92:	45a8      	cmp	r8, r5
 8009f94:	4606      	mov	r6, r0
 8009f96:	460f      	mov	r7, r1
 8009f98:	d018      	beq.n	8009fcc <__ieee754_rem_pio2+0xec>
 8009f9a:	a38b      	add	r3, pc, #556	@ (adr r3, 800a1c8 <__ieee754_rem_pio2+0x2e8>)
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f7f6 f8dc 	bl	800015c <__adddf3>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4680      	mov	r8, r0
 8009faa:	4689      	mov	r9, r1
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 f8d2 	bl	8000158 <__aeabi_dsub>
 8009fb4:	a384      	add	r3, pc, #528	@ (adr r3, 800a1c8 <__ieee754_rem_pio2+0x2e8>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f7f6 f8cf 	bl	800015c <__adddf3>
 8009fbe:	f04f 35ff 	mov.w	r5, #4294967295
 8009fc2:	e9c4 8900 	strd	r8, r9, [r4]
 8009fc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009fca:	e7c4      	b.n	8009f56 <__ieee754_rem_pio2+0x76>
 8009fcc:	a380      	add	r3, pc, #512	@ (adr r3, 800a1d0 <__ieee754_rem_pio2+0x2f0>)
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f7f6 f8c3 	bl	800015c <__adddf3>
 8009fd6:	a380      	add	r3, pc, #512	@ (adr r3, 800a1d8 <__ieee754_rem_pio2+0x2f8>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	4606      	mov	r6, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	f7f6 f8bc 	bl	800015c <__adddf3>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4680      	mov	r8, r0
 8009fea:	4689      	mov	r9, r1
 8009fec:	4630      	mov	r0, r6
 8009fee:	4639      	mov	r1, r7
 8009ff0:	f7f6 f8b2 	bl	8000158 <__aeabi_dsub>
 8009ff4:	a378      	add	r3, pc, #480	@ (adr r3, 800a1d8 <__ieee754_rem_pio2+0x2f8>)
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	e7de      	b.n	8009fba <__ieee754_rem_pio2+0xda>
 8009ffc:	4b81      	ldr	r3, [pc, #516]	@ (800a204 <__ieee754_rem_pio2+0x324>)
 8009ffe:	4598      	cmp	r8, r3
 800a000:	f200 80cf 	bhi.w	800a1a2 <__ieee754_rem_pio2+0x2c2>
 800a004:	f000 f962 	bl	800a2cc <fabs>
 800a008:	a375      	add	r3, pc, #468	@ (adr r3, 800a1e0 <__ieee754_rem_pio2+0x300>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	4606      	mov	r6, r0
 800a010:	460f      	mov	r7, r1
 800a012:	f7f6 fa59 	bl	80004c8 <__aeabi_dmul>
 800a016:	2200      	movs	r2, #0
 800a018:	4b7b      	ldr	r3, [pc, #492]	@ (800a208 <__ieee754_rem_pio2+0x328>)
 800a01a:	f7f6 f89f 	bl	800015c <__adddf3>
 800a01e:	f7f6 fced 	bl	80009fc <__aeabi_d2iz>
 800a022:	4605      	mov	r5, r0
 800a024:	f7f6 f9e6 	bl	80003f4 <__aeabi_i2d>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a030:	a363      	add	r3, pc, #396	@ (adr r3, 800a1c0 <__ieee754_rem_pio2+0x2e0>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 fa47 	bl	80004c8 <__aeabi_dmul>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4630      	mov	r0, r6
 800a040:	4639      	mov	r1, r7
 800a042:	f7f6 f889 	bl	8000158 <__aeabi_dsub>
 800a046:	a360      	add	r3, pc, #384	@ (adr r3, 800a1c8 <__ieee754_rem_pio2+0x2e8>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	4682      	mov	sl, r0
 800a04e:	468b      	mov	fp, r1
 800a050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a054:	f7f6 fa38 	bl	80004c8 <__aeabi_dmul>
 800a058:	2d1f      	cmp	r5, #31
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	dc0c      	bgt.n	800a07a <__ieee754_rem_pio2+0x19a>
 800a060:	4b6a      	ldr	r3, [pc, #424]	@ (800a20c <__ieee754_rem_pio2+0x32c>)
 800a062:	1e6a      	subs	r2, r5, #1
 800a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a068:	4543      	cmp	r3, r8
 800a06a:	d006      	beq.n	800a07a <__ieee754_rem_pio2+0x19a>
 800a06c:	4632      	mov	r2, r6
 800a06e:	463b      	mov	r3, r7
 800a070:	4650      	mov	r0, sl
 800a072:	4659      	mov	r1, fp
 800a074:	f7f6 f870 	bl	8000158 <__aeabi_dsub>
 800a078:	e00e      	b.n	800a098 <__ieee754_rem_pio2+0x1b8>
 800a07a:	463b      	mov	r3, r7
 800a07c:	4632      	mov	r2, r6
 800a07e:	4650      	mov	r0, sl
 800a080:	4659      	mov	r1, fp
 800a082:	f7f6 f869 	bl	8000158 <__aeabi_dsub>
 800a086:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a090:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a094:	2b10      	cmp	r3, #16
 800a096:	dc02      	bgt.n	800a09e <__ieee754_rem_pio2+0x1be>
 800a098:	e9c4 0100 	strd	r0, r1, [r4]
 800a09c:	e039      	b.n	800a112 <__ieee754_rem_pio2+0x232>
 800a09e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a1d0 <__ieee754_rem_pio2+0x2f0>)
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0a8:	f7f6 fa0e 	bl	80004c8 <__aeabi_dmul>
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	460f      	mov	r7, r1
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	4659      	mov	r1, fp
 800a0b8:	f7f6 f84e 	bl	8000158 <__aeabi_dsub>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	4689      	mov	r9, r1
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	4659      	mov	r1, fp
 800a0c8:	f7f6 f846 	bl	8000158 <__aeabi_dsub>
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	463b      	mov	r3, r7
 800a0d0:	f7f6 f842 	bl	8000158 <__aeabi_dsub>
 800a0d4:	a340      	add	r3, pc, #256	@ (adr r3, 800a1d8 <__ieee754_rem_pio2+0x2f8>)
 800a0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0da:	4606      	mov	r6, r0
 800a0dc:	460f      	mov	r7, r1
 800a0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0e2:	f7f6 f9f1 	bl	80004c8 <__aeabi_dmul>
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	463b      	mov	r3, r7
 800a0ea:	f7f6 f835 	bl	8000158 <__aeabi_dsub>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	f7f6 f82d 	bl	8000158 <__aeabi_dsub>
 800a0fe:	9a05      	ldr	r2, [sp, #20]
 800a100:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b31      	cmp	r3, #49	@ 0x31
 800a108:	dc20      	bgt.n	800a14c <__ieee754_rem_pio2+0x26c>
 800a10a:	46c2      	mov	sl, r8
 800a10c:	46cb      	mov	fp, r9
 800a10e:	e9c4 0100 	strd	r0, r1, [r4]
 800a112:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a116:	4650      	mov	r0, sl
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	4659      	mov	r1, fp
 800a11e:	f7f6 f81b 	bl	8000158 <__aeabi_dsub>
 800a122:	463b      	mov	r3, r7
 800a124:	4632      	mov	r2, r6
 800a126:	f7f6 f817 	bl	8000158 <__aeabi_dsub>
 800a12a:	9b04      	ldr	r3, [sp, #16]
 800a12c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f6bf af10 	bge.w	8009f56 <__ieee754_rem_pio2+0x76>
 800a136:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a13a:	6063      	str	r3, [r4, #4]
 800a13c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a140:	f8c4 8000 	str.w	r8, [r4]
 800a144:	60a0      	str	r0, [r4, #8]
 800a146:	60e3      	str	r3, [r4, #12]
 800a148:	426d      	negs	r5, r5
 800a14a:	e704      	b.n	8009f56 <__ieee754_rem_pio2+0x76>
 800a14c:	a326      	add	r3, pc, #152	@ (adr r3, 800a1e8 <__ieee754_rem_pio2+0x308>)
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a156:	f7f6 f9b7 	bl	80004c8 <__aeabi_dmul>
 800a15a:	4606      	mov	r6, r0
 800a15c:	460f      	mov	r7, r1
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4640      	mov	r0, r8
 800a164:	4649      	mov	r1, r9
 800a166:	f7f5 fff7 	bl	8000158 <__aeabi_dsub>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4682      	mov	sl, r0
 800a170:	468b      	mov	fp, r1
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	f7f5 ffef 	bl	8000158 <__aeabi_dsub>
 800a17a:	4632      	mov	r2, r6
 800a17c:	463b      	mov	r3, r7
 800a17e:	f7f5 ffeb 	bl	8000158 <__aeabi_dsub>
 800a182:	a31b      	add	r3, pc, #108	@ (adr r3, 800a1f0 <__ieee754_rem_pio2+0x310>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	4606      	mov	r6, r0
 800a18a:	460f      	mov	r7, r1
 800a18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a190:	f7f6 f99a 	bl	80004c8 <__aeabi_dmul>
 800a194:	4632      	mov	r2, r6
 800a196:	463b      	mov	r3, r7
 800a198:	f7f5 ffde 	bl	8000158 <__aeabi_dsub>
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	e764      	b.n	800a06c <__ieee754_rem_pio2+0x18c>
 800a1a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a210 <__ieee754_rem_pio2+0x330>)
 800a1a4:	4598      	cmp	r8, r3
 800a1a6:	d935      	bls.n	800a214 <__ieee754_rem_pio2+0x334>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	f7f5 ffd4 	bl	8000158 <__aeabi_dsub>
 800a1b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1b4:	e9c4 0100 	strd	r0, r1, [r4]
 800a1b8:	e6a4      	b.n	8009f04 <__ieee754_rem_pio2+0x24>
 800a1ba:	bf00      	nop
 800a1bc:	f3af 8000 	nop.w
 800a1c0:	54400000 	.word	0x54400000
 800a1c4:	3ff921fb 	.word	0x3ff921fb
 800a1c8:	1a626331 	.word	0x1a626331
 800a1cc:	3dd0b461 	.word	0x3dd0b461
 800a1d0:	1a600000 	.word	0x1a600000
 800a1d4:	3dd0b461 	.word	0x3dd0b461
 800a1d8:	2e037073 	.word	0x2e037073
 800a1dc:	3ba3198a 	.word	0x3ba3198a
 800a1e0:	6dc9c883 	.word	0x6dc9c883
 800a1e4:	3fe45f30 	.word	0x3fe45f30
 800a1e8:	2e000000 	.word	0x2e000000
 800a1ec:	3ba3198a 	.word	0x3ba3198a
 800a1f0:	252049c1 	.word	0x252049c1
 800a1f4:	397b839a 	.word	0x397b839a
 800a1f8:	3fe921fb 	.word	0x3fe921fb
 800a1fc:	4002d97b 	.word	0x4002d97b
 800a200:	3ff921fb 	.word	0x3ff921fb
 800a204:	413921fb 	.word	0x413921fb
 800a208:	3fe00000 	.word	0x3fe00000
 800a20c:	0800abb4 	.word	0x0800abb4
 800a210:	7fefffff 	.word	0x7fefffff
 800a214:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a218:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a21c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a220:	460f      	mov	r7, r1
 800a222:	f7f6 fbeb 	bl	80009fc <__aeabi_d2iz>
 800a226:	f7f6 f8e5 	bl	80003f4 <__aeabi_i2d>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4630      	mov	r0, r6
 800a230:	4639      	mov	r1, r7
 800a232:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a236:	f7f5 ff8f 	bl	8000158 <__aeabi_dsub>
 800a23a:	2200      	movs	r2, #0
 800a23c:	4b21      	ldr	r3, [pc, #132]	@ (800a2c4 <__ieee754_rem_pio2+0x3e4>)
 800a23e:	f7f6 f943 	bl	80004c8 <__aeabi_dmul>
 800a242:	460f      	mov	r7, r1
 800a244:	4606      	mov	r6, r0
 800a246:	f7f6 fbd9 	bl	80009fc <__aeabi_d2iz>
 800a24a:	f7f6 f8d3 	bl	80003f4 <__aeabi_i2d>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4630      	mov	r0, r6
 800a254:	4639      	mov	r1, r7
 800a256:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a25a:	f7f5 ff7d 	bl	8000158 <__aeabi_dsub>
 800a25e:	2200      	movs	r2, #0
 800a260:	4b18      	ldr	r3, [pc, #96]	@ (800a2c4 <__ieee754_rem_pio2+0x3e4>)
 800a262:	f7f6 f931 	bl	80004c8 <__aeabi_dmul>
 800a266:	f04f 0803 	mov.w	r8, #3
 800a26a:	2600      	movs	r6, #0
 800a26c:	2700      	movs	r7, #0
 800a26e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a272:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a276:	4632      	mov	r2, r6
 800a278:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a27c:	463b      	mov	r3, r7
 800a27e:	46c2      	mov	sl, r8
 800a280:	f108 38ff 	add.w	r8, r8, #4294967295
 800a284:	f7f6 fb88 	bl	8000998 <__aeabi_dcmpeq>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d1f4      	bne.n	800a276 <__ieee754_rem_pio2+0x396>
 800a28c:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c8 <__ieee754_rem_pio2+0x3e8>)
 800a28e:	462a      	mov	r2, r5
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	2302      	movs	r3, #2
 800a294:	4621      	mov	r1, r4
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	a806      	add	r0, sp, #24
 800a29a:	4653      	mov	r3, sl
 800a29c:	f000 f81a 	bl	800a2d4 <__kernel_rem_pio2>
 800a2a0:	9b04      	ldr	r3, [sp, #16]
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f6bf ae56 	bge.w	8009f56 <__ieee754_rem_pio2+0x76>
 800a2aa:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a2ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2b2:	e9c4 2300 	strd	r2, r3, [r4]
 800a2b6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a2ba:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2be:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a2c2:	e741      	b.n	800a148 <__ieee754_rem_pio2+0x268>
 800a2c4:	41700000 	.word	0x41700000
 800a2c8:	0800ac34 	.word	0x0800ac34

0800a2cc <fabs>:
 800a2cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <__kernel_rem_pio2>:
 800a2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a2dc:	9308      	str	r3, [sp, #32]
 800a2de:	9104      	str	r1, [sp, #16]
 800a2e0:	4bb6      	ldr	r3, [pc, #728]	@ (800a5bc <__kernel_rem_pio2+0x2e8>)
 800a2e2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800a2e4:	f112 0f14 	cmn.w	r2, #20
 800a2e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2ec:	bfa8      	it	ge
 800a2ee:	1ed4      	subge	r4, r2, #3
 800a2f0:	9302      	str	r3, [sp, #8]
 800a2f2:	9b08      	ldr	r3, [sp, #32]
 800a2f4:	bfb8      	it	lt
 800a2f6:	2400      	movlt	r4, #0
 800a2f8:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2fc:	9306      	str	r3, [sp, #24]
 800a2fe:	bfa4      	itt	ge
 800a300:	2318      	movge	r3, #24
 800a302:	fb94 f4f3 	sdivge	r4, r4, r3
 800a306:	f06f 0317 	mvn.w	r3, #23
 800a30a:	fb04 3303 	mla	r3, r4, r3, r3
 800a30e:	eb03 0a02 	add.w	sl, r3, r2
 800a312:	9a06      	ldr	r2, [sp, #24]
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	1aa7      	subs	r7, r4, r2
 800a318:	eb03 0802 	add.w	r8, r3, r2
 800a31c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a31e:	2500      	movs	r5, #0
 800a320:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	9009      	str	r0, [sp, #36]	@ 0x24
 800a32a:	ae20      	add	r6, sp, #128	@ 0x80
 800a32c:	4545      	cmp	r5, r8
 800a32e:	dd14      	ble.n	800a35a <__kernel_rem_pio2+0x86>
 800a330:	f04f 0800 	mov.w	r8, #0
 800a334:	9a08      	ldr	r2, [sp, #32]
 800a336:	ab20      	add	r3, sp, #128	@ 0x80
 800a338:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a33c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	4598      	cmp	r8, r3
 800a344:	dc35      	bgt.n	800a3b2 <__kernel_rem_pio2+0xde>
 800a346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a348:	2200      	movs	r2, #0
 800a34a:	f1a3 0908 	sub.w	r9, r3, #8
 800a34e:	2300      	movs	r3, #0
 800a350:	462f      	mov	r7, r5
 800a352:	2600      	movs	r6, #0
 800a354:	e9cd 2300 	strd	r2, r3, [sp]
 800a358:	e01f      	b.n	800a39a <__kernel_rem_pio2+0xc6>
 800a35a:	42ef      	cmn	r7, r5
 800a35c:	d40b      	bmi.n	800a376 <__kernel_rem_pio2+0xa2>
 800a35e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a362:	e9cd 2300 	strd	r2, r3, [sp]
 800a366:	f7f6 f845 	bl	80003f4 <__aeabi_i2d>
 800a36a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a36e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a372:	3501      	adds	r5, #1
 800a374:	e7da      	b.n	800a32c <__kernel_rem_pio2+0x58>
 800a376:	4610      	mov	r0, r2
 800a378:	4619      	mov	r1, r3
 800a37a:	e7f8      	b.n	800a36e <__kernel_rem_pio2+0x9a>
 800a37c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a380:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a384:	f7f6 f8a0 	bl	80004c8 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a390:	f7f5 fee4 	bl	800015c <__adddf3>
 800a394:	e9cd 0100 	strd	r0, r1, [sp]
 800a398:	3601      	adds	r6, #1
 800a39a:	9b06      	ldr	r3, [sp, #24]
 800a39c:	3f08      	subs	r7, #8
 800a39e:	429e      	cmp	r6, r3
 800a3a0:	ddec      	ble.n	800a37c <__kernel_rem_pio2+0xa8>
 800a3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3a6:	f108 0801 	add.w	r8, r8, #1
 800a3aa:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a3ae:	3508      	adds	r5, #8
 800a3b0:	e7c6      	b.n	800a340 <__kernel_rem_pio2+0x6c>
 800a3b2:	9b02      	ldr	r3, [sp, #8]
 800a3b4:	aa0c      	add	r2, sp, #48	@ 0x30
 800a3b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3bc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a3be:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a3c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a3c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3c8:	ab98      	add	r3, sp, #608	@ 0x260
 800a3ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a3ce:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800a3d2:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a3d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a3d8:	ae0c      	add	r6, sp, #48	@ 0x30
 800a3da:	4698      	mov	r8, r3
 800a3dc:	46b1      	mov	r9, r6
 800a3de:	465f      	mov	r7, fp
 800a3e0:	9307      	str	r3, [sp, #28]
 800a3e2:	2f00      	cmp	r7, #0
 800a3e4:	f1a8 0808 	sub.w	r8, r8, #8
 800a3e8:	dc71      	bgt.n	800a4ce <__kernel_rem_pio2+0x1fa>
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	f000 fa96 	bl	800a920 <scalbn>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	460d      	mov	r5, r1
 800a3fe:	f7f6 f863 	bl	80004c8 <__aeabi_dmul>
 800a402:	f000 fb05 	bl	800aa10 <floor>
 800a406:	2200      	movs	r2, #0
 800a408:	4b6d      	ldr	r3, [pc, #436]	@ (800a5c0 <__kernel_rem_pio2+0x2ec>)
 800a40a:	f7f6 f85d 	bl	80004c8 <__aeabi_dmul>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f5 fe9f 	bl	8000158 <__aeabi_dsub>
 800a41a:	460d      	mov	r5, r1
 800a41c:	4604      	mov	r4, r0
 800a41e:	f7f6 faed 	bl	80009fc <__aeabi_d2iz>
 800a422:	9005      	str	r0, [sp, #20]
 800a424:	f7f5 ffe6 	bl	80003f4 <__aeabi_i2d>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 fe92 	bl	8000158 <__aeabi_dsub>
 800a434:	f1ba 0f00 	cmp.w	sl, #0
 800a438:	4680      	mov	r8, r0
 800a43a:	4689      	mov	r9, r1
 800a43c:	dd6d      	ble.n	800a51a <__kernel_rem_pio2+0x246>
 800a43e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a442:	ab0c      	add	r3, sp, #48	@ 0x30
 800a444:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a448:	9c05      	ldr	r4, [sp, #20]
 800a44a:	f1ca 0018 	rsb	r0, sl, #24
 800a44e:	fa43 f200 	asr.w	r2, r3, r0
 800a452:	4414      	add	r4, r2
 800a454:	4082      	lsls	r2, r0
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	aa0c      	add	r2, sp, #48	@ 0x30
 800a45a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a45e:	f1ca 0217 	rsb	r2, sl, #23
 800a462:	9405      	str	r4, [sp, #20]
 800a464:	4113      	asrs	r3, r2
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	9b00      	ldr	r3, [sp, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	dd64      	ble.n	800a538 <__kernel_rem_pio2+0x264>
 800a46e:	2200      	movs	r2, #0
 800a470:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a474:	4614      	mov	r4, r2
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	3301      	adds	r3, #1
 800a47a:	9305      	str	r3, [sp, #20]
 800a47c:	4593      	cmp	fp, r2
 800a47e:	f300 80ab 	bgt.w	800a5d8 <__kernel_rem_pio2+0x304>
 800a482:	f1ba 0f00 	cmp.w	sl, #0
 800a486:	dd07      	ble.n	800a498 <__kernel_rem_pio2+0x1c4>
 800a488:	f1ba 0f01 	cmp.w	sl, #1
 800a48c:	f000 80b2 	beq.w	800a5f4 <__kernel_rem_pio2+0x320>
 800a490:	f1ba 0f02 	cmp.w	sl, #2
 800a494:	f000 80b9 	beq.w	800a60a <__kernel_rem_pio2+0x336>
 800a498:	9b00      	ldr	r3, [sp, #0]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d14c      	bne.n	800a538 <__kernel_rem_pio2+0x264>
 800a49e:	4642      	mov	r2, r8
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	4947      	ldr	r1, [pc, #284]	@ (800a5c4 <__kernel_rem_pio2+0x2f0>)
 800a4a6:	f7f5 fe57 	bl	8000158 <__aeabi_dsub>
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	4689      	mov	r9, r1
 800a4ae:	2c00      	cmp	r4, #0
 800a4b0:	d042      	beq.n	800a538 <__kernel_rem_pio2+0x264>
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	4943      	ldr	r1, [pc, #268]	@ (800a5c4 <__kernel_rem_pio2+0x2f0>)
 800a4b8:	f000 fa32 	bl	800a920 <scalbn>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	f7f5 fe48 	bl	8000158 <__aeabi_dsub>
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	4689      	mov	r9, r1
 800a4cc:	e034      	b.n	800a538 <__kernel_rem_pio2+0x264>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4b3d      	ldr	r3, [pc, #244]	@ (800a5c8 <__kernel_rem_pio2+0x2f4>)
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f5 fff7 	bl	80004c8 <__aeabi_dmul>
 800a4da:	f7f6 fa8f 	bl	80009fc <__aeabi_d2iz>
 800a4de:	f7f5 ff89 	bl	80003f4 <__aeabi_i2d>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	e9cd 2300 	strd	r2, r3, [sp]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4b37      	ldr	r3, [pc, #220]	@ (800a5cc <__kernel_rem_pio2+0x2f8>)
 800a4ee:	f7f5 ffeb 	bl	80004c8 <__aeabi_dmul>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7f5 fe2d 	bl	8000158 <__aeabi_dsub>
 800a4fe:	f7f6 fa7d 	bl	80009fc <__aeabi_d2iz>
 800a502:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a506:	f849 0b04 	str.w	r0, [r9], #4
 800a50a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a50e:	f7f5 fe25 	bl	800015c <__adddf3>
 800a512:	3f01      	subs	r7, #1
 800a514:	4604      	mov	r4, r0
 800a516:	460d      	mov	r5, r1
 800a518:	e763      	b.n	800a3e2 <__kernel_rem_pio2+0x10e>
 800a51a:	d106      	bne.n	800a52a <__kernel_rem_pio2+0x256>
 800a51c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a520:	aa0c      	add	r2, sp, #48	@ 0x30
 800a522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a526:	15db      	asrs	r3, r3, #23
 800a528:	e79d      	b.n	800a466 <__kernel_rem_pio2+0x192>
 800a52a:	2200      	movs	r2, #0
 800a52c:	4b28      	ldr	r3, [pc, #160]	@ (800a5d0 <__kernel_rem_pio2+0x2fc>)
 800a52e:	f7f6 fa51 	bl	80009d4 <__aeabi_dcmpge>
 800a532:	2800      	cmp	r0, #0
 800a534:	d13f      	bne.n	800a5b6 <__kernel_rem_pio2+0x2e2>
 800a536:	9000      	str	r0, [sp, #0]
 800a538:	2200      	movs	r2, #0
 800a53a:	2300      	movs	r3, #0
 800a53c:	4640      	mov	r0, r8
 800a53e:	4649      	mov	r1, r9
 800a540:	f7f6 fa2a 	bl	8000998 <__aeabi_dcmpeq>
 800a544:	2800      	cmp	r0, #0
 800a546:	f000 80af 	beq.w	800a6a8 <__kernel_rem_pio2+0x3d4>
 800a54a:	2200      	movs	r2, #0
 800a54c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a550:	9902      	ldr	r1, [sp, #8]
 800a552:	428b      	cmp	r3, r1
 800a554:	da61      	bge.n	800a61a <__kernel_rem_pio2+0x346>
 800a556:	2a00      	cmp	r2, #0
 800a558:	d076      	beq.n	800a648 <__kernel_rem_pio2+0x374>
 800a55a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a55e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a560:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a564:	f1aa 0a18 	sub.w	sl, sl, #24
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0f6      	beq.n	800a55a <__kernel_rem_pio2+0x286>
 800a56c:	4652      	mov	r2, sl
 800a56e:	2000      	movs	r0, #0
 800a570:	4914      	ldr	r1, [pc, #80]	@ (800a5c4 <__kernel_rem_pio2+0x2f0>)
 800a572:	f000 f9d5 	bl	800a920 <scalbn>
 800a576:	465d      	mov	r5, fp
 800a578:	4606      	mov	r6, r0
 800a57a:	460f      	mov	r7, r1
 800a57c:	f04f 0900 	mov.w	r9, #0
 800a580:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a582:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800a5c8 <__kernel_rem_pio2+0x2f4>
 800a586:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a58a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a58e:	2d00      	cmp	r5, #0
 800a590:	f280 80c0 	bge.w	800a714 <__kernel_rem_pio2+0x440>
 800a594:	465d      	mov	r5, fp
 800a596:	2d00      	cmp	r5, #0
 800a598:	f2c0 80f0 	blt.w	800a77c <__kernel_rem_pio2+0x4a8>
 800a59c:	4b0d      	ldr	r3, [pc, #52]	@ (800a5d4 <__kernel_rem_pio2+0x300>)
 800a59e:	f04f 0900 	mov.w	r9, #0
 800a5a2:	9306      	str	r3, [sp, #24]
 800a5a4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a5a6:	f04f 0a00 	mov.w	sl, #0
 800a5aa:	2700      	movs	r7, #0
 800a5ac:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a5b0:	ebab 0605 	sub.w	r6, fp, r5
 800a5b4:	e0d6      	b.n	800a764 <__kernel_rem_pio2+0x490>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	e758      	b.n	800a46e <__kernel_rem_pio2+0x19a>
 800a5bc:	0800ad80 	.word	0x0800ad80
 800a5c0:	40200000 	.word	0x40200000
 800a5c4:	3ff00000 	.word	0x3ff00000
 800a5c8:	3e700000 	.word	0x3e700000
 800a5cc:	41700000 	.word	0x41700000
 800a5d0:	3fe00000 	.word	0x3fe00000
 800a5d4:	0800ad40 	.word	0x0800ad40
 800a5d8:	f856 3b04 	ldr.w	r3, [r6], #4
 800a5dc:	b944      	cbnz	r4, 800a5f0 <__kernel_rem_pio2+0x31c>
 800a5de:	b123      	cbz	r3, 800a5ea <__kernel_rem_pio2+0x316>
 800a5e0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a5e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	461c      	mov	r4, r3
 800a5ec:	3201      	adds	r2, #1
 800a5ee:	e745      	b.n	800a47c <__kernel_rem_pio2+0x1a8>
 800a5f0:	1acb      	subs	r3, r1, r3
 800a5f2:	e7f7      	b.n	800a5e4 <__kernel_rem_pio2+0x310>
 800a5f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a5f8:	ab0c      	add	r3, sp, #48	@ 0x30
 800a5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a602:	a90c      	add	r1, sp, #48	@ 0x30
 800a604:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a608:	e746      	b.n	800a498 <__kernel_rem_pio2+0x1c4>
 800a60a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a60e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a614:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a618:	e7f3      	b.n	800a602 <__kernel_rem_pio2+0x32e>
 800a61a:	a90c      	add	r1, sp, #48	@ 0x30
 800a61c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a620:	3b01      	subs	r3, #1
 800a622:	430a      	orrs	r2, r1
 800a624:	e794      	b.n	800a550 <__kernel_rem_pio2+0x27c>
 800a626:	3401      	adds	r4, #1
 800a628:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	d0fa      	beq.n	800a626 <__kernel_rem_pio2+0x352>
 800a630:	9b08      	ldr	r3, [sp, #32]
 800a632:	aa20      	add	r2, sp, #128	@ 0x80
 800a634:	445b      	add	r3, fp
 800a636:	f10b 0801 	add.w	r8, fp, #1
 800a63a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a63e:	445c      	add	r4, fp
 800a640:	4544      	cmp	r4, r8
 800a642:	da04      	bge.n	800a64e <__kernel_rem_pio2+0x37a>
 800a644:	46a3      	mov	fp, r4
 800a646:	e6bf      	b.n	800a3c8 <__kernel_rem_pio2+0xf4>
 800a648:	2401      	movs	r4, #1
 800a64a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a64c:	e7ec      	b.n	800a628 <__kernel_rem_pio2+0x354>
 800a64e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a650:	46ab      	mov	fp, r5
 800a652:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a656:	f7f5 fecd 	bl	80003f4 <__aeabi_i2d>
 800a65a:	f04f 0900 	mov.w	r9, #0
 800a65e:	2600      	movs	r6, #0
 800a660:	2700      	movs	r7, #0
 800a662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a664:	e9c5 0100 	strd	r0, r1, [r5]
 800a668:	3b08      	subs	r3, #8
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	9b06      	ldr	r3, [sp, #24]
 800a66e:	4599      	cmp	r9, r3
 800a670:	dd07      	ble.n	800a682 <__kernel_rem_pio2+0x3ae>
 800a672:	9b07      	ldr	r3, [sp, #28]
 800a674:	f108 0801 	add.w	r8, r8, #1
 800a678:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a67c:	3508      	adds	r5, #8
 800a67e:	9307      	str	r3, [sp, #28]
 800a680:	e7de      	b.n	800a640 <__kernel_rem_pio2+0x36c>
 800a682:	9900      	ldr	r1, [sp, #0]
 800a684:	f109 0901 	add.w	r9, r9, #1
 800a688:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a68c:	9100      	str	r1, [sp, #0]
 800a68e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a692:	f7f5 ff19 	bl	80004c8 <__aeabi_dmul>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4630      	mov	r0, r6
 800a69c:	4639      	mov	r1, r7
 800a69e:	f7f5 fd5d 	bl	800015c <__adddf3>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	e7e1      	b.n	800a66c <__kernel_rem_pio2+0x398>
 800a6a8:	f1ca 0200 	rsb	r2, sl, #0
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	f000 f936 	bl	800a920 <scalbn>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	4b97      	ldr	r3, [pc, #604]	@ (800a914 <__kernel_rem_pio2+0x640>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	f7f6 f98a 	bl	80009d4 <__aeabi_dcmpge>
 800a6c0:	b300      	cbz	r0, 800a704 <__kernel_rem_pio2+0x430>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	4b94      	ldr	r3, [pc, #592]	@ (800a918 <__kernel_rem_pio2+0x644>)
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	f7f5 fefd 	bl	80004c8 <__aeabi_dmul>
 800a6ce:	f7f6 f995 	bl	80009fc <__aeabi_d2iz>
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	f7f5 fe8e 	bl	80003f4 <__aeabi_i2d>
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4b8e      	ldr	r3, [pc, #568]	@ (800a914 <__kernel_rem_pio2+0x640>)
 800a6dc:	f7f5 fef4 	bl	80004c8 <__aeabi_dmul>
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7f5 fd36 	bl	8000158 <__aeabi_dsub>
 800a6ec:	f7f6 f986 	bl	80009fc <__aeabi_d2iz>
 800a6f0:	ab0c      	add	r3, sp, #48	@ 0x30
 800a6f2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a6f6:	f10b 0b01 	add.w	fp, fp, #1
 800a6fa:	f10a 0a18 	add.w	sl, sl, #24
 800a6fe:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a702:	e733      	b.n	800a56c <__kernel_rem_pio2+0x298>
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f6 f978 	bl	80009fc <__aeabi_d2iz>
 800a70c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a70e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a712:	e72b      	b.n	800a56c <__kernel_rem_pio2+0x298>
 800a714:	ab0c      	add	r3, sp, #48	@ 0x30
 800a716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a71a:	f7f5 fe6b 	bl	80003f4 <__aeabi_i2d>
 800a71e:	4632      	mov	r2, r6
 800a720:	463b      	mov	r3, r7
 800a722:	f7f5 fed1 	bl	80004c8 <__aeabi_dmul>
 800a726:	464a      	mov	r2, r9
 800a728:	e868 0102 	strd	r0, r1, [r8], #-8
 800a72c:	4653      	mov	r3, sl
 800a72e:	4630      	mov	r0, r6
 800a730:	4639      	mov	r1, r7
 800a732:	f7f5 fec9 	bl	80004c8 <__aeabi_dmul>
 800a736:	3d01      	subs	r5, #1
 800a738:	4606      	mov	r6, r0
 800a73a:	460f      	mov	r7, r1
 800a73c:	e727      	b.n	800a58e <__kernel_rem_pio2+0x2ba>
 800a73e:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a742:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a746:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a74a:	f8cd c018 	str.w	ip, [sp, #24]
 800a74e:	f7f5 febb 	bl	80004c8 <__aeabi_dmul>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4648      	mov	r0, r9
 800a758:	4651      	mov	r1, sl
 800a75a:	f7f5 fcff 	bl	800015c <__adddf3>
 800a75e:	4681      	mov	r9, r0
 800a760:	468a      	mov	sl, r1
 800a762:	3701      	adds	r7, #1
 800a764:	9b02      	ldr	r3, [sp, #8]
 800a766:	429f      	cmp	r7, r3
 800a768:	dc01      	bgt.n	800a76e <__kernel_rem_pio2+0x49a>
 800a76a:	42be      	cmp	r6, r7
 800a76c:	dae7      	bge.n	800a73e <__kernel_rem_pio2+0x46a>
 800a76e:	ab48      	add	r3, sp, #288	@ 0x120
 800a770:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a774:	e9c6 9a00 	strd	r9, sl, [r6]
 800a778:	3d01      	subs	r5, #1
 800a77a:	e70c      	b.n	800a596 <__kernel_rem_pio2+0x2c2>
 800a77c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a77e:	2b02      	cmp	r3, #2
 800a780:	dc09      	bgt.n	800a796 <__kernel_rem_pio2+0x4c2>
 800a782:	2b00      	cmp	r3, #0
 800a784:	dc2c      	bgt.n	800a7e0 <__kernel_rem_pio2+0x50c>
 800a786:	d04e      	beq.n	800a826 <__kernel_rem_pio2+0x552>
 800a788:	9b05      	ldr	r3, [sp, #20]
 800a78a:	f003 0007 	and.w	r0, r3, #7
 800a78e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a796:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d1f5      	bne.n	800a788 <__kernel_rem_pio2+0x4b4>
 800a79c:	ab48      	add	r3, sp, #288	@ 0x120
 800a79e:	441c      	add	r4, r3
 800a7a0:	4625      	mov	r5, r4
 800a7a2:	46da      	mov	sl, fp
 800a7a4:	f1ba 0f00 	cmp.w	sl, #0
 800a7a8:	dc63      	bgt.n	800a872 <__kernel_rem_pio2+0x59e>
 800a7aa:	4625      	mov	r5, r4
 800a7ac:	46da      	mov	sl, fp
 800a7ae:	f1ba 0f01 	cmp.w	sl, #1
 800a7b2:	dc7b      	bgt.n	800a8ac <__kernel_rem_pio2+0x5d8>
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	f1bb 0f01 	cmp.w	fp, #1
 800a7bc:	f300 8093 	bgt.w	800a8e6 <__kernel_rem_pio2+0x612>
 800a7c0:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a7c4:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a7c8:	9b00      	ldr	r3, [sp, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f040 8092 	bne.w	800a8f4 <__kernel_rem_pio2+0x620>
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	e9c3 7800 	strd	r7, r8, [r3]
 800a7d6:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a7da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a7de:	e7d3      	b.n	800a788 <__kernel_rem_pio2+0x4b4>
 800a7e0:	465d      	mov	r5, fp
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	ab48      	add	r3, sp, #288	@ 0x120
 800a7e8:	441c      	add	r4, r3
 800a7ea:	2d00      	cmp	r5, #0
 800a7ec:	da32      	bge.n	800a854 <__kernel_rem_pio2+0x580>
 800a7ee:	9b00      	ldr	r3, [sp, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d035      	beq.n	800a860 <__kernel_rem_pio2+0x58c>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7fa:	9c04      	ldr	r4, [sp, #16]
 800a7fc:	2501      	movs	r5, #1
 800a7fe:	e9c4 2300 	strd	r2, r3, [r4]
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a80a:	f7f5 fca5 	bl	8000158 <__aeabi_dsub>
 800a80e:	ac48      	add	r4, sp, #288	@ 0x120
 800a810:	45ab      	cmp	fp, r5
 800a812:	da28      	bge.n	800a866 <__kernel_rem_pio2+0x592>
 800a814:	9b00      	ldr	r3, [sp, #0]
 800a816:	b113      	cbz	r3, 800a81e <__kernel_rem_pio2+0x54a>
 800a818:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a81c:	4619      	mov	r1, r3
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a824:	e7b0      	b.n	800a788 <__kernel_rem_pio2+0x4b4>
 800a826:	2000      	movs	r0, #0
 800a828:	2100      	movs	r1, #0
 800a82a:	ab48      	add	r3, sp, #288	@ 0x120
 800a82c:	441c      	add	r4, r3
 800a82e:	f1bb 0f00 	cmp.w	fp, #0
 800a832:	da08      	bge.n	800a846 <__kernel_rem_pio2+0x572>
 800a834:	9b00      	ldr	r3, [sp, #0]
 800a836:	b113      	cbz	r3, 800a83e <__kernel_rem_pio2+0x56a>
 800a838:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a83c:	4619      	mov	r1, r3
 800a83e:	9b04      	ldr	r3, [sp, #16]
 800a840:	e9c3 0100 	strd	r0, r1, [r3]
 800a844:	e7a0      	b.n	800a788 <__kernel_rem_pio2+0x4b4>
 800a846:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a84a:	f7f5 fc87 	bl	800015c <__adddf3>
 800a84e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a852:	e7ec      	b.n	800a82e <__kernel_rem_pio2+0x55a>
 800a854:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a858:	f7f5 fc80 	bl	800015c <__adddf3>
 800a85c:	3d01      	subs	r5, #1
 800a85e:	e7c4      	b.n	800a7ea <__kernel_rem_pio2+0x516>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	e7c9      	b.n	800a7fa <__kernel_rem_pio2+0x526>
 800a866:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800a86a:	f7f5 fc77 	bl	800015c <__adddf3>
 800a86e:	3501      	adds	r5, #1
 800a870:	e7ce      	b.n	800a810 <__kernel_rem_pio2+0x53c>
 800a872:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a876:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a882:	f7f5 fc6b 	bl	800015c <__adddf3>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4606      	mov	r6, r0
 800a88c:	460f      	mov	r7, r1
 800a88e:	4640      	mov	r0, r8
 800a890:	4649      	mov	r1, r9
 800a892:	f7f5 fc61 	bl	8000158 <__aeabi_dsub>
 800a896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a89a:	f7f5 fc5f 	bl	800015c <__adddf3>
 800a89e:	e865 0102 	strd	r0, r1, [r5], #-8
 800a8a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8a6:	e9c5 6700 	strd	r6, r7, [r5]
 800a8aa:	e77b      	b.n	800a7a4 <__kernel_rem_pio2+0x4d0>
 800a8ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8b0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8bc:	f7f5 fc4e 	bl	800015c <__adddf3>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	460f      	mov	r7, r1
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	4649      	mov	r1, r9
 800a8cc:	f7f5 fc44 	bl	8000158 <__aeabi_dsub>
 800a8d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8d4:	f7f5 fc42 	bl	800015c <__adddf3>
 800a8d8:	e865 0102 	strd	r0, r1, [r5], #-8
 800a8dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e0:	e9c5 6700 	strd	r6, r7, [r5]
 800a8e4:	e763      	b.n	800a7ae <__kernel_rem_pio2+0x4da>
 800a8e6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a8ea:	f7f5 fc37 	bl	800015c <__adddf3>
 800a8ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8f2:	e761      	b.n	800a7b8 <__kernel_rem_pio2+0x4e4>
 800a8f4:	9b04      	ldr	r3, [sp, #16]
 800a8f6:	9a04      	ldr	r2, [sp, #16]
 800a8f8:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a8fc:	601f      	str	r7, [r3, #0]
 800a8fe:	605c      	str	r4, [r3, #4]
 800a900:	609d      	str	r5, [r3, #8]
 800a902:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a906:	60d3      	str	r3, [r2, #12]
 800a908:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a90c:	6110      	str	r0, [r2, #16]
 800a90e:	6153      	str	r3, [r2, #20]
 800a910:	e73a      	b.n	800a788 <__kernel_rem_pio2+0x4b4>
 800a912:	bf00      	nop
 800a914:	41700000 	.word	0x41700000
 800a918:	3e700000 	.word	0x3e700000
 800a91c:	00000000 	.word	0x00000000

0800a920 <scalbn>:
 800a920:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a924:	4616      	mov	r6, r2
 800a926:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a92a:	4683      	mov	fp, r0
 800a92c:	468c      	mov	ip, r1
 800a92e:	460b      	mov	r3, r1
 800a930:	b982      	cbnz	r2, 800a954 <scalbn+0x34>
 800a932:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a936:	4303      	orrs	r3, r0
 800a938:	d039      	beq.n	800a9ae <scalbn+0x8e>
 800a93a:	4b2f      	ldr	r3, [pc, #188]	@ (800a9f8 <scalbn+0xd8>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	f7f5 fdc3 	bl	80004c8 <__aeabi_dmul>
 800a942:	4b2e      	ldr	r3, [pc, #184]	@ (800a9fc <scalbn+0xdc>)
 800a944:	4683      	mov	fp, r0
 800a946:	429e      	cmp	r6, r3
 800a948:	468c      	mov	ip, r1
 800a94a:	da0d      	bge.n	800a968 <scalbn+0x48>
 800a94c:	a326      	add	r3, pc, #152	@ (adr r3, 800a9e8 <scalbn+0xc8>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	e01b      	b.n	800a98c <scalbn+0x6c>
 800a954:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a958:	42ba      	cmp	r2, r7
 800a95a:	d109      	bne.n	800a970 <scalbn+0x50>
 800a95c:	4602      	mov	r2, r0
 800a95e:	f7f5 fbfd 	bl	800015c <__adddf3>
 800a962:	4683      	mov	fp, r0
 800a964:	468c      	mov	ip, r1
 800a966:	e022      	b.n	800a9ae <scalbn+0x8e>
 800a968:	460b      	mov	r3, r1
 800a96a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a96e:	3a36      	subs	r2, #54	@ 0x36
 800a970:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a974:	428e      	cmp	r6, r1
 800a976:	dd0c      	ble.n	800a992 <scalbn+0x72>
 800a978:	a31d      	add	r3, pc, #116	@ (adr r3, 800a9f0 <scalbn+0xd0>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	461c      	mov	r4, r3
 800a980:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a984:	f361 74df 	bfi	r4, r1, #31, #1
 800a988:	4621      	mov	r1, r4
 800a98a:	481d      	ldr	r0, [pc, #116]	@ (800aa00 <scalbn+0xe0>)
 800a98c:	f7f5 fd9c 	bl	80004c8 <__aeabi_dmul>
 800a990:	e7e7      	b.n	800a962 <scalbn+0x42>
 800a992:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a996:	4432      	add	r2, r6
 800a998:	428a      	cmp	r2, r1
 800a99a:	dced      	bgt.n	800a978 <scalbn+0x58>
 800a99c:	2a00      	cmp	r2, #0
 800a99e:	dd0a      	ble.n	800a9b6 <scalbn+0x96>
 800a9a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a9a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a9a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9ac:	46ac      	mov	ip, r5
 800a9ae:	4658      	mov	r0, fp
 800a9b0:	4661      	mov	r1, ip
 800a9b2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a9b6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a9ba:	da09      	bge.n	800a9d0 <scalbn+0xb0>
 800a9bc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a9c0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a9c4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a9c8:	480e      	ldr	r0, [pc, #56]	@ (800aa04 <scalbn+0xe4>)
 800a9ca:	f041 011f 	orr.w	r1, r1, #31
 800a9ce:	e7bd      	b.n	800a94c <scalbn+0x2c>
 800a9d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a9d4:	3236      	adds	r2, #54	@ 0x36
 800a9d6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a9da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9de:	4658      	mov	r0, fp
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4b08      	ldr	r3, [pc, #32]	@ (800aa08 <scalbn+0xe8>)
 800a9e6:	e7d1      	b.n	800a98c <scalbn+0x6c>
 800a9e8:	c2f8f359 	.word	0xc2f8f359
 800a9ec:	01a56e1f 	.word	0x01a56e1f
 800a9f0:	8800759c 	.word	0x8800759c
 800a9f4:	7e37e43c 	.word	0x7e37e43c
 800a9f8:	43500000 	.word	0x43500000
 800a9fc:	ffff3cb0 	.word	0xffff3cb0
 800aa00:	8800759c 	.word	0x8800759c
 800aa04:	c2f8f359 	.word	0xc2f8f359
 800aa08:	3c900000 	.word	0x3c900000
 800aa0c:	00000000 	.word	0x00000000

0800aa10 <floor>:
 800aa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800aa18:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800aa1c:	2e13      	cmp	r6, #19
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	460c      	mov	r4, r1
 800aa24:	4605      	mov	r5, r0
 800aa26:	4680      	mov	r8, r0
 800aa28:	dc35      	bgt.n	800aa96 <floor+0x86>
 800aa2a:	2e00      	cmp	r6, #0
 800aa2c:	da17      	bge.n	800aa5e <floor+0x4e>
 800aa2e:	a334      	add	r3, pc, #208	@ (adr r3, 800ab00 <floor+0xf0>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	f7f5 fb92 	bl	800015c <__adddf3>
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f7f5 ffd4 	bl	80009e8 <__aeabi_dcmpgt>
 800aa40:	b150      	cbz	r0, 800aa58 <floor+0x48>
 800aa42:	2c00      	cmp	r4, #0
 800aa44:	da57      	bge.n	800aaf6 <floor+0xe6>
 800aa46:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800aa4a:	432c      	orrs	r4, r5
 800aa4c:	2500      	movs	r5, #0
 800aa4e:	42ac      	cmp	r4, r5
 800aa50:	4c2d      	ldr	r4, [pc, #180]	@ (800ab08 <floor+0xf8>)
 800aa52:	bf08      	it	eq
 800aa54:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800aa58:	4623      	mov	r3, r4
 800aa5a:	462a      	mov	r2, r5
 800aa5c:	e024      	b.n	800aaa8 <floor+0x98>
 800aa5e:	4f2b      	ldr	r7, [pc, #172]	@ (800ab0c <floor+0xfc>)
 800aa60:	4137      	asrs	r7, r6
 800aa62:	ea01 0c07 	and.w	ip, r1, r7
 800aa66:	ea5c 0c00 	orrs.w	ip, ip, r0
 800aa6a:	d01d      	beq.n	800aaa8 <floor+0x98>
 800aa6c:	a324      	add	r3, pc, #144	@ (adr r3, 800ab00 <floor+0xf0>)
 800aa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa72:	f7f5 fb73 	bl	800015c <__adddf3>
 800aa76:	2200      	movs	r2, #0
 800aa78:	2300      	movs	r3, #0
 800aa7a:	f7f5 ffb5 	bl	80009e8 <__aeabi_dcmpgt>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d0ea      	beq.n	800aa58 <floor+0x48>
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	bfbe      	ittt	lt
 800aa86:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800aa8a:	4133      	asrlt	r3, r6
 800aa8c:	18e4      	addlt	r4, r4, r3
 800aa8e:	2500      	movs	r5, #0
 800aa90:	ea24 0407 	bic.w	r4, r4, r7
 800aa94:	e7e0      	b.n	800aa58 <floor+0x48>
 800aa96:	2e33      	cmp	r6, #51	@ 0x33
 800aa98:	dd0a      	ble.n	800aab0 <floor+0xa0>
 800aa9a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800aa9e:	d103      	bne.n	800aaa8 <floor+0x98>
 800aaa0:	f7f5 fb5c 	bl	800015c <__adddf3>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4619      	mov	r1, r3
 800aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab0:	f04f 3cff 	mov.w	ip, #4294967295
 800aab4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800aab8:	fa2c f707 	lsr.w	r7, ip, r7
 800aabc:	4207      	tst	r7, r0
 800aabe:	d0f3      	beq.n	800aaa8 <floor+0x98>
 800aac0:	a30f      	add	r3, pc, #60	@ (adr r3, 800ab00 <floor+0xf0>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fb49 	bl	800015c <__adddf3>
 800aaca:	2200      	movs	r2, #0
 800aacc:	2300      	movs	r3, #0
 800aace:	f7f5 ff8b 	bl	80009e8 <__aeabi_dcmpgt>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d0c0      	beq.n	800aa58 <floor+0x48>
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	da0a      	bge.n	800aaf0 <floor+0xe0>
 800aada:	2e14      	cmp	r6, #20
 800aadc:	d101      	bne.n	800aae2 <floor+0xd2>
 800aade:	3401      	adds	r4, #1
 800aae0:	e006      	b.n	800aaf0 <floor+0xe0>
 800aae2:	2301      	movs	r3, #1
 800aae4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800aae8:	40b3      	lsls	r3, r6
 800aaea:	441d      	add	r5, r3
 800aaec:	4545      	cmp	r5, r8
 800aaee:	d3f6      	bcc.n	800aade <floor+0xce>
 800aaf0:	ea25 0507 	bic.w	r5, r5, r7
 800aaf4:	e7b0      	b.n	800aa58 <floor+0x48>
 800aaf6:	2500      	movs	r5, #0
 800aaf8:	462c      	mov	r4, r5
 800aafa:	e7ad      	b.n	800aa58 <floor+0x48>
 800aafc:	f3af 8000 	nop.w
 800ab00:	8800759c 	.word	0x8800759c
 800ab04:	7e37e43c 	.word	0x7e37e43c
 800ab08:	bff00000 	.word	0xbff00000
 800ab0c:	000fffff 	.word	0x000fffff

0800ab10 <_init>:
 800ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab12:	bf00      	nop
 800ab14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab16:	bc08      	pop	{r3}
 800ab18:	469e      	mov	lr, r3
 800ab1a:	4770      	bx	lr

0800ab1c <_fini>:
 800ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1e:	bf00      	nop
 800ab20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab22:	bc08      	pop	{r3}
 800ab24:	469e      	mov	lr, r3
 800ab26:	4770      	bx	lr
